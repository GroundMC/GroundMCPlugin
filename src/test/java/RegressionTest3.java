
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test001"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    java.lang.String str8 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender9 = null;
    org.bukkit.command.Command command10 = null;
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    char char14 = i18n12.getColorChar();
    char char15 = i18n12.getColorChar();
    char char16 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n17.getBundleCache$spigot_1_8();
    java.lang.String[] str_array19 = new java.lang.String[] {  };
    java.lang.String[] str_array21 = i18n17.getStrings(str_array19, "hi!");
    java.lang.String[] str_array23 = i18n12.getStrings(str_array21, "GMCrx");
    char char24 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    char char27 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n25.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char30 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n29.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n29.getBundleCache$spigot_1_8();
    char char33 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n34 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char35 = i18n34.getColorChar();
    char char36 = i18n34.getColorChar();
    char char37 = i18n34.getColorChar();
    char char38 = i18n34.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n39 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache40 = i18n39.getBundleCache$spigot_1_8();
    java.lang.String[] str_array41 = new java.lang.String[] {  };
    java.lang.String[] str_array43 = i18n39.getStrings(str_array41, "hi!");
    java.lang.String[] str_array45 = i18n34.getStrings(str_array43, "GMCrx");
    java.lang.String[] str_array47 = i18n29.getStrings(str_array43, "GMC");
    java.lang.String[] str_array49 = i18n25.getStrings(str_array43, "GMCx");
    java.lang.String[] str_array51 = i18n12.getStrings(str_array49, "hi!");
    // The following exception was thrown during execution in test generation
    try {
    boolean b52 = commandLobby0.execute(commandSender9, command10, "lobby", str_array51);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lobby"+ "'", str8.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test002"); }

    org.joda.time.DateTime dateTime2 = null;
    // The following exception was thrown during execution in test generation
    try {
    gtlp.groundmc.lobby.Relationship relationship3 = new gtlp.groundmc.lobby.Relationship("GMC", "groundmc.lobby.admin", dateTime2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test003"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n5.getBundleCache$spigot_1_8();
    java.lang.String[] str_array7 = new java.lang.String[] {  };
    java.lang.String[] str_array9 = i18n5.getStrings(str_array7, "hi!");
    java.lang.String[] str_array11 = i18n0.getStrings(str_array9, "GMCrx");
    char char12 = i18n0.getColorChar();
    char char13 = i18n0.getColorChar();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str16 = i18n0.getString("GMCrx", "groundmc.lobby.hide_players");
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test004"); }

    gtlp.groundmc.lobby.registry.LobbyCommandRegistry.Companion companion0 = gtlp.groundmc.lobby.registry.LobbyCommandRegistry.Companion;
    gtlp.groundmc.lobby.commands.CommandCoins commandCoins1 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str2 = commandCoins1.getName();
    java.lang.String str3 = commandCoins1.getName();
    java.lang.String str4 = commandCoins1.getName();
    java.lang.String str5 = commandCoins1.getName();
    java.lang.String str6 = commandCoins1.getName();
    java.lang.String str7 = commandCoins1.getName();
    java.lang.String str8 = commandCoins1.getName();
    java.lang.String str9 = commandCoins1.getName();
    java.lang.String str10 = commandCoins1.getName();
    java.lang.String str11 = commandCoins1.getName();
    java.lang.String str12 = commandCoins1.getName();
    java.lang.String str13 = commandCoins1.getName();
    java.lang.String str14 = commandCoins1.getName();
    // The following exception was thrown during execution in test generation
    try {
    companion0.registerCommand((gtlp.groundmc.lobby.commands.ILobbyCommand)commandCoins1);
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(companion0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "coins"+ "'", str10.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "coins"+ "'", str11.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "coins"+ "'", str12.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "coins"+ "'", str13.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "coins"+ "'", str14.equals("coins"));

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test005"); }

    gtlp.groundmc.lobby.registry.LobbyCommandRegistry.Companion companion0 = gtlp.groundmc.lobby.registry.LobbyCommandRegistry.Companion;
    // The following exception was thrown during execution in test generation
    try {
    boolean b2 = companion0.hasCommand("GMChide");
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(companion0);

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test006"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender7 = null;
    org.bukkit.command.Command command8 = null;
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n10.getBundleCache$spigot_1_8();
    char char13 = i18n10.getColorChar();
    char char14 = i18n10.getColorChar();
    char char15 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n16.getBundleCache$spigot_1_8();
    java.lang.String[] str_array18 = new java.lang.String[] {  };
    java.lang.String[] str_array20 = i18n16.getStrings(str_array18, "hi!");
    java.lang.String[] str_array22 = i18n10.getStrings(str_array20, "GMCy");
    char char23 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n24.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n24.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n28.getBundleCache$spigot_1_8();
    java.lang.String[] str_array30 = new java.lang.String[] {  };
    java.lang.String[] str_array32 = i18n28.getStrings(str_array30, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n28.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n34 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char35 = i18n34.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n34.getBundleCache$spigot_1_8();
    char char37 = i18n34.getColorChar();
    char char38 = i18n34.getColorChar();
    char char39 = i18n34.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache40 = i18n34.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n41 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char42 = i18n41.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache43 = i18n41.getBundleCache$spigot_1_8();
    char char44 = i18n41.getColorChar();
    char char45 = i18n41.getColorChar();
    char char46 = i18n41.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache47 = i18n41.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache48 = i18n41.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n49 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char50 = i18n49.getColorChar();
    char char51 = i18n49.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache52 = i18n49.getBundleCache$spigot_1_8();
    char char53 = i18n49.getColorChar();
    char char54 = i18n49.getColorChar();
    char char55 = i18n49.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n56 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char57 = i18n56.getColorChar();
    char char58 = i18n56.getColorChar();
    char char59 = i18n56.getColorChar();
    char char60 = i18n56.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n61 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache62 = i18n61.getBundleCache$spigot_1_8();
    java.lang.String[] str_array63 = new java.lang.String[] {  };
    java.lang.String[] str_array65 = i18n61.getStrings(str_array63, "hi!");
    java.lang.String[] str_array67 = i18n56.getStrings(str_array65, "GMCrx");
    java.lang.String[] str_array69 = i18n49.getStrings(str_array65, "friends");
    java.lang.String[] str_array71 = i18n41.getStrings(str_array69, "GMCt");
    java.lang.String[] str_array73 = i18n34.getStrings(str_array69, "friend");
    java.lang.String[] str_array75 = i18n28.getStrings(str_array69, "GMCt");
    java.lang.String[] str_array77 = i18n24.getStrings(str_array69, "groundmc.lobby.admin");
    java.lang.String[] str_array79 = i18n10.getStrings(str_array69, "GMCz");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str80 = commandCoins0.getTabCompletion(commandSender7, command8, "friend", str_array69);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test007"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    java.lang.String str8 = commandLobby0.getName();
    java.lang.String str9 = commandLobby0.getName();
    java.lang.String str10 = commandLobby0.getName();
    java.lang.String str11 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender12 = null;
    org.bukkit.command.Command command13 = null;
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    char char17 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n15.getBundleCache$spigot_1_8();
    char char19 = i18n15.getColorChar();
    char char20 = i18n15.getColorChar();
    char char21 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    char char24 = i18n22.getColorChar();
    char char25 = i18n22.getColorChar();
    char char26 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n27.getBundleCache$spigot_1_8();
    java.lang.String[] str_array29 = new java.lang.String[] {  };
    java.lang.String[] str_array31 = i18n27.getStrings(str_array29, "hi!");
    java.lang.String[] str_array33 = i18n22.getStrings(str_array31, "GMCrx");
    java.lang.String[] str_array35 = i18n15.getStrings(str_array31, "friends");
    // The following exception was thrown during execution in test generation
    try {
    boolean b36 = commandLobby0.execute(commandSender12, command13, "GMChide", str_array35);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lobby"+ "'", str8.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "lobby"+ "'", str9.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "lobby"+ "'", str10.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "lobby"+ "'", str11.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test008"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    org.bukkit.command.CommandSender commandSender1 = null;
    org.bukkit.command.Command command2 = null;
    java.lang.String[] str_array4 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b5 = commandCoins0.execute(commandSender1, command2, "lang.lobby", str_array4);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test009"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    java.lang.String str8 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender9 = null;
    org.bukkit.command.Command command10 = null;
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    char char14 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n16.getBundleCache$spigot_1_8();
    char char20 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char22 = i18n21.getColorChar();
    char char23 = i18n21.getColorChar();
    char char24 = i18n21.getColorChar();
    char char25 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n26.getBundleCache$spigot_1_8();
    java.lang.String[] str_array28 = new java.lang.String[] {  };
    java.lang.String[] str_array30 = i18n26.getStrings(str_array28, "hi!");
    java.lang.String[] str_array32 = i18n21.getStrings(str_array30, "GMCrx");
    java.lang.String[] str_array34 = i18n16.getStrings(str_array30, "GMC");
    java.lang.String[] str_array36 = i18n12.getStrings(str_array30, "GMCx");
    // The following exception was thrown during execution in test generation
    try {
    boolean b37 = commandVanish0.execute(commandSender9, command10, "", str_array30);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test010"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    char char3 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    char char6 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char8 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n7.getBundleCache$spigot_1_8();
    char char10 = i18n7.getColorChar();
    char char11 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n19.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n19.getBundleCache$spigot_1_8();
    char char23 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    char char26 = i18n24.getColorChar();
    char char27 = i18n24.getColorChar();
    char char28 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n29.getBundleCache$spigot_1_8();
    java.lang.String[] str_array31 = new java.lang.String[] {  };
    java.lang.String[] str_array33 = i18n29.getStrings(str_array31, "hi!");
    java.lang.String[] str_array35 = i18n24.getStrings(str_array33, "GMCrx");
    java.lang.String[] str_array37 = i18n19.getStrings(str_array33, "GMC");
    java.lang.String[] str_array39 = i18n13.getStrings(str_array33, "GMCw");
    java.lang.String[] str_array41 = i18n7.getStrings(str_array39, "GMCy");
    java.util.Locale locale42 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array43 = i18n0.getStrings(str_array39, locale42);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test011"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    char char4 = i18n0.getColorChar();
    char char5 = i18n0.getColorChar();
    char char6 = i18n0.getColorChar();
    char char7 = i18n0.getColorChar();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str10 = i18n0.getString("GMC", "GMC");
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test012"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender2 = null;
    org.bukkit.command.Command command3 = null;
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n5.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n5.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n5.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n5.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n11.getBundleCache$spigot_1_8();
    char char15 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    char char18 = i18n16.getColorChar();
    char char19 = i18n16.getColorChar();
    char char20 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n21.getBundleCache$spigot_1_8();
    java.lang.String[] str_array23 = new java.lang.String[] {  };
    java.lang.String[] str_array25 = i18n21.getStrings(str_array23, "hi!");
    java.lang.String[] str_array27 = i18n16.getStrings(str_array25, "GMCrx");
    java.lang.String[] str_array29 = i18n11.getStrings(str_array25, "GMC");
    java.lang.String[] str_array31 = i18n5.getStrings(str_array25, "GMCw");
    // The following exception was thrown during execution in test generation
    try {
    boolean b32 = commandVanish0.execute(commandSender2, command3, "coins", str_array31);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test013"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender3 = null;
    org.bukkit.command.Command command4 = null;
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char7 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n6.getBundleCache$spigot_1_8();
    char char9 = i18n6.getColorChar();
    char char10 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n6.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n18.getBundleCache$spigot_1_8();
    char char22 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    char char25 = i18n23.getColorChar();
    char char26 = i18n23.getColorChar();
    char char27 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n28.getBundleCache$spigot_1_8();
    java.lang.String[] str_array30 = new java.lang.String[] {  };
    java.lang.String[] str_array32 = i18n28.getStrings(str_array30, "hi!");
    java.lang.String[] str_array34 = i18n23.getStrings(str_array32, "GMCrx");
    java.lang.String[] str_array36 = i18n18.getStrings(str_array32, "GMC");
    java.lang.String[] str_array38 = i18n12.getStrings(str_array32, "GMCw");
    java.lang.String[] str_array40 = i18n6.getStrings(str_array38, "GMCy");
    // The following exception was thrown during execution in test generation
    try {
    boolean b41 = commandFriends0.execute(commandSender3, command4, "hi!", str_array38);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test014"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char7 = i18n6.getColorChar();
    char char8 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n6.getBundleCache$spigot_1_8();
    char char10 = i18n6.getColorChar();
    char char11 = i18n6.getColorChar();
    char char12 = i18n6.getColorChar();
    char char13 = i18n6.getColorChar();
    char char14 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    char char17 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n15.getBundleCache$spigot_1_8();
    char char19 = i18n15.getColorChar();
    char char20 = i18n15.getColorChar();
    char char21 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n22.getBundleCache$spigot_1_8();
    char char25 = i18n22.getColorChar();
    char char26 = i18n22.getColorChar();
    char char27 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n22.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n22.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char31 = i18n30.getColorChar();
    char char32 = i18n30.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n30.getBundleCache$spigot_1_8();
    char char34 = i18n30.getColorChar();
    char char35 = i18n30.getColorChar();
    char char36 = i18n30.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n37 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char38 = i18n37.getColorChar();
    char char39 = i18n37.getColorChar();
    char char40 = i18n37.getColorChar();
    char char41 = i18n37.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n42 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache43 = i18n42.getBundleCache$spigot_1_8();
    java.lang.String[] str_array44 = new java.lang.String[] {  };
    java.lang.String[] str_array46 = i18n42.getStrings(str_array44, "hi!");
    java.lang.String[] str_array48 = i18n37.getStrings(str_array46, "GMCrx");
    java.lang.String[] str_array50 = i18n30.getStrings(str_array46, "friends");
    java.lang.String[] str_array52 = i18n22.getStrings(str_array50, "GMCt");
    java.lang.String[] str_array54 = i18n15.getStrings(str_array50, "groundmc.lobby.admin");
    java.lang.String[] str_array56 = i18n6.getStrings(str_array54, "coins");
    java.util.Locale locale57 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array58 = i18n0.getStrings(str_array54, locale57);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test015"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender3 = null;
    org.bukkit.command.Command command4 = null;
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char7 = i18n6.getColorChar();
    char char8 = i18n6.getColorChar();
    char char9 = i18n6.getColorChar();
    char char10 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n11.getBundleCache$spigot_1_8();
    java.lang.String[] str_array13 = new java.lang.String[] {  };
    java.lang.String[] str_array15 = i18n11.getStrings(str_array13, "hi!");
    java.lang.String[] str_array17 = i18n6.getStrings(str_array15, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n18.getBundleCache$spigot_1_8();
    char char22 = i18n18.getColorChar();
    char char23 = i18n18.getColorChar();
    char char24 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    char char27 = i18n25.getColorChar();
    char char28 = i18n25.getColorChar();
    char char29 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n30.getBundleCache$spigot_1_8();
    java.lang.String[] str_array32 = new java.lang.String[] {  };
    java.lang.String[] str_array34 = i18n30.getStrings(str_array32, "hi!");
    java.lang.String[] str_array36 = i18n25.getStrings(str_array34, "GMCrx");
    java.lang.String[] str_array38 = i18n18.getStrings(str_array34, "friends");
    java.lang.String[] str_array40 = i18n6.getStrings(str_array38, "");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str41 = commandFriends0.getTabCompletion(commandSender3, command4, "", str_array40);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test016"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n5.getBundleCache$spigot_1_8();
    java.lang.String[] str_array7 = new java.lang.String[] {  };
    java.lang.String[] str_array9 = i18n5.getStrings(str_array7, "hi!");
    java.lang.String[] str_array11 = i18n0.getStrings(str_array9, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    char char14 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n12.getBundleCache$spigot_1_8();
    char char16 = i18n12.getColorChar();
    char char17 = i18n12.getColorChar();
    char char18 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    char char21 = i18n19.getColorChar();
    char char22 = i18n19.getColorChar();
    char char23 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n24.getBundleCache$spigot_1_8();
    java.lang.String[] str_array26 = new java.lang.String[] {  };
    java.lang.String[] str_array28 = i18n24.getStrings(str_array26, "hi!");
    java.lang.String[] str_array30 = i18n19.getStrings(str_array28, "GMCrx");
    java.lang.String[] str_array32 = i18n12.getStrings(str_array28, "friends");
    java.lang.String[] str_array34 = i18n0.getStrings(str_array32, "");
    char char35 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char37 = i18n36.getColorChar();
    char char38 = i18n36.getColorChar();
    char char39 = i18n36.getColorChar();
    char char40 = i18n36.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n41 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n41.getBundleCache$spigot_1_8();
    java.lang.String[] str_array43 = new java.lang.String[] {  };
    java.lang.String[] str_array45 = i18n41.getStrings(str_array43, "hi!");
    java.lang.String[] str_array47 = i18n36.getStrings(str_array45, "GMCrx");
    java.util.Locale locale48 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array49 = i18n0.getStrings(str_array45, locale48);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test017"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    java.lang.String str8 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender9 = null;
    org.bukkit.command.Command command10 = null;
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    char char14 = i18n12.getColorChar();
    char char15 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    char char19 = i18n17.getColorChar();
    char char20 = i18n17.getColorChar();
    char char21 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n22.getBundleCache$spigot_1_8();
    java.lang.String[] str_array24 = new java.lang.String[] {  };
    java.lang.String[] str_array26 = i18n22.getStrings(str_array24, "hi!");
    java.lang.String[] str_array28 = i18n17.getStrings(str_array26, "GMCrx");
    java.lang.String[] str_array30 = i18n12.getStrings(str_array28, "GMCt");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str31 = commandFriend0.getTabCompletion(commandSender9, command10, "friend", str_array28);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friend"+ "'", str8.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test018"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    char char3 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n4 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char5 = i18n4.getColorChar();
    char char6 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n4.getBundleCache$spigot_1_8();
    char char8 = i18n4.getColorChar();
    char char9 = i18n4.getColorChar();
    char char10 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    char char13 = i18n11.getColorChar();
    char char14 = i18n11.getColorChar();
    char char15 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n16.getBundleCache$spigot_1_8();
    java.lang.String[] str_array18 = new java.lang.String[] {  };
    java.lang.String[] str_array20 = i18n16.getStrings(str_array18, "hi!");
    java.lang.String[] str_array22 = i18n11.getStrings(str_array20, "GMCrx");
    java.lang.String[] str_array24 = i18n4.getStrings(str_array20, "friends");
    java.lang.String[] str_array26 = i18n0.getStrings(str_array24, "GMCsilent");
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    char char29 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n27.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n27.getBundleCache$spigot_1_8();
    char char32 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char34 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n33.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n33.getBundleCache$spigot_1_8();
    char char37 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache38 = i18n33.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache39 = i18n33.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char41 = i18n40.getColorChar();
    char char42 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache43 = i18n40.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache44 = i18n40.getBundleCache$spigot_1_8();
    char char45 = i18n40.getColorChar();
    char char46 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n47 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char48 = i18n47.getColorChar();
    char char49 = i18n47.getColorChar();
    char char50 = i18n47.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n47.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n52 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char53 = i18n52.getColorChar();
    char char54 = i18n52.getColorChar();
    char char55 = i18n52.getColorChar();
    char char56 = i18n52.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n57 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache58 = i18n57.getBundleCache$spigot_1_8();
    java.lang.String[] str_array59 = new java.lang.String[] {  };
    java.lang.String[] str_array61 = i18n57.getStrings(str_array59, "hi!");
    java.lang.String[] str_array63 = i18n52.getStrings(str_array61, "GMCrx");
    java.lang.String[] str_array65 = i18n47.getStrings(str_array63, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n66 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache67 = i18n66.getBundleCache$spigot_1_8();
    java.lang.String[] str_array68 = new java.lang.String[] {  };
    java.lang.String[] str_array70 = i18n66.getStrings(str_array68, "hi!");
    java.lang.String[] str_array72 = i18n47.getStrings(str_array70, "groundmc.lobby.hide_players");
    java.lang.String[] str_array74 = i18n40.getStrings(str_array72, "lang.lobby");
    java.lang.String[] str_array76 = i18n33.getStrings(str_array74, "hi!");
    java.lang.String[] str_array78 = i18n27.getStrings(str_array76, "GMCw");
    java.util.Locale locale79 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array80 = i18n0.getStrings(str_array78, locale79);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char56 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test019"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender4 = null;
    org.bukkit.command.Command command5 = null;
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char8 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n13.getBundleCache$spigot_1_8();
    char char17 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    char char21 = i18n18.getColorChar();
    char char22 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n23.getBundleCache$spigot_1_8();
    java.lang.String[] str_array25 = new java.lang.String[] {  };
    java.lang.String[] str_array27 = i18n23.getStrings(str_array25, "hi!");
    java.lang.String[] str_array29 = i18n18.getStrings(str_array27, "GMCrx");
    java.lang.String[] str_array31 = i18n13.getStrings(str_array27, "GMC");
    java.lang.String[] str_array33 = i18n7.getStrings(str_array27, "GMCw");
    // The following exception was thrown during execution in test generation
    try {
    boolean b34 = commandLobby0.execute(commandSender4, command5, "GMCry", str_array27);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test020"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender8 = null;
    org.bukkit.command.Command command9 = null;
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    char char13 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n11.getBundleCache$spigot_1_8();
    char char16 = i18n11.getColorChar();
    char char17 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    char char21 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    char char25 = i18n23.getColorChar();
    char char26 = i18n23.getColorChar();
    char char27 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n28.getBundleCache$spigot_1_8();
    java.lang.String[] str_array30 = new java.lang.String[] {  };
    java.lang.String[] str_array32 = i18n28.getStrings(str_array30, "hi!");
    java.lang.String[] str_array34 = i18n23.getStrings(str_array32, "GMCrx");
    java.lang.String[] str_array36 = i18n18.getStrings(str_array34, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n37 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache38 = i18n37.getBundleCache$spigot_1_8();
    java.lang.String[] str_array39 = new java.lang.String[] {  };
    java.lang.String[] str_array41 = i18n37.getStrings(str_array39, "hi!");
    java.lang.String[] str_array43 = i18n18.getStrings(str_array41, "groundmc.lobby.hide_players");
    java.lang.String[] str_array45 = i18n11.getStrings(str_array43, "lang.lobby");
    // The following exception was thrown during execution in test generation
    try {
    boolean b46 = commandCoins0.execute(commandSender8, command9, "GMCy", str_array45);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test021"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    char char3 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    char char6 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n9.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n9.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n9.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n9.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n9.getBundleCache$spigot_1_8();
    char char16 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n17.getBundleCache$spigot_1_8();
    char char19 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    char char24 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n22.getBundleCache$spigot_1_8();
    char char26 = i18n22.getColorChar();
    char char27 = i18n22.getColorChar();
    char char28 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char30 = i18n29.getColorChar();
    char char31 = i18n29.getColorChar();
    char char32 = i18n29.getColorChar();
    char char33 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n34 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n34.getBundleCache$spigot_1_8();
    java.lang.String[] str_array36 = new java.lang.String[] {  };
    java.lang.String[] str_array38 = i18n34.getStrings(str_array36, "hi!");
    java.lang.String[] str_array40 = i18n29.getStrings(str_array38, "GMCrx");
    java.lang.String[] str_array42 = i18n22.getStrings(str_array38, "friends");
    java.lang.String[] str_array44 = i18n20.getStrings(str_array42, "vanish");
    java.lang.String[] str_array46 = i18n17.getStrings(str_array44, "GMCt");
    java.lang.String[] str_array48 = i18n9.getStrings(str_array44, "GMCz");
    gtlp.groundmc.lobby.util.I18n i18n49 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char50 = i18n49.getColorChar();
    char char51 = i18n49.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache52 = i18n49.getBundleCache$spigot_1_8();
    char char53 = i18n49.getColorChar();
    char char54 = i18n49.getColorChar();
    char char55 = i18n49.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n56 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char57 = i18n56.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache58 = i18n56.getBundleCache$spigot_1_8();
    char char59 = i18n56.getColorChar();
    char char60 = i18n56.getColorChar();
    char char61 = i18n56.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache62 = i18n56.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache63 = i18n56.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n64 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char65 = i18n64.getColorChar();
    char char66 = i18n64.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache67 = i18n64.getBundleCache$spigot_1_8();
    char char68 = i18n64.getColorChar();
    char char69 = i18n64.getColorChar();
    char char70 = i18n64.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n71 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char72 = i18n71.getColorChar();
    char char73 = i18n71.getColorChar();
    char char74 = i18n71.getColorChar();
    char char75 = i18n71.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n76 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache77 = i18n76.getBundleCache$spigot_1_8();
    java.lang.String[] str_array78 = new java.lang.String[] {  };
    java.lang.String[] str_array80 = i18n76.getStrings(str_array78, "hi!");
    java.lang.String[] str_array82 = i18n71.getStrings(str_array80, "GMCrx");
    java.lang.String[] str_array84 = i18n64.getStrings(str_array80, "friends");
    java.lang.String[] str_array86 = i18n56.getStrings(str_array84, "GMCt");
    java.lang.String[] str_array88 = i18n49.getStrings(str_array84, "groundmc.lobby.admin");
    java.lang.String[] str_array90 = i18n9.getStrings(str_array84, "GMCrx");
    java.util.Locale locale91 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array92 = i18n0.getStrings(str_array90, locale91);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char69 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char70 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char72 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char73 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char74 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char75 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array90);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test022"); }

    int i1 = gtlp.groundmc.lobby.util.ExtensionsKt.getMegabytes((int)(byte)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == (-1048576));

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test023"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender2 = null;
    org.bukkit.command.Command command3 = null;
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n5.getBundleCache$spigot_1_8();
    char char8 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n5.getBundleCache$spigot_1_8();
    char char10 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    char char13 = i18n11.getColorChar();
    char char14 = i18n11.getColorChar();
    char char15 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n16.getBundleCache$spigot_1_8();
    java.lang.String[] str_array18 = new java.lang.String[] {  };
    java.lang.String[] str_array20 = i18n16.getStrings(str_array18, "hi!");
    java.lang.String[] str_array22 = i18n11.getStrings(str_array20, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    char char25 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n23.getBundleCache$spigot_1_8();
    char char27 = i18n23.getColorChar();
    char char28 = i18n23.getColorChar();
    char char29 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char31 = i18n30.getColorChar();
    char char32 = i18n30.getColorChar();
    char char33 = i18n30.getColorChar();
    char char34 = i18n30.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n35 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n35.getBundleCache$spigot_1_8();
    java.lang.String[] str_array37 = new java.lang.String[] {  };
    java.lang.String[] str_array39 = i18n35.getStrings(str_array37, "hi!");
    java.lang.String[] str_array41 = i18n30.getStrings(str_array39, "GMCrx");
    java.lang.String[] str_array43 = i18n23.getStrings(str_array39, "friends");
    java.lang.String[] str_array45 = i18n11.getStrings(str_array43, "");
    java.lang.String[] str_array47 = i18n5.getStrings(str_array43, "GMCw");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str48 = commandVanish0.getTabCompletion(commandSender2, command3, "GMChide", str_array47);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test024"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    java.lang.String str6 = commandFriends0.getName();
    java.lang.String str7 = commandFriends0.getName();
    java.lang.String str8 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender9 = null;
    org.bukkit.command.Command command10 = null;
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n12.getBundleCache$spigot_1_8();
    char char15 = i18n12.getColorChar();
    char char16 = i18n12.getColorChar();
    char char17 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n19.getBundleCache$spigot_1_8();
    char char22 = i18n19.getColorChar();
    char char23 = i18n19.getColorChar();
    char char24 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n19.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n19.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    char char29 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n27.getBundleCache$spigot_1_8();
    char char31 = i18n27.getColorChar();
    char char32 = i18n27.getColorChar();
    char char33 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n34 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char35 = i18n34.getColorChar();
    char char36 = i18n34.getColorChar();
    char char37 = i18n34.getColorChar();
    char char38 = i18n34.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n39 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache40 = i18n39.getBundleCache$spigot_1_8();
    java.lang.String[] str_array41 = new java.lang.String[] {  };
    java.lang.String[] str_array43 = i18n39.getStrings(str_array41, "hi!");
    java.lang.String[] str_array45 = i18n34.getStrings(str_array43, "GMCrx");
    java.lang.String[] str_array47 = i18n27.getStrings(str_array43, "friends");
    java.lang.String[] str_array49 = i18n19.getStrings(str_array47, "GMCt");
    java.lang.String[] str_array51 = i18n12.getStrings(str_array47, "friend");
    // The following exception was thrown during execution in test generation
    try {
    boolean b52 = commandFriends0.execute(commandSender9, command10, "friend", str_array51);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friends"+ "'", str7.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friends"+ "'", str8.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test025"); }

    gtlp.groundmc.lobby.registry.LobbyCommandRegistry.Companion companion0 = gtlp.groundmc.lobby.registry.LobbyCommandRegistry.Companion;
    gtlp.groundmc.lobby.commands.CommandLobby commandLobby1 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str2 = commandLobby1.getName();
    java.lang.String str3 = commandLobby1.getName();
    java.lang.String str4 = commandLobby1.getName();
    java.lang.String str5 = commandLobby1.getName();
    java.lang.String str6 = commandLobby1.getName();
    java.lang.String str7 = commandLobby1.getName();
    java.lang.String str8 = commandLobby1.getName();
    java.lang.String str9 = commandLobby1.getName();
    java.lang.String str10 = commandLobby1.getName();
    java.lang.String str11 = commandLobby1.getName();
    // The following exception was thrown during execution in test generation
    try {
    companion0.registerCommand((gtlp.groundmc.lobby.commands.ILobbyCommand)commandLobby1);
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(companion0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lobby"+ "'", str8.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "lobby"+ "'", str9.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "lobby"+ "'", str10.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "lobby"+ "'", str11.equals("lobby"));

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test026"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    org.bukkit.command.CommandSender commandSender1 = null;
    org.bukkit.command.Command command2 = null;
    gtlp.groundmc.lobby.util.I18n i18n4 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n4.getBundleCache$spigot_1_8();
    char char6 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    char char11 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n9.getBundleCache$spigot_1_8();
    char char13 = i18n9.getColorChar();
    char char14 = i18n9.getColorChar();
    char char15 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    char char18 = i18n16.getColorChar();
    char char19 = i18n16.getColorChar();
    char char20 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n21.getBundleCache$spigot_1_8();
    java.lang.String[] str_array23 = new java.lang.String[] {  };
    java.lang.String[] str_array25 = i18n21.getStrings(str_array23, "hi!");
    java.lang.String[] str_array27 = i18n16.getStrings(str_array25, "GMCrx");
    java.lang.String[] str_array29 = i18n9.getStrings(str_array25, "friends");
    java.lang.String[] str_array31 = i18n7.getStrings(str_array29, "vanish");
    java.lang.String[] str_array33 = i18n4.getStrings(str_array31, "GMCt");
    // The following exception was thrown during execution in test generation
    try {
    boolean b34 = commandLobby0.execute(commandSender1, command2, "lang.lobby", str_array33);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test027"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    char char4 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    char char7 = i18n5.getColorChar();
    char char8 = i18n5.getColorChar();
    char char9 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n10.getBundleCache$spigot_1_8();
    java.lang.String[] str_array12 = new java.lang.String[] {  };
    java.lang.String[] str_array14 = i18n10.getStrings(str_array12, "hi!");
    java.lang.String[] str_array16 = i18n5.getStrings(str_array14, "GMCrx");
    java.lang.String[] str_array18 = i18n0.getStrings(str_array14, "GMC");
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    char char21 = i18n19.getColorChar();
    char char22 = i18n19.getColorChar();
    char char23 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n24.getBundleCache$spigot_1_8();
    java.lang.String[] str_array26 = new java.lang.String[] {  };
    java.lang.String[] str_array28 = i18n24.getStrings(str_array26, "hi!");
    java.lang.String[] str_array30 = i18n19.getStrings(str_array28, "GMCrx");
    java.lang.String[] str_array32 = i18n0.getStrings(str_array28, "GMCz");
    char char33 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n35 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char36 = i18n35.getColorChar();
    char char37 = i18n35.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache38 = i18n35.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache39 = i18n35.getBundleCache$spigot_1_8();
    char char40 = i18n35.getColorChar();
    char char41 = i18n35.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n42 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char43 = i18n42.getColorChar();
    char char44 = i18n42.getColorChar();
    char char45 = i18n42.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache46 = i18n42.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n47 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char48 = i18n47.getColorChar();
    char char49 = i18n47.getColorChar();
    char char50 = i18n47.getColorChar();
    char char51 = i18n47.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n52 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache53 = i18n52.getBundleCache$spigot_1_8();
    java.lang.String[] str_array54 = new java.lang.String[] {  };
    java.lang.String[] str_array56 = i18n52.getStrings(str_array54, "hi!");
    java.lang.String[] str_array58 = i18n47.getStrings(str_array56, "GMCrx");
    java.lang.String[] str_array60 = i18n42.getStrings(str_array58, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n61 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache62 = i18n61.getBundleCache$spigot_1_8();
    java.lang.String[] str_array63 = new java.lang.String[] {  };
    java.lang.String[] str_array65 = i18n61.getStrings(str_array63, "hi!");
    java.lang.String[] str_array67 = i18n42.getStrings(str_array65, "groundmc.lobby.hide_players");
    java.lang.String[] str_array69 = i18n35.getStrings(str_array67, "lang.lobby");
    java.util.Locale locale70 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array71 = i18n0.getStrings(str_array69, locale70);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test028"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    org.bukkit.command.CommandSender commandSender1 = null;
    org.bukkit.command.Command command2 = null;
    gtlp.groundmc.lobby.util.I18n i18n4 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char5 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n4.getBundleCache$spigot_1_8();
    char char7 = i18n4.getColorChar();
    char char8 = i18n4.getColorChar();
    char char9 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n11.getBundleCache$spigot_1_8();
    char char14 = i18n11.getColorChar();
    char char15 = i18n11.getColorChar();
    char char16 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    char char21 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n19.getBundleCache$spigot_1_8();
    char char23 = i18n19.getColorChar();
    char char24 = i18n19.getColorChar();
    char char25 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    char char28 = i18n26.getColorChar();
    char char29 = i18n26.getColorChar();
    char char30 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n31.getBundleCache$spigot_1_8();
    java.lang.String[] str_array33 = new java.lang.String[] {  };
    java.lang.String[] str_array35 = i18n31.getStrings(str_array33, "hi!");
    java.lang.String[] str_array37 = i18n26.getStrings(str_array35, "GMCrx");
    java.lang.String[] str_array39 = i18n19.getStrings(str_array35, "friends");
    java.lang.String[] str_array41 = i18n11.getStrings(str_array39, "GMCt");
    java.lang.String[] str_array43 = i18n4.getStrings(str_array39, "friend");
    gtlp.groundmc.lobby.util.I18n i18n44 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char45 = i18n44.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache46 = i18n44.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache47 = i18n44.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache48 = i18n44.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache49 = i18n44.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n50 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char51 = i18n50.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache52 = i18n50.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache53 = i18n50.getBundleCache$spigot_1_8();
    char char54 = i18n50.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n55 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char56 = i18n55.getColorChar();
    char char57 = i18n55.getColorChar();
    char char58 = i18n55.getColorChar();
    char char59 = i18n55.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n60 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache61 = i18n60.getBundleCache$spigot_1_8();
    java.lang.String[] str_array62 = new java.lang.String[] {  };
    java.lang.String[] str_array64 = i18n60.getStrings(str_array62, "hi!");
    java.lang.String[] str_array66 = i18n55.getStrings(str_array64, "GMCrx");
    java.lang.String[] str_array68 = i18n50.getStrings(str_array64, "GMC");
    java.lang.String[] str_array70 = i18n44.getStrings(str_array64, "GMCw");
    java.lang.String[] str_array72 = i18n4.getStrings(str_array70, "groundmc.lobby.admin");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str73 = commandFriend0.getTabCompletion(commandSender1, command2, "groundmc.lobby.vanish", str_array70);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char56 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test029"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender7 = null;
    org.bukkit.command.Command command8 = null;
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    char char14 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n12.getBundleCache$spigot_1_8();
    char char16 = i18n12.getColorChar();
    char char17 = i18n12.getColorChar();
    char char18 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    char char21 = i18n19.getColorChar();
    char char22 = i18n19.getColorChar();
    char char23 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n24.getBundleCache$spigot_1_8();
    java.lang.String[] str_array26 = new java.lang.String[] {  };
    java.lang.String[] str_array28 = i18n24.getStrings(str_array26, "hi!");
    java.lang.String[] str_array30 = i18n19.getStrings(str_array28, "GMCrx");
    java.lang.String[] str_array32 = i18n12.getStrings(str_array28, "friends");
    java.lang.String[] str_array34 = i18n10.getStrings(str_array32, "vanish");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str35 = commandVanish0.getTabCompletion(commandSender7, command8, "coins", str_array34);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test030"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    org.bukkit.command.CommandSender commandSender1 = null;
    org.bukkit.command.Command command2 = null;
    gtlp.groundmc.lobby.util.I18n i18n4 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char5 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n10.getBundleCache$spigot_1_8();
    char char14 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    char char17 = i18n15.getColorChar();
    char char18 = i18n15.getColorChar();
    char char19 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n20.getBundleCache$spigot_1_8();
    java.lang.String[] str_array22 = new java.lang.String[] {  };
    java.lang.String[] str_array24 = i18n20.getStrings(str_array22, "hi!");
    java.lang.String[] str_array26 = i18n15.getStrings(str_array24, "GMCrx");
    java.lang.String[] str_array28 = i18n10.getStrings(str_array24, "GMC");
    java.lang.String[] str_array30 = i18n4.getStrings(str_array24, "GMCw");
    // The following exception was thrown during execution in test generation
    try {
    boolean b31 = commandFriends0.execute(commandSender1, command2, "hi!", str_array30);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test031"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender7 = null;
    org.bukkit.command.Command command8 = null;
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    char char12 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n10.getBundleCache$spigot_1_8();
    char char15 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n16.getBundleCache$spigot_1_8();
    char char20 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    char char25 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n23.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n23.getBundleCache$spigot_1_8();
    char char28 = i18n23.getColorChar();
    char char29 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char31 = i18n30.getColorChar();
    char char32 = i18n30.getColorChar();
    char char33 = i18n30.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n30.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n35 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char36 = i18n35.getColorChar();
    char char37 = i18n35.getColorChar();
    char char38 = i18n35.getColorChar();
    char char39 = i18n35.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache41 = i18n40.getBundleCache$spigot_1_8();
    java.lang.String[] str_array42 = new java.lang.String[] {  };
    java.lang.String[] str_array44 = i18n40.getStrings(str_array42, "hi!");
    java.lang.String[] str_array46 = i18n35.getStrings(str_array44, "GMCrx");
    java.lang.String[] str_array48 = i18n30.getStrings(str_array46, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n49 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache50 = i18n49.getBundleCache$spigot_1_8();
    java.lang.String[] str_array51 = new java.lang.String[] {  };
    java.lang.String[] str_array53 = i18n49.getStrings(str_array51, "hi!");
    java.lang.String[] str_array55 = i18n30.getStrings(str_array53, "groundmc.lobby.hide_players");
    java.lang.String[] str_array57 = i18n23.getStrings(str_array55, "lang.lobby");
    java.lang.String[] str_array59 = i18n16.getStrings(str_array57, "hi!");
    java.lang.String[] str_array61 = i18n10.getStrings(str_array59, "GMCw");
    // The following exception was thrown during execution in test generation
    try {
    boolean b62 = commandLobby0.execute(commandSender7, command8, "GMCrx", str_array59);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test032"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    java.lang.String str6 = commandFriends0.getName();
    java.lang.String str7 = commandFriends0.getName();
    java.lang.String str8 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender9 = null;
    org.bukkit.command.Command command10 = null;
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n12.getBundleCache$spigot_1_8();
    char char15 = i18n12.getColorChar();
    char char16 = i18n12.getColorChar();
    char char17 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n18.getBundleCache$spigot_1_8();
    java.lang.String[] str_array20 = new java.lang.String[] {  };
    java.lang.String[] str_array22 = i18n18.getStrings(str_array20, "hi!");
    java.lang.String[] str_array24 = i18n12.getStrings(str_array22, "GMCy");
    // The following exception was thrown during execution in test generation
    try {
    boolean b25 = commandFriends0.execute(commandSender9, command10, "GMCry", str_array22);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friends"+ "'", str7.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friends"+ "'", str8.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test033"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    org.bukkit.command.CommandSender commandSender1 = null;
    org.bukkit.command.Command command2 = null;
    gtlp.groundmc.lobby.util.I18n i18n4 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char5 = i18n4.getColorChar();
    char char6 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n8 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char9 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n8.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n8.getBundleCache$spigot_1_8();
    char char12 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    char char15 = i18n13.getColorChar();
    char char16 = i18n13.getColorChar();
    char char17 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n18.getBundleCache$spigot_1_8();
    java.lang.String[] str_array20 = new java.lang.String[] {  };
    java.lang.String[] str_array22 = i18n18.getStrings(str_array20, "hi!");
    java.lang.String[] str_array24 = i18n13.getStrings(str_array22, "GMCrx");
    java.lang.String[] str_array26 = i18n8.getStrings(str_array22, "GMC");
    java.lang.String[] str_array28 = i18n4.getStrings(str_array22, "GMCx");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str29 = commandLobby0.getTabCompletion(commandSender1, command2, "groundmc.lobby.silent", str_array22);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test034"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender5 = null;
    org.bukkit.command.Command command6 = null;
    gtlp.groundmc.lobby.util.I18n i18n8 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n8.getBundleCache$spigot_1_8();
    char char10 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    char char15 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n13.getBundleCache$spigot_1_8();
    char char17 = i18n13.getColorChar();
    char char18 = i18n13.getColorChar();
    char char19 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    char char22 = i18n20.getColorChar();
    char char23 = i18n20.getColorChar();
    char char24 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n25.getBundleCache$spigot_1_8();
    java.lang.String[] str_array27 = new java.lang.String[] {  };
    java.lang.String[] str_array29 = i18n25.getStrings(str_array27, "hi!");
    java.lang.String[] str_array31 = i18n20.getStrings(str_array29, "GMCrx");
    java.lang.String[] str_array33 = i18n13.getStrings(str_array29, "friends");
    java.lang.String[] str_array35 = i18n11.getStrings(str_array33, "vanish");
    java.lang.String[] str_array37 = i18n8.getStrings(str_array35, "GMCt");
    // The following exception was thrown during execution in test generation
    try {
    boolean b38 = commandCoins0.execute(commandSender5, command6, "groundmc.lobby.vanish", str_array37);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test035"); }

    int i1 = gtlp.groundmc.lobby.util.ExtensionsKt.getMegabytes(53248);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test036"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    java.lang.String str9 = commandCoins0.getName();
    java.lang.String str10 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender11 = null;
    org.bukkit.command.Command command12 = null;
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    char char16 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n14.getBundleCache$spigot_1_8();
    char char18 = i18n14.getColorChar();
    char char19 = i18n14.getColorChar();
    char char20 = i18n14.getColorChar();
    char char21 = i18n14.getColorChar();
    char char22 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    char char25 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n23.getBundleCache$spigot_1_8();
    char char27 = i18n23.getColorChar();
    char char28 = i18n23.getColorChar();
    char char29 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char31 = i18n30.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n30.getBundleCache$spigot_1_8();
    char char33 = i18n30.getColorChar();
    char char34 = i18n30.getColorChar();
    char char35 = i18n30.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n30.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n30.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n38 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char39 = i18n38.getColorChar();
    char char40 = i18n38.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache41 = i18n38.getBundleCache$spigot_1_8();
    char char42 = i18n38.getColorChar();
    char char43 = i18n38.getColorChar();
    char char44 = i18n38.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char46 = i18n45.getColorChar();
    char char47 = i18n45.getColorChar();
    char char48 = i18n45.getColorChar();
    char char49 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n50 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n50.getBundleCache$spigot_1_8();
    java.lang.String[] str_array52 = new java.lang.String[] {  };
    java.lang.String[] str_array54 = i18n50.getStrings(str_array52, "hi!");
    java.lang.String[] str_array56 = i18n45.getStrings(str_array54, "GMCrx");
    java.lang.String[] str_array58 = i18n38.getStrings(str_array54, "friends");
    java.lang.String[] str_array60 = i18n30.getStrings(str_array58, "GMCt");
    java.lang.String[] str_array62 = i18n23.getStrings(str_array58, "groundmc.lobby.admin");
    java.lang.String[] str_array64 = i18n14.getStrings(str_array62, "coins");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str65 = commandCoins0.getTabCompletion(commandSender11, command12, "GMCy", str_array64);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "coins"+ "'", str10.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test037"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender2 = null;
    org.bukkit.command.Command command3 = null;
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    char char7 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n5.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n9.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n9.getBundleCache$spigot_1_8();
    char char13 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    char char16 = i18n14.getColorChar();
    char char17 = i18n14.getColorChar();
    char char18 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n19.getBundleCache$spigot_1_8();
    java.lang.String[] str_array21 = new java.lang.String[] {  };
    java.lang.String[] str_array23 = i18n19.getStrings(str_array21, "hi!");
    java.lang.String[] str_array25 = i18n14.getStrings(str_array23, "GMCrx");
    java.lang.String[] str_array27 = i18n9.getStrings(str_array23, "GMC");
    java.lang.String[] str_array29 = i18n5.getStrings(str_array23, "GMCx");
    // The following exception was thrown during execution in test generation
    try {
    boolean b30 = commandLobby0.execute(commandSender2, command3, "groundmc.lobby.silent", str_array29);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test038"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    java.lang.String str8 = commandVanish0.getName();
    java.lang.String str9 = commandVanish0.getName();
    java.lang.String str10 = commandVanish0.getName();
    java.lang.String str11 = commandVanish0.getName();
    java.lang.String str12 = commandVanish0.getName();
    java.lang.String str13 = commandVanish0.getName();
    java.lang.String str14 = commandVanish0.getName();
    java.util.Locale locale15 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array16 = commandVanish0.getCommandHelp(locale15);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "vanish"+ "'", str9.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "vanish"+ "'", str10.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "vanish"+ "'", str11.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "vanish"+ "'", str12.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "vanish"+ "'", str13.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "vanish"+ "'", str14.equals("vanish"));

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test039"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    org.bukkit.command.CommandSender commandSender1 = null;
    org.bukkit.command.Command command2 = null;
    gtlp.groundmc.lobby.util.I18n i18n4 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char5 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n4.getBundleCache$spigot_1_8();
    char char7 = i18n4.getColorChar();
    char char8 = i18n4.getColorChar();
    char char9 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n11.getBundleCache$spigot_1_8();
    char char14 = i18n11.getColorChar();
    char char15 = i18n11.getColorChar();
    char char16 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    char char21 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n19.getBundleCache$spigot_1_8();
    char char23 = i18n19.getColorChar();
    char char24 = i18n19.getColorChar();
    char char25 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    char char28 = i18n26.getColorChar();
    char char29 = i18n26.getColorChar();
    char char30 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n31.getBundleCache$spigot_1_8();
    java.lang.String[] str_array33 = new java.lang.String[] {  };
    java.lang.String[] str_array35 = i18n31.getStrings(str_array33, "hi!");
    java.lang.String[] str_array37 = i18n26.getStrings(str_array35, "GMCrx");
    java.lang.String[] str_array39 = i18n19.getStrings(str_array35, "friends");
    java.lang.String[] str_array41 = i18n11.getStrings(str_array39, "GMCt");
    java.lang.String[] str_array43 = i18n4.getStrings(str_array39, "friend");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str44 = commandFriends0.getTabCompletion(commandSender1, command2, "GMCy", str_array43);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test040"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    char char3 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    char char6 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n9.getBundleCache$spigot_1_8();
    char char11 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    char char16 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n14.getBundleCache$spigot_1_8();
    char char18 = i18n14.getColorChar();
    char char19 = i18n14.getColorChar();
    char char20 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char22 = i18n21.getColorChar();
    char char23 = i18n21.getColorChar();
    char char24 = i18n21.getColorChar();
    char char25 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n26.getBundleCache$spigot_1_8();
    java.lang.String[] str_array28 = new java.lang.String[] {  };
    java.lang.String[] str_array30 = i18n26.getStrings(str_array28, "hi!");
    java.lang.String[] str_array32 = i18n21.getStrings(str_array30, "GMCrx");
    java.lang.String[] str_array34 = i18n14.getStrings(str_array30, "friends");
    java.lang.String[] str_array36 = i18n12.getStrings(str_array34, "vanish");
    java.lang.String[] str_array38 = i18n9.getStrings(str_array36, "GMCt");
    java.util.Locale locale39 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array40 = i18n0.getStrings(str_array36, locale39);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test041"); }

    org.joda.time.DateTime dateTime2 = null;
    // The following exception was thrown during execution in test generation
    try {
    gtlp.groundmc.lobby.Relationship relationship3 = new gtlp.groundmc.lobby.Relationship("GMChide", "GMCrx", dateTime2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test042"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n4 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char5 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n4.getBundleCache$spigot_1_8();
    char char8 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    char char11 = i18n9.getColorChar();
    char char12 = i18n9.getColorChar();
    char char13 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n14.getBundleCache$spigot_1_8();
    java.lang.String[] str_array16 = new java.lang.String[] {  };
    java.lang.String[] str_array18 = i18n14.getStrings(str_array16, "hi!");
    java.lang.String[] str_array20 = i18n9.getStrings(str_array18, "GMCrx");
    java.lang.String[] str_array22 = i18n4.getStrings(str_array18, "GMC");
    java.lang.String[] str_array24 = i18n0.getStrings(str_array18, "GMCx");
    java.lang.String[] str_array30 = new java.lang.String[] { "friend", "hi!", "groundmc.lobby.vanish", "GMCx", "GMChide" };
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array32 = i18n0.getStrings(str_array30, "groundmc.lobby.vanish");
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test043"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    java.lang.String str9 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender10 = null;
    org.bukkit.command.Command command11 = null;
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n13.getBundleCache$spigot_1_8();
    char char16 = i18n13.getColorChar();
    char char17 = i18n13.getColorChar();
    char char18 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n20.getBundleCache$spigot_1_8();
    char char23 = i18n20.getColorChar();
    char char24 = i18n20.getColorChar();
    char char25 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char29 = i18n28.getColorChar();
    char char30 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n28.getBundleCache$spigot_1_8();
    char char32 = i18n28.getColorChar();
    char char33 = i18n28.getColorChar();
    char char34 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n35 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char36 = i18n35.getColorChar();
    char char37 = i18n35.getColorChar();
    char char38 = i18n35.getColorChar();
    char char39 = i18n35.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache41 = i18n40.getBundleCache$spigot_1_8();
    java.lang.String[] str_array42 = new java.lang.String[] {  };
    java.lang.String[] str_array44 = i18n40.getStrings(str_array42, "hi!");
    java.lang.String[] str_array46 = i18n35.getStrings(str_array44, "GMCrx");
    java.lang.String[] str_array48 = i18n28.getStrings(str_array44, "friends");
    java.lang.String[] str_array50 = i18n20.getStrings(str_array48, "GMCt");
    java.lang.String[] str_array52 = i18n13.getStrings(str_array48, "friend");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str53 = commandCoins0.getTabCompletion(commandSender10, command11, "groundmc.lobby.silent", str_array48);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test044"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    org.bukkit.command.CommandSender commandSender1 = null;
    org.bukkit.command.Command command2 = null;
    gtlp.groundmc.lobby.util.I18n i18n4 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n4.getBundleCache$spigot_1_8();
    char char6 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    char char11 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n9.getBundleCache$spigot_1_8();
    char char13 = i18n9.getColorChar();
    char char14 = i18n9.getColorChar();
    char char15 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    char char18 = i18n16.getColorChar();
    char char19 = i18n16.getColorChar();
    char char20 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n21.getBundleCache$spigot_1_8();
    java.lang.String[] str_array23 = new java.lang.String[] {  };
    java.lang.String[] str_array25 = i18n21.getStrings(str_array23, "hi!");
    java.lang.String[] str_array27 = i18n16.getStrings(str_array25, "GMCrx");
    java.lang.String[] str_array29 = i18n9.getStrings(str_array25, "friends");
    java.lang.String[] str_array31 = i18n7.getStrings(str_array29, "vanish");
    java.lang.String[] str_array33 = i18n4.getStrings(str_array31, "GMCt");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str34 = commandFriend0.getTabCompletion(commandSender1, command2, "", str_array33);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test045"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    char char5 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n0.getBundleCache$spigot_1_8();
    char char7 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n9.getBundleCache$spigot_1_8();
    char char12 = i18n9.getColorChar();
    char char13 = i18n9.getColorChar();
    char char14 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n9.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n9.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    char char19 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n17.getBundleCache$spigot_1_8();
    char char21 = i18n17.getColorChar();
    char char22 = i18n17.getColorChar();
    char char23 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    char char26 = i18n24.getColorChar();
    char char27 = i18n24.getColorChar();
    char char28 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n29.getBundleCache$spigot_1_8();
    java.lang.String[] str_array31 = new java.lang.String[] {  };
    java.lang.String[] str_array33 = i18n29.getStrings(str_array31, "hi!");
    java.lang.String[] str_array35 = i18n24.getStrings(str_array33, "GMCrx");
    java.lang.String[] str_array37 = i18n17.getStrings(str_array33, "friends");
    java.lang.String[] str_array39 = i18n9.getStrings(str_array37, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char41 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n40.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache43 = i18n40.getBundleCache$spigot_1_8();
    char char44 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char46 = i18n45.getColorChar();
    char char47 = i18n45.getColorChar();
    char char48 = i18n45.getColorChar();
    char char49 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n50 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n50.getBundleCache$spigot_1_8();
    java.lang.String[] str_array52 = new java.lang.String[] {  };
    java.lang.String[] str_array54 = i18n50.getStrings(str_array52, "hi!");
    java.lang.String[] str_array56 = i18n45.getStrings(str_array54, "GMCrx");
    java.lang.String[] str_array58 = i18n40.getStrings(str_array54, "GMC");
    java.lang.String[] str_array60 = i18n9.getStrings(str_array58, "groundmc.lobby.vanish");
    java.util.Locale locale61 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array62 = i18n0.getStrings(str_array58, locale61);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test046"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    java.lang.String str6 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender7 = null;
    org.bukkit.command.Command command8 = null;
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    char char16 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n14.getBundleCache$spigot_1_8();
    char char18 = i18n14.getColorChar();
    char char19 = i18n14.getColorChar();
    char char20 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char22 = i18n21.getColorChar();
    char char23 = i18n21.getColorChar();
    char char24 = i18n21.getColorChar();
    char char25 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n26.getBundleCache$spigot_1_8();
    java.lang.String[] str_array28 = new java.lang.String[] {  };
    java.lang.String[] str_array30 = i18n26.getStrings(str_array28, "hi!");
    java.lang.String[] str_array32 = i18n21.getStrings(str_array30, "GMCrx");
    java.lang.String[] str_array34 = i18n14.getStrings(str_array30, "friends");
    java.lang.String[] str_array36 = i18n12.getStrings(str_array34, "vanish");
    java.lang.String[] str_array38 = i18n10.getStrings(str_array34, "GMCx");
    // The following exception was thrown during execution in test generation
    try {
    boolean b39 = commandFriends0.execute(commandSender7, command8, "GMCsilent", str_array34);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test047"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    java.lang.String str8 = commandLobby0.getName();
    java.lang.String str9 = commandLobby0.getName();
    java.lang.String str10 = commandLobby0.getName();
    java.lang.String str11 = commandLobby0.getName();
    java.lang.String str12 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender13 = null;
    org.bukkit.command.Command command14 = null;
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    char char18 = i18n16.getColorChar();
    char char19 = i18n16.getColorChar();
    char char20 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n21.getBundleCache$spigot_1_8();
    java.lang.String[] str_array23 = new java.lang.String[] {  };
    java.lang.String[] str_array25 = i18n21.getStrings(str_array23, "hi!");
    java.lang.String[] str_array27 = i18n16.getStrings(str_array25, "GMCrx");
    // The following exception was thrown during execution in test generation
    try {
    boolean b28 = commandLobby0.execute(commandSender13, command14, "", str_array25);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lobby"+ "'", str8.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "lobby"+ "'", str9.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "lobby"+ "'", str10.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "lobby"+ "'", str11.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "lobby"+ "'", str12.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test048"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender6 = null;
    org.bukkit.command.Command command7 = null;
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    char char11 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n9.getBundleCache$spigot_1_8();
    char char13 = i18n9.getColorChar();
    char char14 = i18n9.getColorChar();
    char char15 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    char char18 = i18n16.getColorChar();
    char char19 = i18n16.getColorChar();
    char char20 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n21.getBundleCache$spigot_1_8();
    java.lang.String[] str_array23 = new java.lang.String[] {  };
    java.lang.String[] str_array25 = i18n21.getStrings(str_array23, "hi!");
    java.lang.String[] str_array27 = i18n16.getStrings(str_array25, "GMCrx");
    java.lang.String[] str_array29 = i18n9.getStrings(str_array25, "friends");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str30 = commandVanish0.getTabCompletion(commandSender6, command7, "GMCy", str_array25);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test049"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    char char5 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char7 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n6.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n6.getBundleCache$spigot_1_8();
    char char10 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n6.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n6.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    char char15 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n13.getBundleCache$spigot_1_8();
    char char18 = i18n13.getColorChar();
    char char19 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    char char22 = i18n20.getColorChar();
    char char23 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    char char27 = i18n25.getColorChar();
    char char28 = i18n25.getColorChar();
    char char29 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n30.getBundleCache$spigot_1_8();
    java.lang.String[] str_array32 = new java.lang.String[] {  };
    java.lang.String[] str_array34 = i18n30.getStrings(str_array32, "hi!");
    java.lang.String[] str_array36 = i18n25.getStrings(str_array34, "GMCrx");
    java.lang.String[] str_array38 = i18n20.getStrings(str_array36, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n39 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache40 = i18n39.getBundleCache$spigot_1_8();
    java.lang.String[] str_array41 = new java.lang.String[] {  };
    java.lang.String[] str_array43 = i18n39.getStrings(str_array41, "hi!");
    java.lang.String[] str_array45 = i18n20.getStrings(str_array43, "groundmc.lobby.hide_players");
    java.lang.String[] str_array47 = i18n13.getStrings(str_array45, "lang.lobby");
    java.lang.String[] str_array49 = i18n6.getStrings(str_array47, "hi!");
    java.lang.String[] str_array51 = i18n0.getStrings(str_array49, "GMCw");
    char char52 = i18n0.getColorChar();
    java.util.Locale locale54 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str55 = i18n0.getString("GMCry", locale54);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test050"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender2 = null;
    org.bukkit.command.Command command3 = null;
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n5.getBundleCache$spigot_1_8();
    char char7 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n8 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n8.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    char char12 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n10.getBundleCache$spigot_1_8();
    char char14 = i18n10.getColorChar();
    char char15 = i18n10.getColorChar();
    char char16 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    char char19 = i18n17.getColorChar();
    char char20 = i18n17.getColorChar();
    char char21 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n22.getBundleCache$spigot_1_8();
    java.lang.String[] str_array24 = new java.lang.String[] {  };
    java.lang.String[] str_array26 = i18n22.getStrings(str_array24, "hi!");
    java.lang.String[] str_array28 = i18n17.getStrings(str_array26, "GMCrx");
    java.lang.String[] str_array30 = i18n10.getStrings(str_array26, "friends");
    java.lang.String[] str_array32 = i18n8.getStrings(str_array30, "vanish");
    java.lang.String[] str_array34 = i18n5.getStrings(str_array32, "GMCt");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str35 = commandVanish0.getTabCompletion(commandSender2, command3, "GMCw", str_array34);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test051"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender5 = null;
    org.bukkit.command.Command command6 = null;
    gtlp.groundmc.lobby.util.I18n i18n8 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char9 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n8.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n8.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n8.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n8.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n8.getBundleCache$spigot_1_8();
    char char15 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n16.getBundleCache$spigot_1_8();
    char char18 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n19.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char22 = i18n21.getColorChar();
    char char23 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n21.getBundleCache$spigot_1_8();
    char char25 = i18n21.getColorChar();
    char char26 = i18n21.getColorChar();
    char char27 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char29 = i18n28.getColorChar();
    char char30 = i18n28.getColorChar();
    char char31 = i18n28.getColorChar();
    char char32 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n33.getBundleCache$spigot_1_8();
    java.lang.String[] str_array35 = new java.lang.String[] {  };
    java.lang.String[] str_array37 = i18n33.getStrings(str_array35, "hi!");
    java.lang.String[] str_array39 = i18n28.getStrings(str_array37, "GMCrx");
    java.lang.String[] str_array41 = i18n21.getStrings(str_array37, "friends");
    java.lang.String[] str_array43 = i18n19.getStrings(str_array41, "vanish");
    java.lang.String[] str_array45 = i18n16.getStrings(str_array43, "GMCt");
    java.lang.String[] str_array47 = i18n8.getStrings(str_array43, "GMCz");
    gtlp.groundmc.lobby.util.I18n i18n48 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char49 = i18n48.getColorChar();
    char char50 = i18n48.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n48.getBundleCache$spigot_1_8();
    char char52 = i18n48.getColorChar();
    char char53 = i18n48.getColorChar();
    char char54 = i18n48.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n55 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char56 = i18n55.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache57 = i18n55.getBundleCache$spigot_1_8();
    char char58 = i18n55.getColorChar();
    char char59 = i18n55.getColorChar();
    char char60 = i18n55.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache61 = i18n55.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache62 = i18n55.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n63 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char64 = i18n63.getColorChar();
    char char65 = i18n63.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache66 = i18n63.getBundleCache$spigot_1_8();
    char char67 = i18n63.getColorChar();
    char char68 = i18n63.getColorChar();
    char char69 = i18n63.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n70 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char71 = i18n70.getColorChar();
    char char72 = i18n70.getColorChar();
    char char73 = i18n70.getColorChar();
    char char74 = i18n70.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n75 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache76 = i18n75.getBundleCache$spigot_1_8();
    java.lang.String[] str_array77 = new java.lang.String[] {  };
    java.lang.String[] str_array79 = i18n75.getStrings(str_array77, "hi!");
    java.lang.String[] str_array81 = i18n70.getStrings(str_array79, "GMCrx");
    java.lang.String[] str_array83 = i18n63.getStrings(str_array79, "friends");
    java.lang.String[] str_array85 = i18n55.getStrings(str_array83, "GMCt");
    java.lang.String[] str_array87 = i18n48.getStrings(str_array83, "groundmc.lobby.admin");
    java.lang.String[] str_array89 = i18n8.getStrings(str_array83, "GMCrx");
    // The following exception was thrown during execution in test generation
    try {
    boolean b90 = commandFriends0.execute(commandSender5, command6, "GMChide", str_array83);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char56 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char67 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char69 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char71 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char72 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char73 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char74 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array89);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test052"); }

    gtlp.groundmc.lobby.registry.LobbyCommandRegistry.Companion companion0 = gtlp.groundmc.lobby.registry.LobbyCommandRegistry.Companion;
    gtlp.groundmc.lobby.commands.CommandVanish commandVanish1 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str2 = commandVanish1.getName();
    java.lang.String str3 = commandVanish1.getName();
    java.lang.String str4 = commandVanish1.getName();
    java.lang.String str5 = commandVanish1.getName();
    java.lang.String str6 = commandVanish1.getName();
    java.lang.String str7 = commandVanish1.getName();
    java.lang.String str8 = commandVanish1.getName();
    // The following exception was thrown during execution in test generation
    try {
    companion0.registerCommand((gtlp.groundmc.lobby.commands.ILobbyCommand)commandVanish1);
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(companion0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test053"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender5 = null;
    org.bukkit.command.Command command6 = null;
    gtlp.groundmc.lobby.util.I18n i18n8 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char9 = i18n8.getColorChar();
    char char10 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n8.getBundleCache$spigot_1_8();
    char char12 = i18n8.getColorChar();
    char char13 = i18n8.getColorChar();
    char char14 = i18n8.getColorChar();
    char char15 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    char char18 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n16.getBundleCache$spigot_1_8();
    char char20 = i18n16.getColorChar();
    char char21 = i18n16.getColorChar();
    char char22 = i18n16.getColorChar();
    char char23 = i18n16.getColorChar();
    char char24 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    char char27 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n25.getBundleCache$spigot_1_8();
    char char29 = i18n25.getColorChar();
    char char30 = i18n25.getColorChar();
    char char31 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char33 = i18n32.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n32.getBundleCache$spigot_1_8();
    char char35 = i18n32.getColorChar();
    char char36 = i18n32.getColorChar();
    char char37 = i18n32.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache38 = i18n32.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache39 = i18n32.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char41 = i18n40.getColorChar();
    char char42 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache43 = i18n40.getBundleCache$spigot_1_8();
    char char44 = i18n40.getColorChar();
    char char45 = i18n40.getColorChar();
    char char46 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n47 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char48 = i18n47.getColorChar();
    char char49 = i18n47.getColorChar();
    char char50 = i18n47.getColorChar();
    char char51 = i18n47.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n52 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache53 = i18n52.getBundleCache$spigot_1_8();
    java.lang.String[] str_array54 = new java.lang.String[] {  };
    java.lang.String[] str_array56 = i18n52.getStrings(str_array54, "hi!");
    java.lang.String[] str_array58 = i18n47.getStrings(str_array56, "GMCrx");
    java.lang.String[] str_array60 = i18n40.getStrings(str_array56, "friends");
    java.lang.String[] str_array62 = i18n32.getStrings(str_array60, "GMCt");
    java.lang.String[] str_array64 = i18n25.getStrings(str_array60, "groundmc.lobby.admin");
    java.lang.String[] str_array66 = i18n16.getStrings(str_array64, "coins");
    java.lang.String[] str_array68 = i18n8.getStrings(str_array66, "groundmc.lobby.vanish");
    // The following exception was thrown during execution in test generation
    try {
    boolean b69 = commandFriends0.execute(commandSender5, command6, "coins", str_array66);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test054"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    java.lang.String str6 = commandFriends0.getName();
    java.lang.String str7 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender8 = null;
    org.bukkit.command.Command command9 = null;
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    char char13 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n15.getBundleCache$spigot_1_8();
    char char19 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    char char22 = i18n20.getColorChar();
    char char23 = i18n20.getColorChar();
    char char24 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n25.getBundleCache$spigot_1_8();
    java.lang.String[] str_array27 = new java.lang.String[] {  };
    java.lang.String[] str_array29 = i18n25.getStrings(str_array27, "hi!");
    java.lang.String[] str_array31 = i18n20.getStrings(str_array29, "GMCrx");
    java.lang.String[] str_array33 = i18n15.getStrings(str_array29, "GMC");
    java.lang.String[] str_array35 = i18n11.getStrings(str_array29, "GMCx");
    // The following exception was thrown during execution in test generation
    try {
    boolean b36 = commandFriends0.execute(commandSender8, command9, "groundmc.lobby.hide_players", str_array29);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friends"+ "'", str7.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test055"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    char char3 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    char char5 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char7 = i18n6.getColorChar();
    char char8 = i18n6.getColorChar();
    char char9 = i18n6.getColorChar();
    char char10 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n11.getBundleCache$spigot_1_8();
    java.lang.String[] str_array13 = new java.lang.String[] {  };
    java.lang.String[] str_array15 = i18n11.getStrings(str_array13, "hi!");
    java.lang.String[] str_array17 = i18n6.getStrings(str_array15, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n18.getBundleCache$spigot_1_8();
    char char22 = i18n18.getColorChar();
    char char23 = i18n18.getColorChar();
    char char24 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    char char27 = i18n25.getColorChar();
    char char28 = i18n25.getColorChar();
    char char29 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n30.getBundleCache$spigot_1_8();
    java.lang.String[] str_array32 = new java.lang.String[] {  };
    java.lang.String[] str_array34 = i18n30.getStrings(str_array32, "hi!");
    java.lang.String[] str_array36 = i18n25.getStrings(str_array34, "GMCrx");
    java.lang.String[] str_array38 = i18n18.getStrings(str_array34, "friends");
    java.lang.String[] str_array40 = i18n6.getStrings(str_array38, "");
    java.lang.String[] str_array42 = i18n0.getStrings(str_array38, "GMCw");
    char char43 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n44 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char45 = i18n44.getColorChar();
    char char46 = i18n44.getColorChar();
    char char47 = i18n44.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache48 = i18n44.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n49 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char50 = i18n49.getColorChar();
    char char51 = i18n49.getColorChar();
    char char52 = i18n49.getColorChar();
    char char53 = i18n49.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n54 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache55 = i18n54.getBundleCache$spigot_1_8();
    java.lang.String[] str_array56 = new java.lang.String[] {  };
    java.lang.String[] str_array58 = i18n54.getStrings(str_array56, "hi!");
    java.lang.String[] str_array60 = i18n49.getStrings(str_array58, "GMCrx");
    java.lang.String[] str_array62 = i18n44.getStrings(str_array60, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n63 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache64 = i18n63.getBundleCache$spigot_1_8();
    java.lang.String[] str_array65 = new java.lang.String[] {  };
    java.lang.String[] str_array67 = i18n63.getStrings(str_array65, "hi!");
    java.lang.String[] str_array69 = i18n44.getStrings(str_array67, "groundmc.lobby.hide_players");
    java.util.Locale locale70 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array71 = i18n0.getStrings(str_array69, locale70);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test056"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender6 = null;
    org.bukkit.command.Command command7 = null;
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    char char11 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n9.getBundleCache$spigot_1_8();
    char char13 = i18n9.getColorChar();
    char char14 = i18n9.getColorChar();
    char char15 = i18n9.getColorChar();
    char char16 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    char char19 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n17.getBundleCache$spigot_1_8();
    char char21 = i18n17.getColorChar();
    char char22 = i18n17.getColorChar();
    char char23 = i18n17.getColorChar();
    char char24 = i18n17.getColorChar();
    char char25 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    char char28 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n26.getBundleCache$spigot_1_8();
    char char30 = i18n26.getColorChar();
    char char31 = i18n26.getColorChar();
    char char32 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char34 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n33.getBundleCache$spigot_1_8();
    char char36 = i18n33.getColorChar();
    char char37 = i18n33.getColorChar();
    char char38 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache39 = i18n33.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache40 = i18n33.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n41 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char42 = i18n41.getColorChar();
    char char43 = i18n41.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache44 = i18n41.getBundleCache$spigot_1_8();
    char char45 = i18n41.getColorChar();
    char char46 = i18n41.getColorChar();
    char char47 = i18n41.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n48 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char49 = i18n48.getColorChar();
    char char50 = i18n48.getColorChar();
    char char51 = i18n48.getColorChar();
    char char52 = i18n48.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n53 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache54 = i18n53.getBundleCache$spigot_1_8();
    java.lang.String[] str_array55 = new java.lang.String[] {  };
    java.lang.String[] str_array57 = i18n53.getStrings(str_array55, "hi!");
    java.lang.String[] str_array59 = i18n48.getStrings(str_array57, "GMCrx");
    java.lang.String[] str_array61 = i18n41.getStrings(str_array57, "friends");
    java.lang.String[] str_array63 = i18n33.getStrings(str_array61, "GMCt");
    java.lang.String[] str_array65 = i18n26.getStrings(str_array61, "groundmc.lobby.admin");
    java.lang.String[] str_array67 = i18n17.getStrings(str_array65, "coins");
    java.lang.String[] str_array69 = i18n9.getStrings(str_array67, "groundmc.lobby.vanish");
    // The following exception was thrown during execution in test generation
    try {
    boolean b70 = commandVanish0.execute(commandSender6, command7, "friends", str_array69);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test057"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender6 = null;
    org.bukkit.command.Command command7 = null;
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    char char11 = i18n9.getColorChar();
    char char12 = i18n9.getColorChar();
    char char13 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n14.getBundleCache$spigot_1_8();
    java.lang.String[] str_array16 = new java.lang.String[] {  };
    java.lang.String[] str_array18 = i18n14.getStrings(str_array16, "hi!");
    java.lang.String[] str_array20 = i18n9.getStrings(str_array18, "GMCrx");
    // The following exception was thrown during execution in test generation
    try {
    boolean b21 = commandLobby0.execute(commandSender6, command7, "coins", str_array20);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test058"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender2 = null;
    org.bukkit.command.Command command3 = null;
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n5.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n5.getBundleCache$spigot_1_8();
    char char9 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    char char12 = i18n10.getColorChar();
    char char13 = i18n10.getColorChar();
    char char14 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n15.getBundleCache$spigot_1_8();
    java.lang.String[] str_array17 = new java.lang.String[] {  };
    java.lang.String[] str_array19 = i18n15.getStrings(str_array17, "hi!");
    java.lang.String[] str_array21 = i18n10.getStrings(str_array19, "GMCrx");
    java.lang.String[] str_array23 = i18n5.getStrings(str_array19, "GMC");
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    char char26 = i18n24.getColorChar();
    char char27 = i18n24.getColorChar();
    char char28 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n29.getBundleCache$spigot_1_8();
    java.lang.String[] str_array31 = new java.lang.String[] {  };
    java.lang.String[] str_array33 = i18n29.getStrings(str_array31, "hi!");
    java.lang.String[] str_array35 = i18n24.getStrings(str_array33, "GMCrx");
    java.lang.String[] str_array37 = i18n5.getStrings(str_array33, "GMCz");
    // The following exception was thrown during execution in test generation
    try {
    boolean b38 = commandFriends0.execute(commandSender2, command3, "coins", str_array37);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test059"); }

    gtlp.groundmc.lobby.registry.LobbyCommandRegistry.Companion companion0 = gtlp.groundmc.lobby.registry.LobbyCommandRegistry.Companion;
    gtlp.groundmc.lobby.commands.CommandLobby commandLobby1 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str2 = commandLobby1.getName();
    java.lang.String str3 = commandLobby1.getName();
    java.lang.String str4 = commandLobby1.getName();
    java.lang.String str5 = commandLobby1.getName();
    java.lang.String str6 = commandLobby1.getName();
    java.lang.String str7 = commandLobby1.getName();
    java.lang.String str8 = commandLobby1.getName();
    java.lang.String str9 = commandLobby1.getName();
    java.lang.String str10 = commandLobby1.getName();
    java.lang.String str11 = commandLobby1.getName();
    java.lang.String str12 = commandLobby1.getName();
    java.lang.String str13 = commandLobby1.getName();
    // The following exception was thrown during execution in test generation
    try {
    companion0.registerCommand((gtlp.groundmc.lobby.commands.ILobbyCommand)commandLobby1);
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(companion0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lobby"+ "'", str8.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "lobby"+ "'", str9.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "lobby"+ "'", str10.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "lobby"+ "'", str11.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "lobby"+ "'", str12.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "lobby"+ "'", str13.equals("lobby"));

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test060"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    org.bukkit.command.CommandSender commandSender1 = null;
    org.bukkit.command.Command command2 = null;
    gtlp.groundmc.lobby.util.I18n i18n4 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char5 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n4.getBundleCache$spigot_1_8();
    char char7 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n8 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char9 = i18n8.getColorChar();
    char char10 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n8.getBundleCache$spigot_1_8();
    char char12 = i18n8.getColorChar();
    char char13 = i18n8.getColorChar();
    char char14 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    char char17 = i18n15.getColorChar();
    char char18 = i18n15.getColorChar();
    char char19 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n20.getBundleCache$spigot_1_8();
    java.lang.String[] str_array22 = new java.lang.String[] {  };
    java.lang.String[] str_array24 = i18n20.getStrings(str_array22, "hi!");
    java.lang.String[] str_array26 = i18n15.getStrings(str_array24, "GMCrx");
    java.lang.String[] str_array28 = i18n8.getStrings(str_array24, "friends");
    java.lang.String[] str_array30 = i18n4.getStrings(str_array28, "GMCsilent");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str31 = commandFriends0.getTabCompletion(commandSender1, command2, "", str_array28);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test061"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = i18n0.getBundleCache$spigot_1_8();
    java.lang.String[] str_array2 = new java.lang.String[] {  };
    java.lang.String[] str_array4 = i18n0.getStrings(str_array2, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    java.util.Locale locale7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = resourceBundleCache5.get("friend", locale7);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test062"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char7 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n6.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n6.getBundleCache$spigot_1_8();
    char char10 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    char char13 = i18n11.getColorChar();
    char char14 = i18n11.getColorChar();
    char char15 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n16.getBundleCache$spigot_1_8();
    java.lang.String[] str_array18 = new java.lang.String[] {  };
    java.lang.String[] str_array20 = i18n16.getStrings(str_array18, "hi!");
    java.lang.String[] str_array22 = i18n11.getStrings(str_array20, "GMCrx");
    java.lang.String[] str_array24 = i18n6.getStrings(str_array20, "GMC");
    java.lang.String[] str_array26 = i18n0.getStrings(str_array20, "GMCw");
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str29 = i18n0.getString("GMCz", "");
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test063"); }

    org.joda.time.DateTime dateTime2 = null;
    // The following exception was thrown during execution in test generation
    try {
    gtlp.groundmc.lobby.Relationship relationship3 = new gtlp.groundmc.lobby.Relationship("GMCy", "", dateTime2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test064"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender8 = null;
    org.bukkit.command.Command command9 = null;
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n11.getBundleCache$spigot_1_8();
    char char14 = i18n11.getColorChar();
    char char15 = i18n11.getColorChar();
    char char16 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    char char21 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n19.getBundleCache$spigot_1_8();
    char char23 = i18n19.getColorChar();
    char char24 = i18n19.getColorChar();
    char char25 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    char char28 = i18n26.getColorChar();
    char char29 = i18n26.getColorChar();
    char char30 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n31.getBundleCache$spigot_1_8();
    java.lang.String[] str_array33 = new java.lang.String[] {  };
    java.lang.String[] str_array35 = i18n31.getStrings(str_array33, "hi!");
    java.lang.String[] str_array37 = i18n26.getStrings(str_array35, "GMCrx");
    java.lang.String[] str_array39 = i18n19.getStrings(str_array35, "friends");
    java.lang.String[] str_array41 = i18n11.getStrings(str_array39, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n42 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char43 = i18n42.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache44 = i18n42.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache45 = i18n42.getBundleCache$spigot_1_8();
    char char46 = i18n42.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n47 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char48 = i18n47.getColorChar();
    char char49 = i18n47.getColorChar();
    char char50 = i18n47.getColorChar();
    char char51 = i18n47.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n52 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache53 = i18n52.getBundleCache$spigot_1_8();
    java.lang.String[] str_array54 = new java.lang.String[] {  };
    java.lang.String[] str_array56 = i18n52.getStrings(str_array54, "hi!");
    java.lang.String[] str_array58 = i18n47.getStrings(str_array56, "GMCrx");
    java.lang.String[] str_array60 = i18n42.getStrings(str_array56, "GMC");
    java.lang.String[] str_array62 = i18n11.getStrings(str_array60, "groundmc.lobby.vanish");
    gtlp.groundmc.lobby.util.I18n i18n63 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char64 = i18n63.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache65 = i18n63.getBundleCache$spigot_1_8();
    char char66 = i18n63.getColorChar();
    char char67 = i18n63.getColorChar();
    char char68 = i18n63.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n69 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache70 = i18n69.getBundleCache$spigot_1_8();
    java.lang.String[] str_array71 = new java.lang.String[] {  };
    java.lang.String[] str_array73 = i18n69.getStrings(str_array71, "hi!");
    java.lang.String[] str_array75 = i18n63.getStrings(str_array73, "GMCy");
    java.lang.String[] str_array77 = i18n11.getStrings(str_array73, "");
    // The following exception was thrown during execution in test generation
    try {
    boolean b78 = commandVanish0.execute(commandSender8, command9, "GMCy", str_array77);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char67 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test065"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender6 = null;
    org.bukkit.command.Command command7 = null;
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    char char11 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n9.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n9.getBundleCache$spigot_1_8();
    char char14 = i18n9.getColorChar();
    char char15 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    char char18 = i18n16.getColorChar();
    char char19 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char22 = i18n21.getColorChar();
    char char23 = i18n21.getColorChar();
    char char24 = i18n21.getColorChar();
    char char25 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n26.getBundleCache$spigot_1_8();
    java.lang.String[] str_array28 = new java.lang.String[] {  };
    java.lang.String[] str_array30 = i18n26.getStrings(str_array28, "hi!");
    java.lang.String[] str_array32 = i18n21.getStrings(str_array30, "GMCrx");
    java.lang.String[] str_array34 = i18n16.getStrings(str_array32, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n35 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n35.getBundleCache$spigot_1_8();
    java.lang.String[] str_array37 = new java.lang.String[] {  };
    java.lang.String[] str_array39 = i18n35.getStrings(str_array37, "hi!");
    java.lang.String[] str_array41 = i18n16.getStrings(str_array39, "groundmc.lobby.hide_players");
    java.lang.String[] str_array43 = i18n9.getStrings(str_array41, "lang.lobby");
    // The following exception was thrown during execution in test generation
    try {
    boolean b44 = commandFriends0.execute(commandSender6, command7, "", str_array41);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test066"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender7 = null;
    org.bukkit.command.Command command8 = null;
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    char char12 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n10.getBundleCache$spigot_1_8();
    char char15 = i18n10.getColorChar();
    char char16 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    char char19 = i18n17.getColorChar();
    char char20 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    char char24 = i18n22.getColorChar();
    char char25 = i18n22.getColorChar();
    char char26 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n27.getBundleCache$spigot_1_8();
    java.lang.String[] str_array29 = new java.lang.String[] {  };
    java.lang.String[] str_array31 = i18n27.getStrings(str_array29, "hi!");
    java.lang.String[] str_array33 = i18n22.getStrings(str_array31, "GMCrx");
    java.lang.String[] str_array35 = i18n17.getStrings(str_array33, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n36.getBundleCache$spigot_1_8();
    java.lang.String[] str_array38 = new java.lang.String[] {  };
    java.lang.String[] str_array40 = i18n36.getStrings(str_array38, "hi!");
    java.lang.String[] str_array42 = i18n17.getStrings(str_array40, "groundmc.lobby.hide_players");
    java.lang.String[] str_array44 = i18n10.getStrings(str_array42, "lang.lobby");
    // The following exception was thrown during execution in test generation
    try {
    boolean b45 = commandFriend0.execute(commandSender7, command8, "lobby", str_array44);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test067"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    org.bukkit.command.CommandSender commandSender1 = null;
    org.bukkit.command.Command command2 = null;
    gtlp.groundmc.lobby.util.I18n i18n4 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char5 = i18n4.getColorChar();
    char char6 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n4.getBundleCache$spigot_1_8();
    char char8 = i18n4.getColorChar();
    char char9 = i18n4.getColorChar();
    char char10 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n11.getBundleCache$spigot_1_8();
    char char14 = i18n11.getColorChar();
    char char15 = i18n11.getColorChar();
    char char16 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    char char21 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n19.getBundleCache$spigot_1_8();
    char char23 = i18n19.getColorChar();
    char char24 = i18n19.getColorChar();
    char char25 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    char char28 = i18n26.getColorChar();
    char char29 = i18n26.getColorChar();
    char char30 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n31.getBundleCache$spigot_1_8();
    java.lang.String[] str_array33 = new java.lang.String[] {  };
    java.lang.String[] str_array35 = i18n31.getStrings(str_array33, "hi!");
    java.lang.String[] str_array37 = i18n26.getStrings(str_array35, "GMCrx");
    java.lang.String[] str_array39 = i18n19.getStrings(str_array35, "friends");
    java.lang.String[] str_array41 = i18n11.getStrings(str_array39, "GMCt");
    java.lang.String[] str_array43 = i18n4.getStrings(str_array39, "groundmc.lobby.admin");
    gtlp.groundmc.lobby.util.I18n i18n44 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char45 = i18n44.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache46 = i18n44.getBundleCache$spigot_1_8();
    char char47 = i18n44.getColorChar();
    char char48 = i18n44.getColorChar();
    char char49 = i18n44.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache50 = i18n44.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n44.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n52 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char53 = i18n52.getColorChar();
    char char54 = i18n52.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache55 = i18n52.getBundleCache$spigot_1_8();
    char char56 = i18n52.getColorChar();
    char char57 = i18n52.getColorChar();
    char char58 = i18n52.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n59 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char60 = i18n59.getColorChar();
    char char61 = i18n59.getColorChar();
    char char62 = i18n59.getColorChar();
    char char63 = i18n59.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n64 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache65 = i18n64.getBundleCache$spigot_1_8();
    java.lang.String[] str_array66 = new java.lang.String[] {  };
    java.lang.String[] str_array68 = i18n64.getStrings(str_array66, "hi!");
    java.lang.String[] str_array70 = i18n59.getStrings(str_array68, "GMCrx");
    java.lang.String[] str_array72 = i18n52.getStrings(str_array68, "friends");
    java.lang.String[] str_array74 = i18n44.getStrings(str_array72, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n75 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char76 = i18n75.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache77 = i18n75.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache78 = i18n75.getBundleCache$spigot_1_8();
    char char79 = i18n75.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n80 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char81 = i18n80.getColorChar();
    char char82 = i18n80.getColorChar();
    char char83 = i18n80.getColorChar();
    char char84 = i18n80.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n85 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache86 = i18n85.getBundleCache$spigot_1_8();
    java.lang.String[] str_array87 = new java.lang.String[] {  };
    java.lang.String[] str_array89 = i18n85.getStrings(str_array87, "hi!");
    java.lang.String[] str_array91 = i18n80.getStrings(str_array89, "GMCrx");
    java.lang.String[] str_array93 = i18n75.getStrings(str_array89, "GMC");
    java.lang.String[] str_array95 = i18n44.getStrings(str_array93, "groundmc.lobby.vanish");
    java.lang.String[] str_array97 = i18n4.getStrings(str_array93, "GMChide");
    // The following exception was thrown during execution in test generation
    try {
    boolean b98 = commandVanish0.execute(commandSender1, command2, "groundmc.lobby.admin", str_array93);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char56 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char62 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char76 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char79 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char81 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char82 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char83 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char84 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array97);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test068"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender4 = null;
    org.bukkit.command.Command command5 = null;
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char8 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n7.getBundleCache$spigot_1_8();
    char char10 = i18n7.getColorChar();
    char char11 = i18n7.getColorChar();
    char char12 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n7.getBundleCache$spigot_1_8();
    char char14 = i18n7.getColorChar();
    char char15 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n16.getBundleCache$spigot_1_8();
    char char19 = i18n16.getColorChar();
    char char20 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n22.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n22.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n22.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n22.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char29 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n28.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n28.getBundleCache$spigot_1_8();
    char char32 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char34 = i18n33.getColorChar();
    char char35 = i18n33.getColorChar();
    char char36 = i18n33.getColorChar();
    char char37 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n38 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache39 = i18n38.getBundleCache$spigot_1_8();
    java.lang.String[] str_array40 = new java.lang.String[] {  };
    java.lang.String[] str_array42 = i18n38.getStrings(str_array40, "hi!");
    java.lang.String[] str_array44 = i18n33.getStrings(str_array42, "GMCrx");
    java.lang.String[] str_array46 = i18n28.getStrings(str_array42, "GMC");
    java.lang.String[] str_array48 = i18n22.getStrings(str_array42, "GMCw");
    java.lang.String[] str_array50 = i18n16.getStrings(str_array48, "GMCy");
    gtlp.groundmc.lobby.util.I18n i18n51 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char52 = i18n51.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache53 = i18n51.getBundleCache$spigot_1_8();
    char char54 = i18n51.getColorChar();
    char char55 = i18n51.getColorChar();
    char char56 = i18n51.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache57 = i18n51.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache58 = i18n51.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n59 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char60 = i18n59.getColorChar();
    char char61 = i18n59.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache62 = i18n59.getBundleCache$spigot_1_8();
    char char63 = i18n59.getColorChar();
    char char64 = i18n59.getColorChar();
    char char65 = i18n59.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n66 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char67 = i18n66.getColorChar();
    char char68 = i18n66.getColorChar();
    char char69 = i18n66.getColorChar();
    char char70 = i18n66.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n71 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache72 = i18n71.getBundleCache$spigot_1_8();
    java.lang.String[] str_array73 = new java.lang.String[] {  };
    java.lang.String[] str_array75 = i18n71.getStrings(str_array73, "hi!");
    java.lang.String[] str_array77 = i18n66.getStrings(str_array75, "GMCrx");
    java.lang.String[] str_array79 = i18n59.getStrings(str_array75, "friends");
    java.lang.String[] str_array81 = i18n51.getStrings(str_array79, "GMCt");
    java.lang.String[] str_array83 = i18n16.getStrings(str_array81, "coins");
    java.lang.String[] str_array85 = i18n7.getStrings(str_array81, "GMCw");
    // The following exception was thrown during execution in test generation
    try {
    boolean b86 = commandCoins0.execute(commandSender4, command5, "GMCsilent", str_array81);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char56 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char67 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char69 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char70 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test069"); }

    gtlp.groundmc.lobby.registry.LobbyCommandRegistry.Companion companion0 = gtlp.groundmc.lobby.registry.LobbyCommandRegistry.Companion;
    gtlp.groundmc.lobby.commands.CommandVanish commandVanish1 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str2 = commandVanish1.getName();
    java.lang.String str3 = commandVanish1.getName();
    java.lang.String str4 = commandVanish1.getName();
    java.lang.String str5 = commandVanish1.getName();
    java.lang.String str6 = commandVanish1.getName();
    java.lang.String str7 = commandVanish1.getName();
    java.lang.String str8 = commandVanish1.getName();
    java.lang.String str9 = commandVanish1.getName();
    java.lang.String str10 = commandVanish1.getName();
    // The following exception was thrown during execution in test generation
    try {
    companion0.registerCommand((gtlp.groundmc.lobby.commands.ILobbyCommand)commandVanish1);
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(companion0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "vanish"+ "'", str9.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "vanish"+ "'", str10.equals("vanish"));

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test070"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    java.lang.String str6 = commandFriends0.getName();
    java.lang.String str7 = commandFriends0.getName();
    java.lang.String str8 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender9 = null;
    org.bukkit.command.Command command10 = null;
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n16.getBundleCache$spigot_1_8();
    java.lang.String[] str_array18 = new java.lang.String[] {  };
    java.lang.String[] str_array20 = i18n16.getStrings(str_array18, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n22.getBundleCache$spigot_1_8();
    char char25 = i18n22.getColorChar();
    char char26 = i18n22.getColorChar();
    char char27 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n22.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char30 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n29.getBundleCache$spigot_1_8();
    char char32 = i18n29.getColorChar();
    char char33 = i18n29.getColorChar();
    char char34 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n29.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n29.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n37 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char38 = i18n37.getColorChar();
    char char39 = i18n37.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache40 = i18n37.getBundleCache$spigot_1_8();
    char char41 = i18n37.getColorChar();
    char char42 = i18n37.getColorChar();
    char char43 = i18n37.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n44 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char45 = i18n44.getColorChar();
    char char46 = i18n44.getColorChar();
    char char47 = i18n44.getColorChar();
    char char48 = i18n44.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n49 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache50 = i18n49.getBundleCache$spigot_1_8();
    java.lang.String[] str_array51 = new java.lang.String[] {  };
    java.lang.String[] str_array53 = i18n49.getStrings(str_array51, "hi!");
    java.lang.String[] str_array55 = i18n44.getStrings(str_array53, "GMCrx");
    java.lang.String[] str_array57 = i18n37.getStrings(str_array53, "friends");
    java.lang.String[] str_array59 = i18n29.getStrings(str_array57, "GMCt");
    java.lang.String[] str_array61 = i18n22.getStrings(str_array57, "friend");
    java.lang.String[] str_array63 = i18n16.getStrings(str_array57, "GMCt");
    java.lang.String[] str_array65 = i18n12.getStrings(str_array57, "groundmc.lobby.admin");
    // The following exception was thrown during execution in test generation
    try {
    boolean b66 = commandFriends0.execute(commandSender9, command10, "lang.lobby", str_array65);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friends"+ "'", str7.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friends"+ "'", str8.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test071"); }

    gtlp.groundmc.lobby.registry.LobbyCommandRegistry.Companion companion0 = gtlp.groundmc.lobby.registry.LobbyCommandRegistry.Companion;
    gtlp.groundmc.lobby.commands.CommandFriends commandFriends1 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str2 = commandFriends1.getName();
    java.lang.String str3 = commandFriends1.getName();
    java.lang.String str4 = commandFriends1.getName();
    java.lang.String str5 = commandFriends1.getName();
    java.lang.String str6 = commandFriends1.getName();
    java.lang.String str7 = commandFriends1.getName();
    // The following exception was thrown during execution in test generation
    try {
    companion0.registerCommand((gtlp.groundmc.lobby.commands.ILobbyCommand)commandFriends1);
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(companion0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friends"+ "'", str7.equals("friends"));

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test072"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender8 = null;
    org.bukkit.command.Command command9 = null;
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n11.getBundleCache$spigot_1_8();
    char char13 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    char char18 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n16.getBundleCache$spigot_1_8();
    char char20 = i18n16.getColorChar();
    char char21 = i18n16.getColorChar();
    char char22 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    char char25 = i18n23.getColorChar();
    char char26 = i18n23.getColorChar();
    char char27 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n28.getBundleCache$spigot_1_8();
    java.lang.String[] str_array30 = new java.lang.String[] {  };
    java.lang.String[] str_array32 = i18n28.getStrings(str_array30, "hi!");
    java.lang.String[] str_array34 = i18n23.getStrings(str_array32, "GMCrx");
    java.lang.String[] str_array36 = i18n16.getStrings(str_array32, "friends");
    java.lang.String[] str_array38 = i18n14.getStrings(str_array36, "vanish");
    java.lang.String[] str_array40 = i18n11.getStrings(str_array38, "GMCt");
    // The following exception was thrown during execution in test generation
    try {
    boolean b41 = commandLobby0.execute(commandSender8, command9, "groundmc.lobby.admin", str_array40);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test073"); }

    org.joda.time.DateTime dateTime2 = null;
    // The following exception was thrown during execution in test generation
    try {
    gtlp.groundmc.lobby.Relationship relationship3 = new gtlp.groundmc.lobby.Relationship("coins", "groundmc.lobby.admin", dateTime2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test074"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    java.lang.String str6 = resourceBundleCache5.getName();
    java.util.concurrent.ConcurrentHashMap<java.util.Locale,java.util.ResourceBundle> concurrenthashmap_locale_resourceBundle7 = resourceBundleCache5.getBackingMap$spigot_1_8();
    java.lang.String str8 = resourceBundleCache5.getName();
    java.util.concurrent.ConcurrentHashMap<java.util.Locale,java.util.ResourceBundle> concurrenthashmap_locale_resourceBundle9 = resourceBundleCache5.getBackingMap$spigot_1_8();
    java.util.Locale locale11 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str12 = resourceBundleCache5.get("GMCt", locale11);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lang.lobby"+ "'", str6.equals("lang.lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(concurrenthashmap_locale_resourceBundle7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lang.lobby"+ "'", str8.equals("lang.lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(concurrenthashmap_locale_resourceBundle9);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test075"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    java.lang.String str9 = commandCoins0.getName();
    java.lang.String str10 = commandCoins0.getName();
    java.lang.String str11 = commandCoins0.getName();
    java.lang.String str12 = commandCoins0.getName();
    java.lang.String str13 = commandCoins0.getName();
    java.lang.String str14 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender15 = null;
    org.bukkit.command.Command command16 = null;
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n18.getBundleCache$spigot_1_8();
    char char21 = i18n18.getColorChar();
    char char22 = i18n18.getColorChar();
    char char23 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    char char28 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n26.getBundleCache$spigot_1_8();
    char char30 = i18n26.getColorChar();
    char char31 = i18n26.getColorChar();
    char char32 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char34 = i18n33.getColorChar();
    char char35 = i18n33.getColorChar();
    char char36 = i18n33.getColorChar();
    char char37 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n38 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache39 = i18n38.getBundleCache$spigot_1_8();
    java.lang.String[] str_array40 = new java.lang.String[] {  };
    java.lang.String[] str_array42 = i18n38.getStrings(str_array40, "hi!");
    java.lang.String[] str_array44 = i18n33.getStrings(str_array42, "GMCrx");
    java.lang.String[] str_array46 = i18n26.getStrings(str_array42, "friends");
    java.lang.String[] str_array48 = i18n18.getStrings(str_array46, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n49 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char50 = i18n49.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n49.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache52 = i18n49.getBundleCache$spigot_1_8();
    char char53 = i18n49.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n54 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char55 = i18n54.getColorChar();
    char char56 = i18n54.getColorChar();
    char char57 = i18n54.getColorChar();
    char char58 = i18n54.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n59 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache60 = i18n59.getBundleCache$spigot_1_8();
    java.lang.String[] str_array61 = new java.lang.String[] {  };
    java.lang.String[] str_array63 = i18n59.getStrings(str_array61, "hi!");
    java.lang.String[] str_array65 = i18n54.getStrings(str_array63, "GMCrx");
    java.lang.String[] str_array67 = i18n49.getStrings(str_array63, "GMC");
    java.lang.String[] str_array69 = i18n18.getStrings(str_array67, "groundmc.lobby.vanish");
    gtlp.groundmc.lobby.util.I18n i18n70 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char71 = i18n70.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache72 = i18n70.getBundleCache$spigot_1_8();
    char char73 = i18n70.getColorChar();
    char char74 = i18n70.getColorChar();
    char char75 = i18n70.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n76 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache77 = i18n76.getBundleCache$spigot_1_8();
    java.lang.String[] str_array78 = new java.lang.String[] {  };
    java.lang.String[] str_array80 = i18n76.getStrings(str_array78, "hi!");
    java.lang.String[] str_array82 = i18n70.getStrings(str_array80, "GMCy");
    java.lang.String[] str_array84 = i18n18.getStrings(str_array80, "");
    // The following exception was thrown during execution in test generation
    try {
    boolean b85 = commandCoins0.execute(commandSender15, command16, "GMCrx", str_array84);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "coins"+ "'", str10.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "coins"+ "'", str11.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "coins"+ "'", str12.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "coins"+ "'", str13.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "coins"+ "'", str14.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char56 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char71 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char73 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char74 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char75 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test076"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    java.lang.String str8 = commandFriend0.getName();
    java.lang.String str9 = commandFriend0.getName();
    java.lang.String str10 = commandFriend0.getName();
    java.lang.String str11 = commandFriend0.getName();
    java.lang.String str12 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender13 = null;
    org.bukkit.command.Command command14 = null;
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n16.getBundleCache$spigot_1_8();
    char char20 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char22 = i18n21.getColorChar();
    char char23 = i18n21.getColorChar();
    char char24 = i18n21.getColorChar();
    char char25 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n26.getBundleCache$spigot_1_8();
    java.lang.String[] str_array28 = new java.lang.String[] {  };
    java.lang.String[] str_array30 = i18n26.getStrings(str_array28, "hi!");
    java.lang.String[] str_array32 = i18n21.getStrings(str_array30, "GMCrx");
    java.lang.String[] str_array34 = i18n16.getStrings(str_array30, "GMC");
    gtlp.groundmc.lobby.util.I18n i18n35 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char36 = i18n35.getColorChar();
    char char37 = i18n35.getColorChar();
    char char38 = i18n35.getColorChar();
    char char39 = i18n35.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache41 = i18n40.getBundleCache$spigot_1_8();
    java.lang.String[] str_array42 = new java.lang.String[] {  };
    java.lang.String[] str_array44 = i18n40.getStrings(str_array42, "hi!");
    java.lang.String[] str_array46 = i18n35.getStrings(str_array44, "GMCrx");
    java.lang.String[] str_array48 = i18n16.getStrings(str_array44, "GMCz");
    // The following exception was thrown during execution in test generation
    try {
    boolean b49 = commandFriend0.execute(commandSender13, command14, "GMCt", str_array44);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friend"+ "'", str8.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "friend"+ "'", str9.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "friend"+ "'", str10.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "friend"+ "'", str11.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "friend"+ "'", str12.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test077"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender4 = null;
    org.bukkit.command.Command command5 = null;
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char8 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n7.getBundleCache$spigot_1_8();
    char char10 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    char char13 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n11.getBundleCache$spigot_1_8();
    char char15 = i18n11.getColorChar();
    char char16 = i18n11.getColorChar();
    char char17 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    char char21 = i18n18.getColorChar();
    char char22 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n23.getBundleCache$spigot_1_8();
    java.lang.String[] str_array25 = new java.lang.String[] {  };
    java.lang.String[] str_array27 = i18n23.getStrings(str_array25, "hi!");
    java.lang.String[] str_array29 = i18n18.getStrings(str_array27, "GMCrx");
    java.lang.String[] str_array31 = i18n11.getStrings(str_array27, "friends");
    java.lang.String[] str_array33 = i18n7.getStrings(str_array31, "GMCsilent");
    // The following exception was thrown during execution in test generation
    try {
    boolean b34 = commandLobby0.execute(commandSender4, command5, "groundmc.lobby.hide_players", str_array33);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test078"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender8 = null;
    org.bukkit.command.Command command9 = null;
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n11.getBundleCache$spigot_1_8();
    char char14 = i18n11.getColorChar();
    char char15 = i18n11.getColorChar();
    char char16 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n23.getBundleCache$spigot_1_8();
    char char26 = i18n23.getColorChar();
    char char27 = i18n23.getColorChar();
    char char28 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n23.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char31 = i18n30.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n30.getBundleCache$spigot_1_8();
    char char33 = i18n30.getColorChar();
    char char34 = i18n30.getColorChar();
    char char35 = i18n30.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n30.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n30.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n38 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char39 = i18n38.getColorChar();
    char char40 = i18n38.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache41 = i18n38.getBundleCache$spigot_1_8();
    char char42 = i18n38.getColorChar();
    char char43 = i18n38.getColorChar();
    char char44 = i18n38.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char46 = i18n45.getColorChar();
    char char47 = i18n45.getColorChar();
    char char48 = i18n45.getColorChar();
    char char49 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n50 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n50.getBundleCache$spigot_1_8();
    java.lang.String[] str_array52 = new java.lang.String[] {  };
    java.lang.String[] str_array54 = i18n50.getStrings(str_array52, "hi!");
    java.lang.String[] str_array56 = i18n45.getStrings(str_array54, "GMCrx");
    java.lang.String[] str_array58 = i18n38.getStrings(str_array54, "friends");
    java.lang.String[] str_array60 = i18n30.getStrings(str_array58, "GMCt");
    java.lang.String[] str_array62 = i18n23.getStrings(str_array58, "friend");
    gtlp.groundmc.lobby.util.I18n i18n63 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char64 = i18n63.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache65 = i18n63.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache66 = i18n63.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache67 = i18n63.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache68 = i18n63.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n69 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char70 = i18n69.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache71 = i18n69.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache72 = i18n69.getBundleCache$spigot_1_8();
    char char73 = i18n69.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n74 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char75 = i18n74.getColorChar();
    char char76 = i18n74.getColorChar();
    char char77 = i18n74.getColorChar();
    char char78 = i18n74.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n79 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache80 = i18n79.getBundleCache$spigot_1_8();
    java.lang.String[] str_array81 = new java.lang.String[] {  };
    java.lang.String[] str_array83 = i18n79.getStrings(str_array81, "hi!");
    java.lang.String[] str_array85 = i18n74.getStrings(str_array83, "GMCrx");
    java.lang.String[] str_array87 = i18n69.getStrings(str_array83, "GMC");
    java.lang.String[] str_array89 = i18n63.getStrings(str_array83, "GMCw");
    java.lang.String[] str_array91 = i18n23.getStrings(str_array89, "groundmc.lobby.admin");
    java.lang.String[] str_array93 = i18n18.getStrings(str_array89, "GMCry");
    java.lang.String[] str_array95 = i18n11.getStrings(str_array93, "groundmc.lobby.silent");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str96 = commandFriend0.getTabCompletion(commandSender8, command9, "coins", str_array95);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char70 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char73 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char75 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char76 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char77 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char78 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array95);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test079"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    java.lang.String str9 = commandCoins0.getName();
    java.lang.String str10 = commandCoins0.getName();
    java.lang.String str11 = commandCoins0.getName();
    java.lang.String str12 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender13 = null;
    org.bukkit.command.Command command14 = null;
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n22.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n22.getBundleCache$spigot_1_8();
    char char26 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    char char29 = i18n27.getColorChar();
    char char30 = i18n27.getColorChar();
    char char31 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n32.getBundleCache$spigot_1_8();
    java.lang.String[] str_array34 = new java.lang.String[] {  };
    java.lang.String[] str_array36 = i18n32.getStrings(str_array34, "hi!");
    java.lang.String[] str_array38 = i18n27.getStrings(str_array36, "GMCrx");
    java.lang.String[] str_array40 = i18n22.getStrings(str_array36, "GMC");
    java.lang.String[] str_array42 = i18n16.getStrings(str_array36, "GMCw");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str43 = commandCoins0.getTabCompletion(commandSender13, command14, "lobby", str_array36);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "coins"+ "'", str10.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "coins"+ "'", str11.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "coins"+ "'", str12.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test080"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender7 = null;
    org.bukkit.command.Command command8 = null;
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n10.getBundleCache$spigot_1_8();
    char char13 = i18n10.getColorChar();
    char char14 = i18n10.getColorChar();
    char char15 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n18.getBundleCache$spigot_1_8();
    char char22 = i18n18.getColorChar();
    char char23 = i18n18.getColorChar();
    char char24 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    char char27 = i18n25.getColorChar();
    char char28 = i18n25.getColorChar();
    char char29 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n30.getBundleCache$spigot_1_8();
    java.lang.String[] str_array32 = new java.lang.String[] {  };
    java.lang.String[] str_array34 = i18n30.getStrings(str_array32, "hi!");
    java.lang.String[] str_array36 = i18n25.getStrings(str_array34, "GMCrx");
    java.lang.String[] str_array38 = i18n18.getStrings(str_array34, "friends");
    java.lang.String[] str_array40 = i18n10.getStrings(str_array38, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n41 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char42 = i18n41.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache43 = i18n41.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache44 = i18n41.getBundleCache$spigot_1_8();
    char char45 = i18n41.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n46 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char47 = i18n46.getColorChar();
    char char48 = i18n46.getColorChar();
    char char49 = i18n46.getColorChar();
    char char50 = i18n46.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n51 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache52 = i18n51.getBundleCache$spigot_1_8();
    java.lang.String[] str_array53 = new java.lang.String[] {  };
    java.lang.String[] str_array55 = i18n51.getStrings(str_array53, "hi!");
    java.lang.String[] str_array57 = i18n46.getStrings(str_array55, "GMCrx");
    java.lang.String[] str_array59 = i18n41.getStrings(str_array55, "GMC");
    java.lang.String[] str_array61 = i18n10.getStrings(str_array59, "groundmc.lobby.vanish");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str62 = commandCoins0.getTabCompletion(commandSender7, command8, "vanish", str_array59);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test081"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender5 = null;
    org.bukkit.command.Command command6 = null;
    gtlp.groundmc.lobby.util.I18n i18n8 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char9 = i18n8.getColorChar();
    char char10 = i18n8.getColorChar();
    char char11 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n8.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    char char15 = i18n13.getColorChar();
    char char16 = i18n13.getColorChar();
    char char17 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n18.getBundleCache$spigot_1_8();
    java.lang.String[] str_array20 = new java.lang.String[] {  };
    java.lang.String[] str_array22 = i18n18.getStrings(str_array20, "hi!");
    java.lang.String[] str_array24 = i18n13.getStrings(str_array22, "GMCrx");
    java.lang.String[] str_array26 = i18n8.getStrings(str_array24, "GMCt");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str27 = commandFriends0.getTabCompletion(commandSender5, command6, "GMCsilent", str_array26);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test082"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender3 = null;
    org.bukkit.command.Command command4 = null;
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n6.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n8 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char9 = i18n8.getColorChar();
    char char10 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n8.getBundleCache$spigot_1_8();
    char char12 = i18n8.getColorChar();
    char char13 = i18n8.getColorChar();
    char char14 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    char char17 = i18n15.getColorChar();
    char char18 = i18n15.getColorChar();
    char char19 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n20.getBundleCache$spigot_1_8();
    java.lang.String[] str_array22 = new java.lang.String[] {  };
    java.lang.String[] str_array24 = i18n20.getStrings(str_array22, "hi!");
    java.lang.String[] str_array26 = i18n15.getStrings(str_array24, "GMCrx");
    java.lang.String[] str_array28 = i18n8.getStrings(str_array24, "friends");
    java.lang.String[] str_array30 = i18n6.getStrings(str_array28, "vanish");
    // The following exception was thrown during execution in test generation
    try {
    boolean b31 = commandFriend0.execute(commandSender3, command4, "hi!", str_array28);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test083"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender8 = null;
    org.bukkit.command.Command command9 = null;
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    char char13 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n11.getBundleCache$spigot_1_8();
    char char15 = i18n11.getColorChar();
    char char16 = i18n11.getColorChar();
    char char17 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    char char21 = i18n18.getColorChar();
    char char22 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n23.getBundleCache$spigot_1_8();
    java.lang.String[] str_array25 = new java.lang.String[] {  };
    java.lang.String[] str_array27 = i18n23.getStrings(str_array25, "hi!");
    java.lang.String[] str_array29 = i18n18.getStrings(str_array27, "GMCrx");
    java.lang.String[] str_array31 = i18n11.getStrings(str_array27, "friends");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n34 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char35 = i18n34.getColorChar();
    char char36 = i18n34.getColorChar();
    char char37 = i18n34.getColorChar();
    char char38 = i18n34.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n39 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache40 = i18n39.getBundleCache$spigot_1_8();
    java.lang.String[] str_array41 = new java.lang.String[] {  };
    java.lang.String[] str_array43 = i18n39.getStrings(str_array41, "hi!");
    java.lang.String[] str_array45 = i18n34.getStrings(str_array43, "GMCrx");
    java.lang.String[] str_array47 = i18n11.getStrings(str_array45, "");
    // The following exception was thrown during execution in test generation
    try {
    boolean b48 = commandLobby0.execute(commandSender8, command9, "GMCx", str_array45);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test084"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender6 = null;
    org.bukkit.command.Command command7 = null;
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    char char11 = i18n9.getColorChar();
    char char12 = i18n9.getColorChar();
    char char13 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n14.getBundleCache$spigot_1_8();
    java.lang.String[] str_array16 = new java.lang.String[] {  };
    java.lang.String[] str_array18 = i18n14.getStrings(str_array16, "hi!");
    java.lang.String[] str_array20 = i18n9.getStrings(str_array18, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char22 = i18n21.getColorChar();
    char char23 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n21.getBundleCache$spigot_1_8();
    char char25 = i18n21.getColorChar();
    char char26 = i18n21.getColorChar();
    char char27 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char29 = i18n28.getColorChar();
    char char30 = i18n28.getColorChar();
    char char31 = i18n28.getColorChar();
    char char32 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n33.getBundleCache$spigot_1_8();
    java.lang.String[] str_array35 = new java.lang.String[] {  };
    java.lang.String[] str_array37 = i18n33.getStrings(str_array35, "hi!");
    java.lang.String[] str_array39 = i18n28.getStrings(str_array37, "GMCrx");
    java.lang.String[] str_array41 = i18n21.getStrings(str_array37, "friends");
    java.lang.String[] str_array43 = i18n9.getStrings(str_array41, "");
    // The following exception was thrown during execution in test generation
    try {
    boolean b44 = commandFriend0.execute(commandSender6, command7, "GMCz", str_array41);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test085"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    char char5 = i18n0.getColorChar();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = i18n0.getString("GMCrx", "groundmc.lobby.admin");
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test086"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    java.lang.String str9 = commandCoins0.getName();
    java.lang.String str10 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender11 = null;
    org.bukkit.command.Command command12 = null;
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n14.getBundleCache$spigot_1_8();
    char char17 = i18n14.getColorChar();
    char char18 = i18n14.getColorChar();
    char char19 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    char char24 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n22.getBundleCache$spigot_1_8();
    char char26 = i18n22.getColorChar();
    char char27 = i18n22.getColorChar();
    char char28 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char30 = i18n29.getColorChar();
    char char31 = i18n29.getColorChar();
    char char32 = i18n29.getColorChar();
    char char33 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n34 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n34.getBundleCache$spigot_1_8();
    java.lang.String[] str_array36 = new java.lang.String[] {  };
    java.lang.String[] str_array38 = i18n34.getStrings(str_array36, "hi!");
    java.lang.String[] str_array40 = i18n29.getStrings(str_array38, "GMCrx");
    java.lang.String[] str_array42 = i18n22.getStrings(str_array38, "friends");
    java.lang.String[] str_array44 = i18n14.getStrings(str_array42, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char46 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache47 = i18n45.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache48 = i18n45.getBundleCache$spigot_1_8();
    char char49 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n50 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char51 = i18n50.getColorChar();
    char char52 = i18n50.getColorChar();
    char char53 = i18n50.getColorChar();
    char char54 = i18n50.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n55 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache56 = i18n55.getBundleCache$spigot_1_8();
    java.lang.String[] str_array57 = new java.lang.String[] {  };
    java.lang.String[] str_array59 = i18n55.getStrings(str_array57, "hi!");
    java.lang.String[] str_array61 = i18n50.getStrings(str_array59, "GMCrx");
    java.lang.String[] str_array63 = i18n45.getStrings(str_array59, "GMC");
    java.lang.String[] str_array65 = i18n14.getStrings(str_array63, "groundmc.lobby.vanish");
    // The following exception was thrown during execution in test generation
    try {
    boolean b66 = commandCoins0.execute(commandSender11, command12, "groundmc.lobby.admin", str_array65);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "coins"+ "'", str10.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test087"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender2 = null;
    org.bukkit.command.Command command3 = null;
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n5.getBundleCache$spigot_1_8();
    char char8 = i18n5.getColorChar();
    char char9 = i18n5.getColorChar();
    char char10 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n5.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    char char14 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n17.getBundleCache$spigot_1_8();
    char char20 = i18n17.getColorChar();
    char char21 = i18n17.getColorChar();
    char char22 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n24.getBundleCache$spigot_1_8();
    char char27 = i18n24.getColorChar();
    char char28 = i18n24.getColorChar();
    char char29 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n24.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n24.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char33 = i18n32.getColorChar();
    char char34 = i18n32.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n32.getBundleCache$spigot_1_8();
    char char36 = i18n32.getColorChar();
    char char37 = i18n32.getColorChar();
    char char38 = i18n32.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n39 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char40 = i18n39.getColorChar();
    char char41 = i18n39.getColorChar();
    char char42 = i18n39.getColorChar();
    char char43 = i18n39.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n44 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache45 = i18n44.getBundleCache$spigot_1_8();
    java.lang.String[] str_array46 = new java.lang.String[] {  };
    java.lang.String[] str_array48 = i18n44.getStrings(str_array46, "hi!");
    java.lang.String[] str_array50 = i18n39.getStrings(str_array48, "GMCrx");
    java.lang.String[] str_array52 = i18n32.getStrings(str_array48, "friends");
    java.lang.String[] str_array54 = i18n24.getStrings(str_array52, "GMCt");
    java.lang.String[] str_array56 = i18n17.getStrings(str_array52, "friend");
    gtlp.groundmc.lobby.util.I18n i18n57 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char58 = i18n57.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache59 = i18n57.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache60 = i18n57.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache61 = i18n57.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache62 = i18n57.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n63 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char64 = i18n63.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache65 = i18n63.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache66 = i18n63.getBundleCache$spigot_1_8();
    char char67 = i18n63.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n68 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char69 = i18n68.getColorChar();
    char char70 = i18n68.getColorChar();
    char char71 = i18n68.getColorChar();
    char char72 = i18n68.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n73 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache74 = i18n73.getBundleCache$spigot_1_8();
    java.lang.String[] str_array75 = new java.lang.String[] {  };
    java.lang.String[] str_array77 = i18n73.getStrings(str_array75, "hi!");
    java.lang.String[] str_array79 = i18n68.getStrings(str_array77, "GMCrx");
    java.lang.String[] str_array81 = i18n63.getStrings(str_array77, "GMC");
    java.lang.String[] str_array83 = i18n57.getStrings(str_array77, "GMCw");
    java.lang.String[] str_array85 = i18n17.getStrings(str_array83, "groundmc.lobby.admin");
    java.lang.String[] str_array87 = i18n12.getStrings(str_array83, "GMCry");
    java.lang.String[] str_array89 = i18n5.getStrings(str_array87, "groundmc.lobby.silent");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str90 = commandFriend0.getTabCompletion(commandSender2, command3, "GMCry", str_array89);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char67 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char69 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char70 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char71 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char72 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array89);

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test088"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender8 = null;
    org.bukkit.command.Command command9 = null;
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    char char13 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n11.getBundleCache$spigot_1_8();
    char char15 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n16.getBundleCache$spigot_1_8();
    char char19 = i18n16.getColorChar();
    char char20 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n22.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n22.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n22.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n22.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char29 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n28.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n28.getBundleCache$spigot_1_8();
    char char32 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char34 = i18n33.getColorChar();
    char char35 = i18n33.getColorChar();
    char char36 = i18n33.getColorChar();
    char char37 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n38 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache39 = i18n38.getBundleCache$spigot_1_8();
    java.lang.String[] str_array40 = new java.lang.String[] {  };
    java.lang.String[] str_array42 = i18n38.getStrings(str_array40, "hi!");
    java.lang.String[] str_array44 = i18n33.getStrings(str_array42, "GMCrx");
    java.lang.String[] str_array46 = i18n28.getStrings(str_array42, "GMC");
    java.lang.String[] str_array48 = i18n22.getStrings(str_array42, "GMCw");
    java.lang.String[] str_array50 = i18n16.getStrings(str_array48, "GMCy");
    java.lang.String[] str_array52 = i18n11.getStrings(str_array48, "GMCy");
    // The following exception was thrown during execution in test generation
    try {
    boolean b53 = commandLobby0.execute(commandSender8, command9, "groundmc.lobby.hide_players", str_array48);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test089"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    java.lang.String str9 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender10 = null;
    org.bukkit.command.Command command11 = null;
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n13.getBundleCache$spigot_1_8();
    char char15 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n18.getBundleCache$spigot_1_8();
    char char22 = i18n18.getColorChar();
    char char23 = i18n18.getColorChar();
    char char24 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    char char27 = i18n25.getColorChar();
    char char28 = i18n25.getColorChar();
    char char29 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n30.getBundleCache$spigot_1_8();
    java.lang.String[] str_array32 = new java.lang.String[] {  };
    java.lang.String[] str_array34 = i18n30.getStrings(str_array32, "hi!");
    java.lang.String[] str_array36 = i18n25.getStrings(str_array34, "GMCrx");
    java.lang.String[] str_array38 = i18n18.getStrings(str_array34, "friends");
    java.lang.String[] str_array40 = i18n16.getStrings(str_array38, "vanish");
    java.lang.String[] str_array42 = i18n13.getStrings(str_array40, "GMCt");
    // The following exception was thrown during execution in test generation
    try {
    boolean b43 = commandCoins0.execute(commandSender10, command11, "GMCt", str_array40);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test090"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    char char4 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n6.getBundleCache$spigot_1_8();
    char char8 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n6.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n10.getBundleCache$spigot_1_8();
    char char13 = i18n10.getColorChar();
    char char14 = i18n10.getColorChar();
    char char15 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    char char19 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n22.getBundleCache$spigot_1_8();
    char char25 = i18n22.getColorChar();
    char char26 = i18n22.getColorChar();
    char char27 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n22.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char30 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n29.getBundleCache$spigot_1_8();
    char char32 = i18n29.getColorChar();
    char char33 = i18n29.getColorChar();
    char char34 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n29.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n29.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n37 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char38 = i18n37.getColorChar();
    char char39 = i18n37.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache40 = i18n37.getBundleCache$spigot_1_8();
    char char41 = i18n37.getColorChar();
    char char42 = i18n37.getColorChar();
    char char43 = i18n37.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n44 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char45 = i18n44.getColorChar();
    char char46 = i18n44.getColorChar();
    char char47 = i18n44.getColorChar();
    char char48 = i18n44.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n49 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache50 = i18n49.getBundleCache$spigot_1_8();
    java.lang.String[] str_array51 = new java.lang.String[] {  };
    java.lang.String[] str_array53 = i18n49.getStrings(str_array51, "hi!");
    java.lang.String[] str_array55 = i18n44.getStrings(str_array53, "GMCrx");
    java.lang.String[] str_array57 = i18n37.getStrings(str_array53, "friends");
    java.lang.String[] str_array59 = i18n29.getStrings(str_array57, "GMCt");
    java.lang.String[] str_array61 = i18n22.getStrings(str_array57, "friend");
    gtlp.groundmc.lobby.util.I18n i18n62 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char63 = i18n62.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache64 = i18n62.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache65 = i18n62.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache66 = i18n62.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache67 = i18n62.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n68 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char69 = i18n68.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache70 = i18n68.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache71 = i18n68.getBundleCache$spigot_1_8();
    char char72 = i18n68.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n73 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char74 = i18n73.getColorChar();
    char char75 = i18n73.getColorChar();
    char char76 = i18n73.getColorChar();
    char char77 = i18n73.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n78 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache79 = i18n78.getBundleCache$spigot_1_8();
    java.lang.String[] str_array80 = new java.lang.String[] {  };
    java.lang.String[] str_array82 = i18n78.getStrings(str_array80, "hi!");
    java.lang.String[] str_array84 = i18n73.getStrings(str_array82, "GMCrx");
    java.lang.String[] str_array86 = i18n68.getStrings(str_array82, "GMC");
    java.lang.String[] str_array88 = i18n62.getStrings(str_array82, "GMCw");
    java.lang.String[] str_array90 = i18n22.getStrings(str_array88, "groundmc.lobby.admin");
    java.lang.String[] str_array92 = i18n17.getStrings(str_array88, "GMCry");
    java.lang.String[] str_array94 = i18n10.getStrings(str_array92, "groundmc.lobby.silent");
    java.lang.String[] str_array96 = i18n6.getStrings(str_array94, "GMChide");
    java.util.Locale locale97 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array98 = i18n0.getStrings(str_array94, locale97);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char69 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char72 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char74 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char75 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char76 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char77 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array96);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test091"); }

    gtlp.groundmc.lobby.registry.LobbyCommandRegistry.Companion companion0 = gtlp.groundmc.lobby.registry.LobbyCommandRegistry.Companion;
    gtlp.groundmc.lobby.commands.CommandLobby commandLobby1 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str2 = commandLobby1.getName();
    java.lang.String str3 = commandLobby1.getName();
    java.lang.String str4 = commandLobby1.getName();
    java.lang.String str5 = commandLobby1.getName();
    java.lang.String str6 = commandLobby1.getName();
    java.lang.String str7 = commandLobby1.getName();
    java.lang.String str8 = commandLobby1.getName();
    java.lang.String str9 = commandLobby1.getName();
    // The following exception was thrown during execution in test generation
    try {
    companion0.registerCommand((gtlp.groundmc.lobby.commands.ILobbyCommand)commandLobby1);
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(companion0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lobby"+ "'", str8.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "lobby"+ "'", str9.equals("lobby"));

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test092"); }

    gtlp.groundmc.lobby.util.I18nUtils i18nUtils0 = gtlp.groundmc.lobby.util.I18nUtils.INSTANCE;
    // The following exception was thrown during execution in test generation
    try {
    java.util.Locale locale2 = i18nUtils0.getLocaleFromString("lobby");
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18nUtils0);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test093"); }

    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = new gtlp.groundmc.lobby.util.I18n.ResourceBundleCache("vanish");
    java.util.concurrent.ConcurrentHashMap<java.util.Locale,java.util.ResourceBundle> concurrenthashmap_locale_resourceBundle2 = resourceBundleCache1.getBackingMap$spigot_1_8();
    java.util.Locale locale4 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str5 = resourceBundleCache1.get("coins", locale4);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(concurrenthashmap_locale_resourceBundle2);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test094"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n0.getBundleCache$spigot_1_8();
    char char7 = i18n0.getColorChar();
    java.util.Locale locale9 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str10 = i18n0.getString("friends", locale9);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test095"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    java.lang.String str6 = commandFriends0.getName();
    java.lang.String str7 = commandFriends0.getName();
    java.lang.String str8 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender9 = null;
    org.bukkit.command.Command command10 = null;
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    char char14 = i18n12.getColorChar();
    char char15 = i18n12.getColorChar();
    char char16 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n17.getBundleCache$spigot_1_8();
    java.lang.String[] str_array19 = new java.lang.String[] {  };
    java.lang.String[] str_array21 = i18n17.getStrings(str_array19, "hi!");
    java.lang.String[] str_array23 = i18n12.getStrings(str_array21, "GMCrx");
    char char24 = i18n12.getColorChar();
    char char25 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n26.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n26.getBundleCache$spigot_1_8();
    char char30 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    char char33 = i18n31.getColorChar();
    char char34 = i18n31.getColorChar();
    char char35 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n36.getBundleCache$spigot_1_8();
    java.lang.String[] str_array38 = new java.lang.String[] {  };
    java.lang.String[] str_array40 = i18n36.getStrings(str_array38, "hi!");
    java.lang.String[] str_array42 = i18n31.getStrings(str_array40, "GMCrx");
    java.lang.String[] str_array44 = i18n26.getStrings(str_array40, "GMC");
    java.lang.String[] str_array46 = i18n12.getStrings(str_array44, "GMCz");
    // The following exception was thrown during execution in test generation
    try {
    boolean b47 = commandFriends0.execute(commandSender9, command10, "GMCsilent", str_array46);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friends"+ "'", str7.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friends"+ "'", str8.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test096"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    java.lang.String str8 = commandFriend0.getName();
    java.lang.String str9 = commandFriend0.getName();
    java.lang.String str10 = commandFriend0.getName();
    java.lang.String str11 = commandFriend0.getName();
    java.lang.String str12 = commandFriend0.getName();
    java.lang.String str13 = commandFriend0.getName();
    java.util.Locale locale14 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array15 = commandFriend0.getCommandHelp(locale14);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friend"+ "'", str8.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "friend"+ "'", str9.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "friend"+ "'", str10.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "friend"+ "'", str11.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "friend"+ "'", str12.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "friend"+ "'", str13.equals("friend"));

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test097"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender8 = null;
    org.bukkit.command.Command command9 = null;
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    char char13 = i18n11.getColorChar();
    char char14 = i18n11.getColorChar();
    char char15 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n16.getBundleCache$spigot_1_8();
    java.lang.String[] str_array18 = new java.lang.String[] {  };
    java.lang.String[] str_array20 = i18n16.getStrings(str_array18, "hi!");
    java.lang.String[] str_array22 = i18n11.getStrings(str_array20, "GMCrx");
    char char23 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    char char26 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n24.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char29 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n28.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n28.getBundleCache$spigot_1_8();
    char char32 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char34 = i18n33.getColorChar();
    char char35 = i18n33.getColorChar();
    char char36 = i18n33.getColorChar();
    char char37 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n38 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache39 = i18n38.getBundleCache$spigot_1_8();
    java.lang.String[] str_array40 = new java.lang.String[] {  };
    java.lang.String[] str_array42 = i18n38.getStrings(str_array40, "hi!");
    java.lang.String[] str_array44 = i18n33.getStrings(str_array42, "GMCrx");
    java.lang.String[] str_array46 = i18n28.getStrings(str_array42, "GMC");
    java.lang.String[] str_array48 = i18n24.getStrings(str_array42, "GMCx");
    java.lang.String[] str_array50 = i18n11.getStrings(str_array48, "hi!");
    gtlp.groundmc.lobby.util.I18n i18n51 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char52 = i18n51.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache53 = i18n51.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache54 = i18n51.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache55 = i18n51.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache56 = i18n51.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache57 = i18n51.getBundleCache$spigot_1_8();
    char char58 = i18n51.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n59 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache60 = i18n59.getBundleCache$spigot_1_8();
    char char61 = i18n59.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n62 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache63 = i18n62.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n64 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char65 = i18n64.getColorChar();
    char char66 = i18n64.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache67 = i18n64.getBundleCache$spigot_1_8();
    char char68 = i18n64.getColorChar();
    char char69 = i18n64.getColorChar();
    char char70 = i18n64.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n71 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char72 = i18n71.getColorChar();
    char char73 = i18n71.getColorChar();
    char char74 = i18n71.getColorChar();
    char char75 = i18n71.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n76 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache77 = i18n76.getBundleCache$spigot_1_8();
    java.lang.String[] str_array78 = new java.lang.String[] {  };
    java.lang.String[] str_array80 = i18n76.getStrings(str_array78, "hi!");
    java.lang.String[] str_array82 = i18n71.getStrings(str_array80, "GMCrx");
    java.lang.String[] str_array84 = i18n64.getStrings(str_array80, "friends");
    java.lang.String[] str_array86 = i18n62.getStrings(str_array84, "vanish");
    java.lang.String[] str_array88 = i18n59.getStrings(str_array86, "GMCt");
    java.lang.String[] str_array90 = i18n51.getStrings(str_array86, "GMCz");
    java.lang.String[] str_array92 = i18n11.getStrings(str_array90, "GMCy");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str93 = commandVanish0.getTabCompletion(commandSender8, command9, "GMCrx", str_array90);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char69 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char70 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char72 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char73 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char74 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char75 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array92);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test098"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender8 = null;
    org.bukkit.command.Command command9 = null;
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    char char13 = i18n11.getColorChar();
    char char14 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    char char18 = i18n16.getColorChar();
    char char19 = i18n16.getColorChar();
    char char20 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n21.getBundleCache$spigot_1_8();
    java.lang.String[] str_array23 = new java.lang.String[] {  };
    java.lang.String[] str_array25 = i18n21.getStrings(str_array23, "hi!");
    java.lang.String[] str_array27 = i18n16.getStrings(str_array25, "GMCrx");
    java.lang.String[] str_array29 = i18n11.getStrings(str_array27, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n30.getBundleCache$spigot_1_8();
    java.lang.String[] str_array32 = new java.lang.String[] {  };
    java.lang.String[] str_array34 = i18n30.getStrings(str_array32, "hi!");
    java.lang.String[] str_array36 = i18n11.getStrings(str_array34, "groundmc.lobby.hide_players");
    // The following exception was thrown during execution in test generation
    try {
    boolean b37 = commandFriend0.execute(commandSender8, command9, "GMCt", str_array36);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test099"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender4 = null;
    org.bukkit.command.Command command5 = null;
    java.lang.String[] str_array7 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b8 = commandLobby0.execute(commandSender4, command5, "GMChide", str_array7);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test100"); }

    org.joda.time.DateTime dateTime2 = null;
    // The following exception was thrown during execution in test generation
    try {
    gtlp.groundmc.lobby.Relationship relationship3 = new gtlp.groundmc.lobby.Relationship("GMCz", "GMCrx", dateTime2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test101"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    java.lang.String str9 = commandCoins0.getName();
    java.lang.String str10 = commandCoins0.getName();
    java.lang.String str11 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender12 = null;
    org.bukkit.command.Command command13 = null;
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    char char17 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n15.getBundleCache$spigot_1_8();
    char char20 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char22 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n21.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n21.getBundleCache$spigot_1_8();
    char char25 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n21.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n21.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char29 = i18n28.getColorChar();
    char char30 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n28.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n28.getBundleCache$spigot_1_8();
    char char33 = i18n28.getColorChar();
    char char34 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n35 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char36 = i18n35.getColorChar();
    char char37 = i18n35.getColorChar();
    char char38 = i18n35.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache39 = i18n35.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char41 = i18n40.getColorChar();
    char char42 = i18n40.getColorChar();
    char char43 = i18n40.getColorChar();
    char char44 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache46 = i18n45.getBundleCache$spigot_1_8();
    java.lang.String[] str_array47 = new java.lang.String[] {  };
    java.lang.String[] str_array49 = i18n45.getStrings(str_array47, "hi!");
    java.lang.String[] str_array51 = i18n40.getStrings(str_array49, "GMCrx");
    java.lang.String[] str_array53 = i18n35.getStrings(str_array51, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n54 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache55 = i18n54.getBundleCache$spigot_1_8();
    java.lang.String[] str_array56 = new java.lang.String[] {  };
    java.lang.String[] str_array58 = i18n54.getStrings(str_array56, "hi!");
    java.lang.String[] str_array60 = i18n35.getStrings(str_array58, "groundmc.lobby.hide_players");
    java.lang.String[] str_array62 = i18n28.getStrings(str_array60, "lang.lobby");
    java.lang.String[] str_array64 = i18n21.getStrings(str_array62, "hi!");
    java.lang.String[] str_array66 = i18n15.getStrings(str_array64, "GMCw");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str67 = commandCoins0.getTabCompletion(commandSender12, command13, "GMCx", str_array64);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "coins"+ "'", str10.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "coins"+ "'", str11.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test102"); }

    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = new gtlp.groundmc.lobby.util.I18n.ResourceBundleCache("GMCsilent");
    java.util.Locale locale3 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str4 = resourceBundleCache1.get("", locale3);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test103"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = i18n0.getBundleCache$spigot_1_8();
    char char2 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n3 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n3.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    char char7 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n5.getBundleCache$spigot_1_8();
    char char9 = i18n5.getColorChar();
    char char10 = i18n5.getColorChar();
    char char11 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    char char14 = i18n12.getColorChar();
    char char15 = i18n12.getColorChar();
    char char16 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n17.getBundleCache$spigot_1_8();
    java.lang.String[] str_array19 = new java.lang.String[] {  };
    java.lang.String[] str_array21 = i18n17.getStrings(str_array19, "hi!");
    java.lang.String[] str_array23 = i18n12.getStrings(str_array21, "GMCrx");
    java.lang.String[] str_array25 = i18n5.getStrings(str_array21, "friends");
    java.lang.String[] str_array27 = i18n3.getStrings(str_array25, "vanish");
    java.lang.String[] str_array29 = i18n0.getStrings(str_array27, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char31 = i18n30.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n30.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n30.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n30.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n30.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char37 = i18n36.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache38 = i18n36.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache39 = i18n36.getBundleCache$spigot_1_8();
    char char40 = i18n36.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n41 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char42 = i18n41.getColorChar();
    char char43 = i18n41.getColorChar();
    char char44 = i18n41.getColorChar();
    char char45 = i18n41.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n46 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache47 = i18n46.getBundleCache$spigot_1_8();
    java.lang.String[] str_array48 = new java.lang.String[] {  };
    java.lang.String[] str_array50 = i18n46.getStrings(str_array48, "hi!");
    java.lang.String[] str_array52 = i18n41.getStrings(str_array50, "GMCrx");
    java.lang.String[] str_array54 = i18n36.getStrings(str_array50, "GMC");
    java.lang.String[] str_array56 = i18n30.getStrings(str_array50, "GMCw");
    java.util.Locale locale57 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array58 = i18n0.getStrings(str_array50, locale57);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test104"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    org.bukkit.command.CommandSender commandSender1 = null;
    org.bukkit.command.Command command2 = null;
    gtlp.groundmc.lobby.util.I18n i18n4 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char5 = i18n4.getColorChar();
    char char6 = i18n4.getColorChar();
    char char7 = i18n4.getColorChar();
    char char8 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n9.getBundleCache$spigot_1_8();
    java.lang.String[] str_array11 = new java.lang.String[] {  };
    java.lang.String[] str_array13 = i18n9.getStrings(str_array11, "hi!");
    java.lang.String[] str_array15 = i18n4.getStrings(str_array13, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    char char18 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n16.getBundleCache$spigot_1_8();
    char char20 = i18n16.getColorChar();
    char char21 = i18n16.getColorChar();
    char char22 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    char char25 = i18n23.getColorChar();
    char char26 = i18n23.getColorChar();
    char char27 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n28.getBundleCache$spigot_1_8();
    java.lang.String[] str_array30 = new java.lang.String[] {  };
    java.lang.String[] str_array32 = i18n28.getStrings(str_array30, "hi!");
    java.lang.String[] str_array34 = i18n23.getStrings(str_array32, "GMCrx");
    java.lang.String[] str_array36 = i18n16.getStrings(str_array32, "friends");
    java.lang.String[] str_array38 = i18n4.getStrings(str_array36, "");
    // The following exception was thrown during execution in test generation
    try {
    boolean b39 = commandCoins0.execute(commandSender1, command2, "friends", str_array36);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test105"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    java.lang.String str8 = commandVanish0.getName();
    java.lang.String str9 = commandVanish0.getName();
    java.lang.String str10 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender11 = null;
    org.bukkit.command.Command command12 = null;
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n14.getBundleCache$spigot_1_8();
    char char21 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n22.getBundleCache$spigot_1_8();
    char char24 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n25.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    char char29 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n27.getBundleCache$spigot_1_8();
    char char31 = i18n27.getColorChar();
    char char32 = i18n27.getColorChar();
    char char33 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n34 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char35 = i18n34.getColorChar();
    char char36 = i18n34.getColorChar();
    char char37 = i18n34.getColorChar();
    char char38 = i18n34.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n39 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache40 = i18n39.getBundleCache$spigot_1_8();
    java.lang.String[] str_array41 = new java.lang.String[] {  };
    java.lang.String[] str_array43 = i18n39.getStrings(str_array41, "hi!");
    java.lang.String[] str_array45 = i18n34.getStrings(str_array43, "GMCrx");
    java.lang.String[] str_array47 = i18n27.getStrings(str_array43, "friends");
    java.lang.String[] str_array49 = i18n25.getStrings(str_array47, "vanish");
    java.lang.String[] str_array51 = i18n22.getStrings(str_array49, "GMCt");
    java.lang.String[] str_array53 = i18n14.getStrings(str_array49, "GMCz");
    gtlp.groundmc.lobby.util.I18n i18n54 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char55 = i18n54.getColorChar();
    char char56 = i18n54.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache57 = i18n54.getBundleCache$spigot_1_8();
    char char58 = i18n54.getColorChar();
    char char59 = i18n54.getColorChar();
    char char60 = i18n54.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n61 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char62 = i18n61.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache63 = i18n61.getBundleCache$spigot_1_8();
    char char64 = i18n61.getColorChar();
    char char65 = i18n61.getColorChar();
    char char66 = i18n61.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache67 = i18n61.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache68 = i18n61.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n69 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char70 = i18n69.getColorChar();
    char char71 = i18n69.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache72 = i18n69.getBundleCache$spigot_1_8();
    char char73 = i18n69.getColorChar();
    char char74 = i18n69.getColorChar();
    char char75 = i18n69.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n76 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char77 = i18n76.getColorChar();
    char char78 = i18n76.getColorChar();
    char char79 = i18n76.getColorChar();
    char char80 = i18n76.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n81 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache82 = i18n81.getBundleCache$spigot_1_8();
    java.lang.String[] str_array83 = new java.lang.String[] {  };
    java.lang.String[] str_array85 = i18n81.getStrings(str_array83, "hi!");
    java.lang.String[] str_array87 = i18n76.getStrings(str_array85, "GMCrx");
    java.lang.String[] str_array89 = i18n69.getStrings(str_array85, "friends");
    java.lang.String[] str_array91 = i18n61.getStrings(str_array89, "GMCt");
    java.lang.String[] str_array93 = i18n54.getStrings(str_array89, "groundmc.lobby.admin");
    java.lang.String[] str_array95 = i18n14.getStrings(str_array89, "GMCrx");
    // The following exception was thrown during execution in test generation
    try {
    boolean b96 = commandVanish0.execute(commandSender11, command12, "groundmc.lobby.hide_players", str_array89);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "vanish"+ "'", str9.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "vanish"+ "'", str10.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char56 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char62 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char70 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char71 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char73 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char74 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char75 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char77 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char78 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char79 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char80 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array95);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test106"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    java.lang.String str8 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender9 = null;
    org.bukkit.command.Command command10 = null;
    java.lang.String[] str_array12 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str13 = commandLobby0.getTabCompletion(commandSender9, command10, "GMCw", str_array12);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lobby"+ "'", str8.equals("lobby"));

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test107"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender4 = null;
    org.bukkit.command.Command command5 = null;
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char8 = i18n7.getColorChar();
    char char9 = i18n7.getColorChar();
    char char10 = i18n7.getColorChar();
    char char11 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n12.getBundleCache$spigot_1_8();
    java.lang.String[] str_array14 = new java.lang.String[] {  };
    java.lang.String[] str_array16 = i18n12.getStrings(str_array14, "hi!");
    java.lang.String[] str_array18 = i18n7.getStrings(str_array16, "GMCrx");
    char char19 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    char char22 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n24.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n24.getBundleCache$spigot_1_8();
    char char28 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char30 = i18n29.getColorChar();
    char char31 = i18n29.getColorChar();
    char char32 = i18n29.getColorChar();
    char char33 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n34 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n34.getBundleCache$spigot_1_8();
    java.lang.String[] str_array36 = new java.lang.String[] {  };
    java.lang.String[] str_array38 = i18n34.getStrings(str_array36, "hi!");
    java.lang.String[] str_array40 = i18n29.getStrings(str_array38, "GMCrx");
    java.lang.String[] str_array42 = i18n24.getStrings(str_array38, "GMC");
    java.lang.String[] str_array44 = i18n20.getStrings(str_array38, "GMCx");
    java.lang.String[] str_array46 = i18n7.getStrings(str_array44, "hi!");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str47 = commandCoins0.getTabCompletion(commandSender4, command5, "friends", str_array44);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test108"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    org.bukkit.command.CommandSender commandSender1 = null;
    org.bukkit.command.Command command2 = null;
    gtlp.groundmc.lobby.util.I18n i18n4 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char5 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n4.getBundleCache$spigot_1_8();
    char char7 = i18n4.getColorChar();
    char char8 = i18n4.getColorChar();
    char char9 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n4.getBundleCache$spigot_1_8();
    char char12 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    char char15 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n18.getBundleCache$spigot_1_8();
    char char21 = i18n18.getColorChar();
    char char22 = i18n18.getColorChar();
    char char23 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n25.getBundleCache$spigot_1_8();
    char char28 = i18n25.getColorChar();
    char char29 = i18n25.getColorChar();
    char char30 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n25.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n25.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char34 = i18n33.getColorChar();
    char char35 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n33.getBundleCache$spigot_1_8();
    char char37 = i18n33.getColorChar();
    char char38 = i18n33.getColorChar();
    char char39 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char41 = i18n40.getColorChar();
    char char42 = i18n40.getColorChar();
    char char43 = i18n40.getColorChar();
    char char44 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache46 = i18n45.getBundleCache$spigot_1_8();
    java.lang.String[] str_array47 = new java.lang.String[] {  };
    java.lang.String[] str_array49 = i18n45.getStrings(str_array47, "hi!");
    java.lang.String[] str_array51 = i18n40.getStrings(str_array49, "GMCrx");
    java.lang.String[] str_array53 = i18n33.getStrings(str_array49, "friends");
    java.lang.String[] str_array55 = i18n25.getStrings(str_array53, "GMCt");
    java.lang.String[] str_array57 = i18n18.getStrings(str_array53, "friend");
    gtlp.groundmc.lobby.util.I18n i18n58 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char59 = i18n58.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache60 = i18n58.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache61 = i18n58.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache62 = i18n58.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache63 = i18n58.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n64 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char65 = i18n64.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache66 = i18n64.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache67 = i18n64.getBundleCache$spigot_1_8();
    char char68 = i18n64.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n69 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char70 = i18n69.getColorChar();
    char char71 = i18n69.getColorChar();
    char char72 = i18n69.getColorChar();
    char char73 = i18n69.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n74 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache75 = i18n74.getBundleCache$spigot_1_8();
    java.lang.String[] str_array76 = new java.lang.String[] {  };
    java.lang.String[] str_array78 = i18n74.getStrings(str_array76, "hi!");
    java.lang.String[] str_array80 = i18n69.getStrings(str_array78, "GMCrx");
    java.lang.String[] str_array82 = i18n64.getStrings(str_array78, "GMC");
    java.lang.String[] str_array84 = i18n58.getStrings(str_array78, "GMCw");
    java.lang.String[] str_array86 = i18n18.getStrings(str_array84, "groundmc.lobby.admin");
    java.lang.String[] str_array88 = i18n13.getStrings(str_array84, "GMCry");
    java.lang.String[] str_array90 = i18n4.getStrings(str_array88, "GMCrx");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str91 = commandCoins0.getTabCompletion(commandSender1, command2, "lobby", str_array88);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char70 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char71 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char72 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char73 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array90);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test109"); }

    gtlp.groundmc.lobby.registry.LobbyCommandRegistry.Companion companion0 = gtlp.groundmc.lobby.registry.LobbyCommandRegistry.Companion;
    gtlp.groundmc.lobby.commands.CommandLobby commandLobby1 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str2 = commandLobby1.getName();
    java.lang.String str3 = commandLobby1.getName();
    java.lang.String str4 = commandLobby1.getName();
    // The following exception was thrown during execution in test generation
    try {
    companion0.registerCommand((gtlp.groundmc.lobby.commands.ILobbyCommand)commandLobby1);
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(companion0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test110"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender6 = null;
    org.bukkit.command.Command command7 = null;
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    char char11 = i18n9.getColorChar();
    char char12 = i18n9.getColorChar();
    char char13 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n14.getBundleCache$spigot_1_8();
    java.lang.String[] str_array16 = new java.lang.String[] {  };
    java.lang.String[] str_array18 = i18n14.getStrings(str_array16, "hi!");
    java.lang.String[] str_array20 = i18n9.getStrings(str_array18, "GMCrx");
    char char21 = i18n9.getColorChar();
    char char22 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n23.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n23.getBundleCache$spigot_1_8();
    char char27 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char29 = i18n28.getColorChar();
    char char30 = i18n28.getColorChar();
    char char31 = i18n28.getColorChar();
    char char32 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n33.getBundleCache$spigot_1_8();
    java.lang.String[] str_array35 = new java.lang.String[] {  };
    java.lang.String[] str_array37 = i18n33.getStrings(str_array35, "hi!");
    java.lang.String[] str_array39 = i18n28.getStrings(str_array37, "GMCrx");
    java.lang.String[] str_array41 = i18n23.getStrings(str_array37, "GMC");
    java.lang.String[] str_array43 = i18n9.getStrings(str_array41, "GMCz");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str44 = commandVanish0.getTabCompletion(commandSender6, command7, "GMCsilent", str_array43);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test111"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    java.lang.String str8 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender9 = null;
    org.bukkit.command.Command command10 = null;
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    char char14 = i18n12.getColorChar();
    char char15 = i18n12.getColorChar();
    char char16 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n17.getBundleCache$spigot_1_8();
    java.lang.String[] str_array19 = new java.lang.String[] {  };
    java.lang.String[] str_array21 = i18n17.getStrings(str_array19, "hi!");
    java.lang.String[] str_array23 = i18n12.getStrings(str_array21, "GMCrx");
    char char24 = i18n12.getColorChar();
    char char25 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n26.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n26.getBundleCache$spigot_1_8();
    char char30 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    char char33 = i18n31.getColorChar();
    char char34 = i18n31.getColorChar();
    char char35 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n36.getBundleCache$spigot_1_8();
    java.lang.String[] str_array38 = new java.lang.String[] {  };
    java.lang.String[] str_array40 = i18n36.getStrings(str_array38, "hi!");
    java.lang.String[] str_array42 = i18n31.getStrings(str_array40, "GMCrx");
    java.lang.String[] str_array44 = i18n26.getStrings(str_array40, "GMC");
    java.lang.String[] str_array46 = i18n12.getStrings(str_array44, "GMCz");
    // The following exception was thrown during execution in test generation
    try {
    boolean b47 = commandLobby0.execute(commandSender9, command10, "GMCz", str_array46);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lobby"+ "'", str8.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test112"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    java.lang.String str9 = commandCoins0.getName();
    java.lang.String str10 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender11 = null;
    org.bukkit.command.Command command12 = null;
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    char char16 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n14.getBundleCache$spigot_1_8();
    char char18 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n19.getBundleCache$spigot_1_8();
    char char22 = i18n19.getColorChar();
    char char23 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n19.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n25.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n25.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n25.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n25.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n31.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n31.getBundleCache$spigot_1_8();
    char char35 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char37 = i18n36.getColorChar();
    char char38 = i18n36.getColorChar();
    char char39 = i18n36.getColorChar();
    char char40 = i18n36.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n41 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n41.getBundleCache$spigot_1_8();
    java.lang.String[] str_array43 = new java.lang.String[] {  };
    java.lang.String[] str_array45 = i18n41.getStrings(str_array43, "hi!");
    java.lang.String[] str_array47 = i18n36.getStrings(str_array45, "GMCrx");
    java.lang.String[] str_array49 = i18n31.getStrings(str_array45, "GMC");
    java.lang.String[] str_array51 = i18n25.getStrings(str_array45, "GMCw");
    java.lang.String[] str_array53 = i18n19.getStrings(str_array51, "GMCy");
    java.lang.String[] str_array55 = i18n14.getStrings(str_array51, "GMCy");
    // The following exception was thrown during execution in test generation
    try {
    boolean b56 = commandCoins0.execute(commandSender11, command12, "GMCrx", str_array51);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "coins"+ "'", str10.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test113"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str7 = i18n0.getString("lang.lobby", "GMCsilent");
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test114"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender8 = null;
    org.bukkit.command.Command command9 = null;
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    char char13 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n16.getBundleCache$spigot_1_8();
    char char19 = i18n16.getColorChar();
    char char20 = i18n16.getColorChar();
    char char21 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n23.getBundleCache$spigot_1_8();
    char char26 = i18n23.getColorChar();
    char char27 = i18n23.getColorChar();
    char char28 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n23.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n23.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    char char33 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n31.getBundleCache$spigot_1_8();
    char char35 = i18n31.getColorChar();
    char char36 = i18n31.getColorChar();
    char char37 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n38 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char39 = i18n38.getColorChar();
    char char40 = i18n38.getColorChar();
    char char41 = i18n38.getColorChar();
    char char42 = i18n38.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n43 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache44 = i18n43.getBundleCache$spigot_1_8();
    java.lang.String[] str_array45 = new java.lang.String[] {  };
    java.lang.String[] str_array47 = i18n43.getStrings(str_array45, "hi!");
    java.lang.String[] str_array49 = i18n38.getStrings(str_array47, "GMCrx");
    java.lang.String[] str_array51 = i18n31.getStrings(str_array47, "friends");
    java.lang.String[] str_array53 = i18n23.getStrings(str_array51, "GMCt");
    java.lang.String[] str_array55 = i18n16.getStrings(str_array51, "friend");
    gtlp.groundmc.lobby.util.I18n i18n56 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char57 = i18n56.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache58 = i18n56.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache59 = i18n56.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache60 = i18n56.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache61 = i18n56.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n62 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char63 = i18n62.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache64 = i18n62.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache65 = i18n62.getBundleCache$spigot_1_8();
    char char66 = i18n62.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n67 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char68 = i18n67.getColorChar();
    char char69 = i18n67.getColorChar();
    char char70 = i18n67.getColorChar();
    char char71 = i18n67.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n72 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache73 = i18n72.getBundleCache$spigot_1_8();
    java.lang.String[] str_array74 = new java.lang.String[] {  };
    java.lang.String[] str_array76 = i18n72.getStrings(str_array74, "hi!");
    java.lang.String[] str_array78 = i18n67.getStrings(str_array76, "GMCrx");
    java.lang.String[] str_array80 = i18n62.getStrings(str_array76, "GMC");
    java.lang.String[] str_array82 = i18n56.getStrings(str_array76, "GMCw");
    java.lang.String[] str_array84 = i18n16.getStrings(str_array82, "groundmc.lobby.admin");
    java.lang.String[] str_array86 = i18n11.getStrings(str_array82, "GMCry");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str87 = commandVanish0.getTabCompletion(commandSender8, command9, "GMCw", str_array82);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char69 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char70 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char71 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test115"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    java.lang.String str9 = commandCoins0.getName();
    java.lang.String str10 = commandCoins0.getName();
    java.lang.String str11 = commandCoins0.getName();
    java.lang.String str12 = commandCoins0.getName();
    java.lang.String str13 = commandCoins0.getName();
    java.lang.String str14 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender15 = null;
    org.bukkit.command.Command command16 = null;
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n18.getBundleCache$spigot_1_8();
    char char25 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n26.getBundleCache$spigot_1_8();
    char char28 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n29.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    char char33 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n31.getBundleCache$spigot_1_8();
    char char35 = i18n31.getColorChar();
    char char36 = i18n31.getColorChar();
    char char37 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n38 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char39 = i18n38.getColorChar();
    char char40 = i18n38.getColorChar();
    char char41 = i18n38.getColorChar();
    char char42 = i18n38.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n43 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache44 = i18n43.getBundleCache$spigot_1_8();
    java.lang.String[] str_array45 = new java.lang.String[] {  };
    java.lang.String[] str_array47 = i18n43.getStrings(str_array45, "hi!");
    java.lang.String[] str_array49 = i18n38.getStrings(str_array47, "GMCrx");
    java.lang.String[] str_array51 = i18n31.getStrings(str_array47, "friends");
    java.lang.String[] str_array53 = i18n29.getStrings(str_array51, "vanish");
    java.lang.String[] str_array55 = i18n26.getStrings(str_array53, "GMCt");
    java.lang.String[] str_array57 = i18n18.getStrings(str_array53, "GMCz");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str58 = commandCoins0.getTabCompletion(commandSender15, command16, "lobby", str_array53);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "coins"+ "'", str10.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "coins"+ "'", str11.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "coins"+ "'", str12.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "coins"+ "'", str13.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "coins"+ "'", str14.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test116"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender8 = null;
    org.bukkit.command.Command command9 = null;
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n11.getBundleCache$spigot_1_8();
    char char14 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n11.getBundleCache$spigot_1_8();
    char char16 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    char char19 = i18n17.getColorChar();
    char char20 = i18n17.getColorChar();
    char char21 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n22.getBundleCache$spigot_1_8();
    java.lang.String[] str_array24 = new java.lang.String[] {  };
    java.lang.String[] str_array26 = i18n22.getStrings(str_array24, "hi!");
    java.lang.String[] str_array28 = i18n17.getStrings(str_array26, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char30 = i18n29.getColorChar();
    char char31 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n29.getBundleCache$spigot_1_8();
    char char33 = i18n29.getColorChar();
    char char34 = i18n29.getColorChar();
    char char35 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char37 = i18n36.getColorChar();
    char char38 = i18n36.getColorChar();
    char char39 = i18n36.getColorChar();
    char char40 = i18n36.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n41 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n41.getBundleCache$spigot_1_8();
    java.lang.String[] str_array43 = new java.lang.String[] {  };
    java.lang.String[] str_array45 = i18n41.getStrings(str_array43, "hi!");
    java.lang.String[] str_array47 = i18n36.getStrings(str_array45, "GMCrx");
    java.lang.String[] str_array49 = i18n29.getStrings(str_array45, "friends");
    java.lang.String[] str_array51 = i18n17.getStrings(str_array49, "");
    java.lang.String[] str_array53 = i18n11.getStrings(str_array49, "GMCw");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str54 = commandFriend0.getTabCompletion(commandSender8, command9, "GMC", str_array53);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test117"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    org.bukkit.command.CommandSender commandSender1 = null;
    org.bukkit.command.Command command2 = null;
    gtlp.groundmc.lobby.util.I18n i18n4 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char5 = i18n4.getColorChar();
    char char6 = i18n4.getColorChar();
    char char7 = i18n4.getColorChar();
    char char8 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n9.getBundleCache$spigot_1_8();
    java.lang.String[] str_array11 = new java.lang.String[] {  };
    java.lang.String[] str_array13 = i18n9.getStrings(str_array11, "hi!");
    java.lang.String[] str_array15 = i18n4.getStrings(str_array13, "GMCrx");
    // The following exception was thrown during execution in test generation
    try {
    boolean b16 = commandCoins0.execute(commandSender1, command2, "GMCy", str_array15);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test118"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender3 = null;
    org.bukkit.command.Command command4 = null;
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char7 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n6.getBundleCache$spigot_1_8();
    char char9 = i18n6.getColorChar();
    char char10 = i18n6.getColorChar();
    char char11 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n6.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    char char15 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n18.getBundleCache$spigot_1_8();
    char char21 = i18n18.getColorChar();
    char char22 = i18n18.getColorChar();
    char char23 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n25.getBundleCache$spigot_1_8();
    char char28 = i18n25.getColorChar();
    char char29 = i18n25.getColorChar();
    char char30 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n25.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n25.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char34 = i18n33.getColorChar();
    char char35 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n33.getBundleCache$spigot_1_8();
    char char37 = i18n33.getColorChar();
    char char38 = i18n33.getColorChar();
    char char39 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char41 = i18n40.getColorChar();
    char char42 = i18n40.getColorChar();
    char char43 = i18n40.getColorChar();
    char char44 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache46 = i18n45.getBundleCache$spigot_1_8();
    java.lang.String[] str_array47 = new java.lang.String[] {  };
    java.lang.String[] str_array49 = i18n45.getStrings(str_array47, "hi!");
    java.lang.String[] str_array51 = i18n40.getStrings(str_array49, "GMCrx");
    java.lang.String[] str_array53 = i18n33.getStrings(str_array49, "friends");
    java.lang.String[] str_array55 = i18n25.getStrings(str_array53, "GMCt");
    java.lang.String[] str_array57 = i18n18.getStrings(str_array53, "friend");
    gtlp.groundmc.lobby.util.I18n i18n58 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char59 = i18n58.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache60 = i18n58.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache61 = i18n58.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache62 = i18n58.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache63 = i18n58.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n64 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char65 = i18n64.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache66 = i18n64.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache67 = i18n64.getBundleCache$spigot_1_8();
    char char68 = i18n64.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n69 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char70 = i18n69.getColorChar();
    char char71 = i18n69.getColorChar();
    char char72 = i18n69.getColorChar();
    char char73 = i18n69.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n74 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache75 = i18n74.getBundleCache$spigot_1_8();
    java.lang.String[] str_array76 = new java.lang.String[] {  };
    java.lang.String[] str_array78 = i18n74.getStrings(str_array76, "hi!");
    java.lang.String[] str_array80 = i18n69.getStrings(str_array78, "GMCrx");
    java.lang.String[] str_array82 = i18n64.getStrings(str_array78, "GMC");
    java.lang.String[] str_array84 = i18n58.getStrings(str_array78, "GMCw");
    java.lang.String[] str_array86 = i18n18.getStrings(str_array84, "groundmc.lobby.admin");
    java.lang.String[] str_array88 = i18n13.getStrings(str_array84, "GMCry");
    java.lang.String[] str_array90 = i18n6.getStrings(str_array88, "groundmc.lobby.silent");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str91 = commandLobby0.getTabCompletion(commandSender3, command4, "", str_array88);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char70 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char71 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char72 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char73 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array90);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test119"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    java.lang.String str8 = commandLobby0.getName();
    java.lang.String str9 = commandLobby0.getName();
    java.lang.String str10 = commandLobby0.getName();
    java.lang.String str11 = commandLobby0.getName();
    java.lang.String str12 = commandLobby0.getName();
    java.util.Locale locale13 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array14 = commandLobby0.getCommandHelp(locale13);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lobby"+ "'", str8.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "lobby"+ "'", str9.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "lobby"+ "'", str10.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "lobby"+ "'", str11.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "lobby"+ "'", str12.equals("lobby"));

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test120"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender8 = null;
    org.bukkit.command.Command command9 = null;
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n17.getBundleCache$spigot_1_8();
    char char21 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    char char24 = i18n22.getColorChar();
    char char25 = i18n22.getColorChar();
    char char26 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n27.getBundleCache$spigot_1_8();
    java.lang.String[] str_array29 = new java.lang.String[] {  };
    java.lang.String[] str_array31 = i18n27.getStrings(str_array29, "hi!");
    java.lang.String[] str_array33 = i18n22.getStrings(str_array31, "GMCrx");
    java.lang.String[] str_array35 = i18n17.getStrings(str_array31, "GMC");
    java.lang.String[] str_array37 = i18n11.getStrings(str_array31, "GMCw");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache38 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache39 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char41 = i18n40.getColorChar();
    char char42 = i18n40.getColorChar();
    char char43 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache44 = i18n40.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char46 = i18n45.getColorChar();
    char char47 = i18n45.getColorChar();
    char char48 = i18n45.getColorChar();
    char char49 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n50 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n50.getBundleCache$spigot_1_8();
    java.lang.String[] str_array52 = new java.lang.String[] {  };
    java.lang.String[] str_array54 = i18n50.getStrings(str_array52, "hi!");
    java.lang.String[] str_array56 = i18n45.getStrings(str_array54, "GMCrx");
    java.lang.String[] str_array58 = i18n40.getStrings(str_array56, "GMCt");
    java.lang.String[] str_array60 = i18n11.getStrings(str_array58, "hi!");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str61 = commandVanish0.getTabCompletion(commandSender8, command9, "GMCry", str_array58);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test121"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender4 = null;
    org.bukkit.command.Command command5 = null;
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char8 = i18n7.getColorChar();
    char char9 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n7.getBundleCache$spigot_1_8();
    char char11 = i18n7.getColorChar();
    char char12 = i18n7.getColorChar();
    char char13 = i18n7.getColorChar();
    char char14 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    char char17 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n15.getBundleCache$spigot_1_8();
    char char19 = i18n15.getColorChar();
    char char20 = i18n15.getColorChar();
    char char21 = i18n15.getColorChar();
    char char22 = i18n15.getColorChar();
    char char23 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    char char26 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n24.getBundleCache$spigot_1_8();
    char char28 = i18n24.getColorChar();
    char char29 = i18n24.getColorChar();
    char char30 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n31.getBundleCache$spigot_1_8();
    char char34 = i18n31.getColorChar();
    char char35 = i18n31.getColorChar();
    char char36 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n31.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache38 = i18n31.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n39 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char40 = i18n39.getColorChar();
    char char41 = i18n39.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n39.getBundleCache$spigot_1_8();
    char char43 = i18n39.getColorChar();
    char char44 = i18n39.getColorChar();
    char char45 = i18n39.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n46 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char47 = i18n46.getColorChar();
    char char48 = i18n46.getColorChar();
    char char49 = i18n46.getColorChar();
    char char50 = i18n46.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n51 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache52 = i18n51.getBundleCache$spigot_1_8();
    java.lang.String[] str_array53 = new java.lang.String[] {  };
    java.lang.String[] str_array55 = i18n51.getStrings(str_array53, "hi!");
    java.lang.String[] str_array57 = i18n46.getStrings(str_array55, "GMCrx");
    java.lang.String[] str_array59 = i18n39.getStrings(str_array55, "friends");
    java.lang.String[] str_array61 = i18n31.getStrings(str_array59, "GMCt");
    java.lang.String[] str_array63 = i18n24.getStrings(str_array59, "groundmc.lobby.admin");
    java.lang.String[] str_array65 = i18n15.getStrings(str_array63, "coins");
    java.lang.String[] str_array67 = i18n7.getStrings(str_array65, "groundmc.lobby.vanish");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str68 = commandFriends0.getTabCompletion(commandSender4, command5, "GMCx", str_array65);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test122"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    java.lang.String str8 = commandLobby0.getName();
    java.lang.String str9 = commandLobby0.getName();
    java.lang.String str10 = commandLobby0.getName();
    java.lang.String str11 = commandLobby0.getName();
    java.lang.String str12 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender13 = null;
    org.bukkit.command.Command command14 = null;
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n16.getBundleCache$spigot_1_8();
    java.lang.String[] str_array18 = new java.lang.String[] {  };
    java.lang.String[] str_array20 = i18n16.getStrings(str_array18, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n22.getBundleCache$spigot_1_8();
    char char25 = i18n22.getColorChar();
    char char26 = i18n22.getColorChar();
    char char27 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n22.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char30 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n29.getBundleCache$spigot_1_8();
    char char32 = i18n29.getColorChar();
    char char33 = i18n29.getColorChar();
    char char34 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n29.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n29.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n37 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char38 = i18n37.getColorChar();
    char char39 = i18n37.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache40 = i18n37.getBundleCache$spigot_1_8();
    char char41 = i18n37.getColorChar();
    char char42 = i18n37.getColorChar();
    char char43 = i18n37.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n44 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char45 = i18n44.getColorChar();
    char char46 = i18n44.getColorChar();
    char char47 = i18n44.getColorChar();
    char char48 = i18n44.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n49 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache50 = i18n49.getBundleCache$spigot_1_8();
    java.lang.String[] str_array51 = new java.lang.String[] {  };
    java.lang.String[] str_array53 = i18n49.getStrings(str_array51, "hi!");
    java.lang.String[] str_array55 = i18n44.getStrings(str_array53, "GMCrx");
    java.lang.String[] str_array57 = i18n37.getStrings(str_array53, "friends");
    java.lang.String[] str_array59 = i18n29.getStrings(str_array57, "GMCt");
    java.lang.String[] str_array61 = i18n22.getStrings(str_array57, "friend");
    java.lang.String[] str_array63 = i18n16.getStrings(str_array57, "GMCt");
    // The following exception was thrown during execution in test generation
    try {
    boolean b64 = commandLobby0.execute(commandSender13, command14, "GMChide", str_array57);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lobby"+ "'", str8.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "lobby"+ "'", str9.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "lobby"+ "'", str10.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "lobby"+ "'", str11.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "lobby"+ "'", str12.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test123"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender2 = null;
    org.bukkit.command.Command command3 = null;
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n5.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n5.getBundleCache$spigot_1_8();
    char char9 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n5.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n5.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    char char14 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n12.getBundleCache$spigot_1_8();
    char char17 = i18n12.getColorChar();
    char char18 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    char char21 = i18n19.getColorChar();
    char char22 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n19.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    char char26 = i18n24.getColorChar();
    char char27 = i18n24.getColorChar();
    char char28 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n29.getBundleCache$spigot_1_8();
    java.lang.String[] str_array31 = new java.lang.String[] {  };
    java.lang.String[] str_array33 = i18n29.getStrings(str_array31, "hi!");
    java.lang.String[] str_array35 = i18n24.getStrings(str_array33, "GMCrx");
    java.lang.String[] str_array37 = i18n19.getStrings(str_array35, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n38 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache39 = i18n38.getBundleCache$spigot_1_8();
    java.lang.String[] str_array40 = new java.lang.String[] {  };
    java.lang.String[] str_array42 = i18n38.getStrings(str_array40, "hi!");
    java.lang.String[] str_array44 = i18n19.getStrings(str_array42, "groundmc.lobby.hide_players");
    java.lang.String[] str_array46 = i18n12.getStrings(str_array44, "lang.lobby");
    java.lang.String[] str_array48 = i18n5.getStrings(str_array46, "hi!");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str49 = commandVanish0.getTabCompletion(commandSender2, command3, "GMCw", str_array46);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test124"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender2 = null;
    org.bukkit.command.Command command3 = null;
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    char char7 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n5.getBundleCache$spigot_1_8();
    char char9 = i18n5.getColorChar();
    char char10 = i18n5.getColorChar();
    char char11 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n12.getBundleCache$spigot_1_8();
    char char15 = i18n12.getColorChar();
    char char16 = i18n12.getColorChar();
    char char17 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    char char22 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n20.getBundleCache$spigot_1_8();
    char char24 = i18n20.getColorChar();
    char char25 = i18n20.getColorChar();
    char char26 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    char char29 = i18n27.getColorChar();
    char char30 = i18n27.getColorChar();
    char char31 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n32.getBundleCache$spigot_1_8();
    java.lang.String[] str_array34 = new java.lang.String[] {  };
    java.lang.String[] str_array36 = i18n32.getStrings(str_array34, "hi!");
    java.lang.String[] str_array38 = i18n27.getStrings(str_array36, "GMCrx");
    java.lang.String[] str_array40 = i18n20.getStrings(str_array36, "friends");
    java.lang.String[] str_array42 = i18n12.getStrings(str_array40, "GMCt");
    java.lang.String[] str_array44 = i18n5.getStrings(str_array40, "groundmc.lobby.admin");
    // The following exception was thrown during execution in test generation
    try {
    boolean b45 = commandFriends0.execute(commandSender2, command3, "hi!", str_array40);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test125"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = i18n0.getString("vanish", "GMC");
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test126"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    org.bukkit.command.CommandSender commandSender1 = null;
    org.bukkit.command.Command command2 = null;
    gtlp.groundmc.lobby.util.I18n i18n4 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char5 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n4.getBundleCache$spigot_1_8();
    char char11 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n12.getBundleCache$spigot_1_8();
    char char14 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    char char19 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n17.getBundleCache$spigot_1_8();
    char char21 = i18n17.getColorChar();
    char char22 = i18n17.getColorChar();
    char char23 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    char char26 = i18n24.getColorChar();
    char char27 = i18n24.getColorChar();
    char char28 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n29.getBundleCache$spigot_1_8();
    java.lang.String[] str_array31 = new java.lang.String[] {  };
    java.lang.String[] str_array33 = i18n29.getStrings(str_array31, "hi!");
    java.lang.String[] str_array35 = i18n24.getStrings(str_array33, "GMCrx");
    java.lang.String[] str_array37 = i18n17.getStrings(str_array33, "friends");
    java.lang.String[] str_array39 = i18n15.getStrings(str_array37, "vanish");
    java.lang.String[] str_array41 = i18n12.getStrings(str_array39, "GMCt");
    java.lang.String[] str_array43 = i18n4.getStrings(str_array39, "GMCz");
    gtlp.groundmc.lobby.util.I18n i18n44 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char45 = i18n44.getColorChar();
    char char46 = i18n44.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache47 = i18n44.getBundleCache$spigot_1_8();
    char char48 = i18n44.getColorChar();
    char char49 = i18n44.getColorChar();
    char char50 = i18n44.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n51 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char52 = i18n51.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache53 = i18n51.getBundleCache$spigot_1_8();
    char char54 = i18n51.getColorChar();
    char char55 = i18n51.getColorChar();
    char char56 = i18n51.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache57 = i18n51.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache58 = i18n51.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n59 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char60 = i18n59.getColorChar();
    char char61 = i18n59.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache62 = i18n59.getBundleCache$spigot_1_8();
    char char63 = i18n59.getColorChar();
    char char64 = i18n59.getColorChar();
    char char65 = i18n59.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n66 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char67 = i18n66.getColorChar();
    char char68 = i18n66.getColorChar();
    char char69 = i18n66.getColorChar();
    char char70 = i18n66.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n71 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache72 = i18n71.getBundleCache$spigot_1_8();
    java.lang.String[] str_array73 = new java.lang.String[] {  };
    java.lang.String[] str_array75 = i18n71.getStrings(str_array73, "hi!");
    java.lang.String[] str_array77 = i18n66.getStrings(str_array75, "GMCrx");
    java.lang.String[] str_array79 = i18n59.getStrings(str_array75, "friends");
    java.lang.String[] str_array81 = i18n51.getStrings(str_array79, "GMCt");
    java.lang.String[] str_array83 = i18n44.getStrings(str_array79, "groundmc.lobby.admin");
    java.lang.String[] str_array85 = i18n4.getStrings(str_array79, "GMCrx");
    // The following exception was thrown during execution in test generation
    try {
    boolean b86 = commandVanish0.execute(commandSender1, command2, "GMCz", str_array85);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char56 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char67 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char69 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char70 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test127"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    char char5 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n8 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char9 = i18n8.getColorChar();
    char char10 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n8.getBundleCache$spigot_1_8();
    char char12 = i18n8.getColorChar();
    char char13 = i18n8.getColorChar();
    char char14 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    char char17 = i18n15.getColorChar();
    char char18 = i18n15.getColorChar();
    char char19 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n20.getBundleCache$spigot_1_8();
    java.lang.String[] str_array22 = new java.lang.String[] {  };
    java.lang.String[] str_array24 = i18n20.getStrings(str_array22, "hi!");
    java.lang.String[] str_array26 = i18n15.getStrings(str_array24, "GMCrx");
    java.lang.String[] str_array28 = i18n8.getStrings(str_array24, "friends");
    java.lang.String[] str_array30 = i18n0.getStrings(str_array28, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n31.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n31.getBundleCache$spigot_1_8();
    char char35 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char37 = i18n36.getColorChar();
    char char38 = i18n36.getColorChar();
    char char39 = i18n36.getColorChar();
    char char40 = i18n36.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n41 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n41.getBundleCache$spigot_1_8();
    java.lang.String[] str_array43 = new java.lang.String[] {  };
    java.lang.String[] str_array45 = i18n41.getStrings(str_array43, "hi!");
    java.lang.String[] str_array47 = i18n36.getStrings(str_array45, "GMCrx");
    java.lang.String[] str_array49 = i18n31.getStrings(str_array45, "GMC");
    java.lang.String[] str_array51 = i18n0.getStrings(str_array49, "groundmc.lobby.vanish");
    gtlp.groundmc.lobby.util.I18n i18n52 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char53 = i18n52.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache54 = i18n52.getBundleCache$spigot_1_8();
    char char55 = i18n52.getColorChar();
    char char56 = i18n52.getColorChar();
    char char57 = i18n52.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n58 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache59 = i18n58.getBundleCache$spigot_1_8();
    java.lang.String[] str_array60 = new java.lang.String[] {  };
    java.lang.String[] str_array62 = i18n58.getStrings(str_array60, "hi!");
    java.lang.String[] str_array64 = i18n52.getStrings(str_array62, "GMCy");
    java.lang.String[] str_array66 = i18n0.getStrings(str_array62, "");
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str69 = i18n0.getString("lang.lobby", "groundmc.lobby.admin");
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char56 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test128"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender3 = null;
    org.bukkit.command.Command command4 = null;
    java.lang.String[] str_array6 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str7 = commandFriend0.getTabCompletion(commandSender3, command4, "GMCw", str_array6);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test129"); }

    org.joda.time.DateTime dateTime2 = null;
    // The following exception was thrown during execution in test generation
    try {
    gtlp.groundmc.lobby.Relationship relationship3 = new gtlp.groundmc.lobby.Relationship("GMChide", "GMCy", dateTime2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test130"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    java.lang.String str8 = commandFriend0.getName();
    java.lang.String str9 = commandFriend0.getName();
    java.lang.String str10 = commandFriend0.getName();
    java.lang.String str11 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender12 = null;
    org.bukkit.command.Command command13 = null;
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    char char17 = i18n15.getColorChar();
    char char18 = i18n15.getColorChar();
    char char19 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n20.getBundleCache$spigot_1_8();
    java.lang.String[] str_array22 = new java.lang.String[] {  };
    java.lang.String[] str_array24 = i18n20.getStrings(str_array22, "hi!");
    java.lang.String[] str_array26 = i18n15.getStrings(str_array24, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    char char29 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n27.getBundleCache$spigot_1_8();
    char char31 = i18n27.getColorChar();
    char char32 = i18n27.getColorChar();
    char char33 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n34 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char35 = i18n34.getColorChar();
    char char36 = i18n34.getColorChar();
    char char37 = i18n34.getColorChar();
    char char38 = i18n34.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n39 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache40 = i18n39.getBundleCache$spigot_1_8();
    java.lang.String[] str_array41 = new java.lang.String[] {  };
    java.lang.String[] str_array43 = i18n39.getStrings(str_array41, "hi!");
    java.lang.String[] str_array45 = i18n34.getStrings(str_array43, "GMCrx");
    java.lang.String[] str_array47 = i18n27.getStrings(str_array43, "friends");
    java.lang.String[] str_array49 = i18n15.getStrings(str_array47, "");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str50 = commandFriend0.getTabCompletion(commandSender12, command13, "GMCt", str_array47);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friend"+ "'", str8.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "friend"+ "'", str9.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "friend"+ "'", str10.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "friend"+ "'", str11.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test131"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    char char4 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n0.getBundleCache$spigot_1_8();
    java.util.Locale locale8 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str9 = i18n0.getString("lobby", locale8);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test132"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender8 = null;
    org.bukkit.command.Command command9 = null;
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n11.getBundleCache$spigot_1_8();
    char char14 = i18n11.getColorChar();
    char char15 = i18n11.getColorChar();
    char char16 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n18.getBundleCache$spigot_1_8();
    char char21 = i18n18.getColorChar();
    char char22 = i18n18.getColorChar();
    char char23 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    char char28 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n26.getBundleCache$spigot_1_8();
    char char30 = i18n26.getColorChar();
    char char31 = i18n26.getColorChar();
    char char32 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char34 = i18n33.getColorChar();
    char char35 = i18n33.getColorChar();
    char char36 = i18n33.getColorChar();
    char char37 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n38 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache39 = i18n38.getBundleCache$spigot_1_8();
    java.lang.String[] str_array40 = new java.lang.String[] {  };
    java.lang.String[] str_array42 = i18n38.getStrings(str_array40, "hi!");
    java.lang.String[] str_array44 = i18n33.getStrings(str_array42, "GMCrx");
    java.lang.String[] str_array46 = i18n26.getStrings(str_array42, "friends");
    java.lang.String[] str_array48 = i18n18.getStrings(str_array46, "GMCt");
    java.lang.String[] str_array50 = i18n11.getStrings(str_array46, "friend");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str51 = commandLobby0.getTabCompletion(commandSender8, command9, "groundmc.lobby.vanish", str_array50);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test133"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    char char4 = i18n0.getColorChar();
    char char5 = i18n0.getColorChar();
    char char6 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char8 = i18n7.getColorChar();
    char char9 = i18n7.getColorChar();
    char char10 = i18n7.getColorChar();
    char char11 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n12.getBundleCache$spigot_1_8();
    java.lang.String[] str_array14 = new java.lang.String[] {  };
    java.lang.String[] str_array16 = i18n12.getStrings(str_array14, "hi!");
    java.lang.String[] str_array18 = i18n7.getStrings(str_array16, "GMCrx");
    java.lang.String[] str_array20 = i18n0.getStrings(str_array16, "friends");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    char char25 = i18n23.getColorChar();
    char char26 = i18n23.getColorChar();
    char char27 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n28.getBundleCache$spigot_1_8();
    java.lang.String[] str_array30 = new java.lang.String[] {  };
    java.lang.String[] str_array32 = i18n28.getStrings(str_array30, "hi!");
    java.lang.String[] str_array34 = i18n23.getStrings(str_array32, "GMCrx");
    java.lang.String[] str_array36 = i18n0.getStrings(str_array34, "");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n0.getBundleCache$spigot_1_8();
    java.lang.String str38 = resourceBundleCache37.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "lang.lobby"+ "'", str38.equals("lang.lobby"));

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test134"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender6 = null;
    org.bukkit.command.Command command7 = null;
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n9.getBundleCache$spigot_1_8();
    char char12 = i18n9.getColorChar();
    char char13 = i18n9.getColorChar();
    char char14 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n15.getBundleCache$spigot_1_8();
    java.lang.String[] str_array17 = new java.lang.String[] {  };
    java.lang.String[] str_array19 = i18n15.getStrings(str_array17, "hi!");
    java.lang.String[] str_array21 = i18n9.getStrings(str_array19, "GMCy");
    // The following exception was thrown during execution in test generation
    try {
    boolean b22 = commandFriends0.execute(commandSender6, command7, "GMCry", str_array19);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test135"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender6 = null;
    org.bukkit.command.Command command7 = null;
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    char char11 = i18n9.getColorChar();
    char char12 = i18n9.getColorChar();
    char char13 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n14.getBundleCache$spigot_1_8();
    java.lang.String[] str_array16 = new java.lang.String[] {  };
    java.lang.String[] str_array18 = i18n14.getStrings(str_array16, "hi!");
    java.lang.String[] str_array20 = i18n9.getStrings(str_array18, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char22 = i18n21.getColorChar();
    char char23 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n21.getBundleCache$spigot_1_8();
    char char25 = i18n21.getColorChar();
    char char26 = i18n21.getColorChar();
    char char27 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char29 = i18n28.getColorChar();
    char char30 = i18n28.getColorChar();
    char char31 = i18n28.getColorChar();
    char char32 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n33.getBundleCache$spigot_1_8();
    java.lang.String[] str_array35 = new java.lang.String[] {  };
    java.lang.String[] str_array37 = i18n33.getStrings(str_array35, "hi!");
    java.lang.String[] str_array39 = i18n28.getStrings(str_array37, "GMCrx");
    java.lang.String[] str_array41 = i18n21.getStrings(str_array37, "friends");
    java.lang.String[] str_array43 = i18n9.getStrings(str_array41, "");
    // The following exception was thrown during execution in test generation
    try {
    boolean b44 = commandFriends0.execute(commandSender6, command7, "GMCrx", str_array41);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test136"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    char char4 = i18n0.getColorChar();
    char char5 = i18n0.getColorChar();
    char char6 = i18n0.getColorChar();
    char char7 = i18n0.getColorChar();
    char char8 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n9.getBundleCache$spigot_1_8();
    java.lang.String[] str_array11 = new java.lang.String[] {  };
    java.lang.String[] str_array13 = i18n9.getStrings(str_array11, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n9.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n9.getBundleCache$spigot_1_8();
    char char16 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n21.getBundleCache$spigot_1_8();
    java.lang.String[] str_array23 = new java.lang.String[] {  };
    java.lang.String[] str_array25 = i18n21.getStrings(str_array23, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n21.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n27.getBundleCache$spigot_1_8();
    char char30 = i18n27.getColorChar();
    char char31 = i18n27.getColorChar();
    char char32 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n27.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n34 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char35 = i18n34.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n34.getBundleCache$spigot_1_8();
    char char37 = i18n34.getColorChar();
    char char38 = i18n34.getColorChar();
    char char39 = i18n34.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache40 = i18n34.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache41 = i18n34.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n42 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char43 = i18n42.getColorChar();
    char char44 = i18n42.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache45 = i18n42.getBundleCache$spigot_1_8();
    char char46 = i18n42.getColorChar();
    char char47 = i18n42.getColorChar();
    char char48 = i18n42.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n49 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char50 = i18n49.getColorChar();
    char char51 = i18n49.getColorChar();
    char char52 = i18n49.getColorChar();
    char char53 = i18n49.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n54 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache55 = i18n54.getBundleCache$spigot_1_8();
    java.lang.String[] str_array56 = new java.lang.String[] {  };
    java.lang.String[] str_array58 = i18n54.getStrings(str_array56, "hi!");
    java.lang.String[] str_array60 = i18n49.getStrings(str_array58, "GMCrx");
    java.lang.String[] str_array62 = i18n42.getStrings(str_array58, "friends");
    java.lang.String[] str_array64 = i18n34.getStrings(str_array62, "GMCt");
    java.lang.String[] str_array66 = i18n27.getStrings(str_array62, "friend");
    java.lang.String[] str_array68 = i18n21.getStrings(str_array62, "GMCt");
    java.lang.String[] str_array70 = i18n17.getStrings(str_array62, "groundmc.lobby.admin");
    java.lang.String[] str_array72 = i18n9.getStrings(str_array70, "lang.lobby");
    java.util.Locale locale73 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array74 = i18n0.getStrings(str_array70, locale73);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test137"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender9 = null;
    org.bukkit.command.Command command10 = null;
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    char char16 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n14.getBundleCache$spigot_1_8();
    char char18 = i18n14.getColorChar();
    char char19 = i18n14.getColorChar();
    char char20 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char22 = i18n21.getColorChar();
    char char23 = i18n21.getColorChar();
    char char24 = i18n21.getColorChar();
    char char25 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n26.getBundleCache$spigot_1_8();
    java.lang.String[] str_array28 = new java.lang.String[] {  };
    java.lang.String[] str_array30 = i18n26.getStrings(str_array28, "hi!");
    java.lang.String[] str_array32 = i18n21.getStrings(str_array30, "GMCrx");
    java.lang.String[] str_array34 = i18n14.getStrings(str_array30, "friends");
    java.lang.String[] str_array36 = i18n12.getStrings(str_array34, "vanish");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str37 = commandCoins0.getTabCompletion(commandSender9, command10, "groundmc.lobby.vanish", str_array34);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test138"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char7 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n6.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n6.getBundleCache$spigot_1_8();
    char char10 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    char char13 = i18n11.getColorChar();
    char char14 = i18n11.getColorChar();
    char char15 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n16.getBundleCache$spigot_1_8();
    java.lang.String[] str_array18 = new java.lang.String[] {  };
    java.lang.String[] str_array20 = i18n16.getStrings(str_array18, "hi!");
    java.lang.String[] str_array22 = i18n11.getStrings(str_array20, "GMCrx");
    java.lang.String[] str_array24 = i18n6.getStrings(str_array20, "GMC");
    java.lang.String[] str_array26 = i18n0.getStrings(str_array20, "GMCw");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n0.getBundleCache$spigot_1_8();
    char char28 = i18n0.getColorChar();
    java.util.Locale locale30 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str31 = i18n0.getString("groundmc.lobby.hide_players", locale30);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test139"); }

    int i1 = gtlp.groundmc.lobby.util.ExtensionsKt.getMegabytes(1024);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1073741824);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test140"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    char char4 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n0.getBundleCache$spigot_1_8();
    java.util.Locale locale8 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str9 = i18n0.getString("GMCrx", locale8);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test141"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    java.lang.String str8 = commandLobby0.getName();
    java.lang.String str9 = commandLobby0.getName();
    java.lang.String str10 = commandLobby0.getName();
    java.lang.String str11 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender12 = null;
    org.bukkit.command.Command command13 = null;
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n15.getBundleCache$spigot_1_8();
    char char18 = i18n15.getColorChar();
    char char19 = i18n15.getColorChar();
    char char20 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n22.getBundleCache$spigot_1_8();
    char char25 = i18n22.getColorChar();
    char char26 = i18n22.getColorChar();
    char char27 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n22.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n22.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char31 = i18n30.getColorChar();
    char char32 = i18n30.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n30.getBundleCache$spigot_1_8();
    char char34 = i18n30.getColorChar();
    char char35 = i18n30.getColorChar();
    char char36 = i18n30.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n37 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char38 = i18n37.getColorChar();
    char char39 = i18n37.getColorChar();
    char char40 = i18n37.getColorChar();
    char char41 = i18n37.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n42 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache43 = i18n42.getBundleCache$spigot_1_8();
    java.lang.String[] str_array44 = new java.lang.String[] {  };
    java.lang.String[] str_array46 = i18n42.getStrings(str_array44, "hi!");
    java.lang.String[] str_array48 = i18n37.getStrings(str_array46, "GMCrx");
    java.lang.String[] str_array50 = i18n30.getStrings(str_array46, "friends");
    java.lang.String[] str_array52 = i18n22.getStrings(str_array50, "GMCt");
    java.lang.String[] str_array54 = i18n15.getStrings(str_array50, "friend");
    gtlp.groundmc.lobby.util.I18n i18n55 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char56 = i18n55.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache57 = i18n55.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache58 = i18n55.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache59 = i18n55.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache60 = i18n55.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n61 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char62 = i18n61.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache63 = i18n61.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache64 = i18n61.getBundleCache$spigot_1_8();
    char char65 = i18n61.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n66 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char67 = i18n66.getColorChar();
    char char68 = i18n66.getColorChar();
    char char69 = i18n66.getColorChar();
    char char70 = i18n66.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n71 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache72 = i18n71.getBundleCache$spigot_1_8();
    java.lang.String[] str_array73 = new java.lang.String[] {  };
    java.lang.String[] str_array75 = i18n71.getStrings(str_array73, "hi!");
    java.lang.String[] str_array77 = i18n66.getStrings(str_array75, "GMCrx");
    java.lang.String[] str_array79 = i18n61.getStrings(str_array75, "GMC");
    java.lang.String[] str_array81 = i18n55.getStrings(str_array75, "GMCw");
    java.lang.String[] str_array83 = i18n15.getStrings(str_array81, "groundmc.lobby.admin");
    // The following exception was thrown during execution in test generation
    try {
    boolean b84 = commandLobby0.execute(commandSender12, command13, "GMCz", str_array81);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lobby"+ "'", str8.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "lobby"+ "'", str9.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "lobby"+ "'", str10.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "lobby"+ "'", str11.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char56 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char62 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char67 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char69 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char70 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test142"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    char char4 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    java.util.Locale locale7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = i18n0.getString("GMChide", locale7);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test143"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    java.lang.String str6 = commandFriends0.getName();
    java.lang.String str7 = commandFriends0.getName();
    java.lang.String str8 = commandFriends0.getName();
    java.lang.String str9 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender10 = null;
    org.bukkit.command.Command command11 = null;
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n13.getBundleCache$spigot_1_8();
    char char20 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n21.getBundleCache$spigot_1_8();
    char char23 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n24.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    char char28 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n26.getBundleCache$spigot_1_8();
    char char30 = i18n26.getColorChar();
    char char31 = i18n26.getColorChar();
    char char32 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char34 = i18n33.getColorChar();
    char char35 = i18n33.getColorChar();
    char char36 = i18n33.getColorChar();
    char char37 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n38 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache39 = i18n38.getBundleCache$spigot_1_8();
    java.lang.String[] str_array40 = new java.lang.String[] {  };
    java.lang.String[] str_array42 = i18n38.getStrings(str_array40, "hi!");
    java.lang.String[] str_array44 = i18n33.getStrings(str_array42, "GMCrx");
    java.lang.String[] str_array46 = i18n26.getStrings(str_array42, "friends");
    java.lang.String[] str_array48 = i18n24.getStrings(str_array46, "vanish");
    java.lang.String[] str_array50 = i18n21.getStrings(str_array48, "GMCt");
    java.lang.String[] str_array52 = i18n13.getStrings(str_array48, "GMCz");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str53 = commandFriends0.getTabCompletion(commandSender10, command11, "coins", str_array52);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friends"+ "'", str7.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friends"+ "'", str8.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "friends"+ "'", str9.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test144"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender3 = null;
    org.bukkit.command.Command command4 = null;
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char7 = i18n6.getColorChar();
    char char8 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n6.getBundleCache$spigot_1_8();
    char char10 = i18n6.getColorChar();
    char char11 = i18n6.getColorChar();
    char char12 = i18n6.getColorChar();
    char char13 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    char char16 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n14.getBundleCache$spigot_1_8();
    char char18 = i18n14.getColorChar();
    char char19 = i18n14.getColorChar();
    char char20 = i18n14.getColorChar();
    char char21 = i18n14.getColorChar();
    char char22 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    char char25 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n23.getBundleCache$spigot_1_8();
    char char27 = i18n23.getColorChar();
    char char28 = i18n23.getColorChar();
    char char29 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char31 = i18n30.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n30.getBundleCache$spigot_1_8();
    char char33 = i18n30.getColorChar();
    char char34 = i18n30.getColorChar();
    char char35 = i18n30.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n30.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n30.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n38 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char39 = i18n38.getColorChar();
    char char40 = i18n38.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache41 = i18n38.getBundleCache$spigot_1_8();
    char char42 = i18n38.getColorChar();
    char char43 = i18n38.getColorChar();
    char char44 = i18n38.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char46 = i18n45.getColorChar();
    char char47 = i18n45.getColorChar();
    char char48 = i18n45.getColorChar();
    char char49 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n50 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n50.getBundleCache$spigot_1_8();
    java.lang.String[] str_array52 = new java.lang.String[] {  };
    java.lang.String[] str_array54 = i18n50.getStrings(str_array52, "hi!");
    java.lang.String[] str_array56 = i18n45.getStrings(str_array54, "GMCrx");
    java.lang.String[] str_array58 = i18n38.getStrings(str_array54, "friends");
    java.lang.String[] str_array60 = i18n30.getStrings(str_array58, "GMCt");
    java.lang.String[] str_array62 = i18n23.getStrings(str_array58, "groundmc.lobby.admin");
    java.lang.String[] str_array64 = i18n14.getStrings(str_array62, "coins");
    java.lang.String[] str_array66 = i18n6.getStrings(str_array64, "groundmc.lobby.vanish");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str67 = commandLobby0.getTabCompletion(commandSender3, command4, "GMChide", str_array66);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test145"); }

    int i1 = gtlp.groundmc.lobby.util.ExtensionsKt.getMegabytes(99328);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1073741824);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test146"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    char char3 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str7 = i18n0.getString("GMCw", "groundmc.lobby.admin");
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test147"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = i18n0.getBundleCache$spigot_1_8();
    java.lang.String[] str_array2 = new java.lang.String[] {  };
    java.lang.String[] str_array4 = i18n0.getStrings(str_array2, "hi!");
    char char5 = i18n0.getColorChar();
    char char6 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n8 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char9 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n8.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n8.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n12.getBundleCache$spigot_1_8();
    java.lang.String[] str_array14 = new java.lang.String[] {  };
    java.lang.String[] str_array16 = i18n12.getStrings(str_array14, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n18.getBundleCache$spigot_1_8();
    char char21 = i18n18.getColorChar();
    char char22 = i18n18.getColorChar();
    char char23 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n25.getBundleCache$spigot_1_8();
    char char28 = i18n25.getColorChar();
    char char29 = i18n25.getColorChar();
    char char30 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n25.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n25.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char34 = i18n33.getColorChar();
    char char35 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n33.getBundleCache$spigot_1_8();
    char char37 = i18n33.getColorChar();
    char char38 = i18n33.getColorChar();
    char char39 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char41 = i18n40.getColorChar();
    char char42 = i18n40.getColorChar();
    char char43 = i18n40.getColorChar();
    char char44 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache46 = i18n45.getBundleCache$spigot_1_8();
    java.lang.String[] str_array47 = new java.lang.String[] {  };
    java.lang.String[] str_array49 = i18n45.getStrings(str_array47, "hi!");
    java.lang.String[] str_array51 = i18n40.getStrings(str_array49, "GMCrx");
    java.lang.String[] str_array53 = i18n33.getStrings(str_array49, "friends");
    java.lang.String[] str_array55 = i18n25.getStrings(str_array53, "GMCt");
    java.lang.String[] str_array57 = i18n18.getStrings(str_array53, "friend");
    java.lang.String[] str_array59 = i18n12.getStrings(str_array53, "GMCt");
    java.lang.String[] str_array61 = i18n8.getStrings(str_array53, "groundmc.lobby.admin");
    java.util.Locale locale62 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array63 = i18n0.getStrings(str_array53, locale62);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test148"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    java.util.Locale locale6 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str7 = i18n0.getString("GMCry", locale6);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test149"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    char char5 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n6.getBundleCache$spigot_1_8();
    java.lang.String[] str_array8 = new java.lang.String[] {  };
    java.lang.String[] str_array10 = i18n6.getStrings(str_array8, "hi!");
    java.lang.String[] str_array12 = i18n0.getStrings(str_array10, "GMCy");
    char char13 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n18.getBundleCache$spigot_1_8();
    java.lang.String[] str_array20 = new java.lang.String[] {  };
    java.lang.String[] str_array22 = i18n18.getStrings(str_array20, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n24.getBundleCache$spigot_1_8();
    char char27 = i18n24.getColorChar();
    char char28 = i18n24.getColorChar();
    char char29 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n24.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n31.getBundleCache$spigot_1_8();
    char char34 = i18n31.getColorChar();
    char char35 = i18n31.getColorChar();
    char char36 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n31.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache38 = i18n31.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n39 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char40 = i18n39.getColorChar();
    char char41 = i18n39.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n39.getBundleCache$spigot_1_8();
    char char43 = i18n39.getColorChar();
    char char44 = i18n39.getColorChar();
    char char45 = i18n39.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n46 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char47 = i18n46.getColorChar();
    char char48 = i18n46.getColorChar();
    char char49 = i18n46.getColorChar();
    char char50 = i18n46.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n51 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache52 = i18n51.getBundleCache$spigot_1_8();
    java.lang.String[] str_array53 = new java.lang.String[] {  };
    java.lang.String[] str_array55 = i18n51.getStrings(str_array53, "hi!");
    java.lang.String[] str_array57 = i18n46.getStrings(str_array55, "GMCrx");
    java.lang.String[] str_array59 = i18n39.getStrings(str_array55, "friends");
    java.lang.String[] str_array61 = i18n31.getStrings(str_array59, "GMCt");
    java.lang.String[] str_array63 = i18n24.getStrings(str_array59, "friend");
    java.lang.String[] str_array65 = i18n18.getStrings(str_array59, "GMCt");
    java.lang.String[] str_array67 = i18n14.getStrings(str_array59, "groundmc.lobby.admin");
    java.lang.String[] str_array69 = i18n0.getStrings(str_array59, "GMCz");
    java.util.Locale locale71 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str72 = i18n0.getString("GMCx", locale71);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test150"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender9 = null;
    org.bukkit.command.Command command10 = null;
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n12.getBundleCache$spigot_1_8();
    char char15 = i18n12.getColorChar();
    char char16 = i18n12.getColorChar();
    char char17 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    char char21 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n19.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n19.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n24.getBundleCache$spigot_1_8();
    char char27 = i18n24.getColorChar();
    char char28 = i18n24.getColorChar();
    char char29 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n24.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n31.getBundleCache$spigot_1_8();
    char char34 = i18n31.getColorChar();
    char char35 = i18n31.getColorChar();
    char char36 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n31.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache38 = i18n31.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n39 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char40 = i18n39.getColorChar();
    char char41 = i18n39.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n39.getBundleCache$spigot_1_8();
    char char43 = i18n39.getColorChar();
    char char44 = i18n39.getColorChar();
    char char45 = i18n39.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n46 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char47 = i18n46.getColorChar();
    char char48 = i18n46.getColorChar();
    char char49 = i18n46.getColorChar();
    char char50 = i18n46.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n51 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache52 = i18n51.getBundleCache$spigot_1_8();
    java.lang.String[] str_array53 = new java.lang.String[] {  };
    java.lang.String[] str_array55 = i18n51.getStrings(str_array53, "hi!");
    java.lang.String[] str_array57 = i18n46.getStrings(str_array55, "GMCrx");
    java.lang.String[] str_array59 = i18n39.getStrings(str_array55, "friends");
    java.lang.String[] str_array61 = i18n31.getStrings(str_array59, "GMCt");
    java.lang.String[] str_array63 = i18n24.getStrings(str_array59, "friend");
    gtlp.groundmc.lobby.util.I18n i18n64 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char65 = i18n64.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache66 = i18n64.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache67 = i18n64.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache68 = i18n64.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache69 = i18n64.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n70 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char71 = i18n70.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache72 = i18n70.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache73 = i18n70.getBundleCache$spigot_1_8();
    char char74 = i18n70.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n75 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char76 = i18n75.getColorChar();
    char char77 = i18n75.getColorChar();
    char char78 = i18n75.getColorChar();
    char char79 = i18n75.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n80 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache81 = i18n80.getBundleCache$spigot_1_8();
    java.lang.String[] str_array82 = new java.lang.String[] {  };
    java.lang.String[] str_array84 = i18n80.getStrings(str_array82, "hi!");
    java.lang.String[] str_array86 = i18n75.getStrings(str_array84, "GMCrx");
    java.lang.String[] str_array88 = i18n70.getStrings(str_array84, "GMC");
    java.lang.String[] str_array90 = i18n64.getStrings(str_array84, "GMCw");
    java.lang.String[] str_array92 = i18n24.getStrings(str_array90, "groundmc.lobby.admin");
    java.lang.String[] str_array94 = i18n19.getStrings(str_array90, "GMCry");
    java.lang.String[] str_array96 = i18n12.getStrings(str_array94, "groundmc.lobby.silent");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str97 = commandCoins0.getTabCompletion(commandSender9, command10, "GMCw", str_array94);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char71 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char74 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char76 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char77 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char78 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char79 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array96);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test151"); }

    int i1 = gtlp.groundmc.lobby.util.ExtensionsKt.getMegabytes(1048576);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test152"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    char char3 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    char char5 = i18n0.getColorChar();
    java.lang.String[] str_array6 = null;
    java.util.Locale locale7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array8 = i18n0.getStrings(str_array6, locale7);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test153"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = i18n0.getBundleCache$spigot_1_8();
    java.lang.String[] str_array2 = new java.lang.String[] {  };
    java.lang.String[] str_array4 = i18n0.getStrings(str_array2, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n0.getBundleCache$spigot_1_8();
    char char7 = i18n0.getColorChar();
    java.util.Locale locale9 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str10 = i18n0.getString("GMChide", locale9);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test154"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    org.bukkit.command.CommandSender commandSender1 = null;
    org.bukkit.command.Command command2 = null;
    gtlp.groundmc.lobby.util.I18n i18n4 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char5 = i18n4.getColorChar();
    char char6 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n4.getBundleCache$spigot_1_8();
    char char8 = i18n4.getColorChar();
    char char9 = i18n4.getColorChar();
    char char10 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    char char13 = i18n11.getColorChar();
    char char14 = i18n11.getColorChar();
    char char15 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n16.getBundleCache$spigot_1_8();
    java.lang.String[] str_array18 = new java.lang.String[] {  };
    java.lang.String[] str_array20 = i18n16.getStrings(str_array18, "hi!");
    java.lang.String[] str_array22 = i18n11.getStrings(str_array20, "GMCrx");
    java.lang.String[] str_array24 = i18n4.getStrings(str_array20, "friends");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str25 = commandCoins0.getTabCompletion(commandSender1, command2, "GMCrx", str_array20);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test155"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender8 = null;
    org.bukkit.command.Command command9 = null;
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n11.getBundleCache$spigot_1_8();
    char char14 = i18n11.getColorChar();
    char char15 = i18n11.getColorChar();
    char char16 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    char char21 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n19.getBundleCache$spigot_1_8();
    char char23 = i18n19.getColorChar();
    char char24 = i18n19.getColorChar();
    char char25 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    char char28 = i18n26.getColorChar();
    char char29 = i18n26.getColorChar();
    char char30 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n31.getBundleCache$spigot_1_8();
    java.lang.String[] str_array33 = new java.lang.String[] {  };
    java.lang.String[] str_array35 = i18n31.getStrings(str_array33, "hi!");
    java.lang.String[] str_array37 = i18n26.getStrings(str_array35, "GMCrx");
    java.lang.String[] str_array39 = i18n19.getStrings(str_array35, "friends");
    java.lang.String[] str_array41 = i18n11.getStrings(str_array39, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n42 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char43 = i18n42.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache44 = i18n42.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache45 = i18n42.getBundleCache$spigot_1_8();
    char char46 = i18n42.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n47 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char48 = i18n47.getColorChar();
    char char49 = i18n47.getColorChar();
    char char50 = i18n47.getColorChar();
    char char51 = i18n47.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n52 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache53 = i18n52.getBundleCache$spigot_1_8();
    java.lang.String[] str_array54 = new java.lang.String[] {  };
    java.lang.String[] str_array56 = i18n52.getStrings(str_array54, "hi!");
    java.lang.String[] str_array58 = i18n47.getStrings(str_array56, "GMCrx");
    java.lang.String[] str_array60 = i18n42.getStrings(str_array56, "GMC");
    java.lang.String[] str_array62 = i18n11.getStrings(str_array60, "groundmc.lobby.vanish");
    // The following exception was thrown during execution in test generation
    try {
    boolean b63 = commandVanish0.execute(commandSender8, command9, "GMCrx", str_array60);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test156"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    char char4 = i18n0.getColorChar();
    char char5 = i18n0.getColorChar();
    char char6 = i18n0.getColorChar();
    char char7 = i18n0.getColorChar();
    char char8 = i18n0.getColorChar();
    java.util.Locale locale10 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str11 = i18n0.getString("groundmc.lobby.hide_players", locale10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test157"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    java.lang.String str8 = commandVanish0.getName();
    java.lang.String str9 = commandVanish0.getName();
    java.lang.String str10 = commandVanish0.getName();
    java.lang.String str11 = commandVanish0.getName();
    java.lang.String str12 = commandVanish0.getName();
    java.lang.String str13 = commandVanish0.getName();
    java.util.Locale locale14 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array15 = commandVanish0.getCommandHelp(locale14);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "vanish"+ "'", str9.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "vanish"+ "'", str10.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "vanish"+ "'", str11.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "vanish"+ "'", str12.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "vanish"+ "'", str13.equals("vanish"));

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test158"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender3 = null;
    org.bukkit.command.Command command4 = null;
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char7 = i18n6.getColorChar();
    char char8 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n6.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n6.getBundleCache$spigot_1_8();
    char char11 = i18n6.getColorChar();
    char char12 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    char char15 = i18n13.getColorChar();
    char char16 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    char char21 = i18n18.getColorChar();
    char char22 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n23.getBundleCache$spigot_1_8();
    java.lang.String[] str_array25 = new java.lang.String[] {  };
    java.lang.String[] str_array27 = i18n23.getStrings(str_array25, "hi!");
    java.lang.String[] str_array29 = i18n18.getStrings(str_array27, "GMCrx");
    java.lang.String[] str_array31 = i18n13.getStrings(str_array29, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n32.getBundleCache$spigot_1_8();
    java.lang.String[] str_array34 = new java.lang.String[] {  };
    java.lang.String[] str_array36 = i18n32.getStrings(str_array34, "hi!");
    java.lang.String[] str_array38 = i18n13.getStrings(str_array36, "groundmc.lobby.hide_players");
    java.lang.String[] str_array40 = i18n6.getStrings(str_array38, "lang.lobby");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str41 = commandLobby0.getTabCompletion(commandSender3, command4, "GMCsilent", str_array38);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test159"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    java.util.concurrent.ConcurrentHashMap<java.util.Locale,java.util.ResourceBundle> concurrenthashmap_locale_resourceBundle6 = resourceBundleCache5.getBackingMap$spigot_1_8();
    java.util.concurrent.ConcurrentHashMap<java.util.Locale,java.util.ResourceBundle> concurrenthashmap_locale_resourceBundle7 = resourceBundleCache5.getBackingMap$spigot_1_8();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(concurrenthashmap_locale_resourceBundle6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(concurrenthashmap_locale_resourceBundle7);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test160"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender2 = null;
    org.bukkit.command.Command command3 = null;
    java.lang.String[] str_array5 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str6 = commandLobby0.getTabCompletion(commandSender2, command3, "GMC", str_array5);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test161"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n5.getBundleCache$spigot_1_8();
    char char8 = i18n5.getColorChar();
    char char9 = i18n5.getColorChar();
    char char10 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n11.getBundleCache$spigot_1_8();
    java.lang.String[] str_array13 = new java.lang.String[] {  };
    java.lang.String[] str_array15 = i18n11.getStrings(str_array13, "hi!");
    java.lang.String[] str_array17 = i18n5.getStrings(str_array15, "GMCy");
    char char18 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n19.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n19.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n23.getBundleCache$spigot_1_8();
    java.lang.String[] str_array25 = new java.lang.String[] {  };
    java.lang.String[] str_array27 = i18n23.getStrings(str_array25, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n23.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char30 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n29.getBundleCache$spigot_1_8();
    char char32 = i18n29.getColorChar();
    char char33 = i18n29.getColorChar();
    char char34 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n29.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char37 = i18n36.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache38 = i18n36.getBundleCache$spigot_1_8();
    char char39 = i18n36.getColorChar();
    char char40 = i18n36.getColorChar();
    char char41 = i18n36.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n36.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache43 = i18n36.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n44 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char45 = i18n44.getColorChar();
    char char46 = i18n44.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache47 = i18n44.getBundleCache$spigot_1_8();
    char char48 = i18n44.getColorChar();
    char char49 = i18n44.getColorChar();
    char char50 = i18n44.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n51 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char52 = i18n51.getColorChar();
    char char53 = i18n51.getColorChar();
    char char54 = i18n51.getColorChar();
    char char55 = i18n51.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n56 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache57 = i18n56.getBundleCache$spigot_1_8();
    java.lang.String[] str_array58 = new java.lang.String[] {  };
    java.lang.String[] str_array60 = i18n56.getStrings(str_array58, "hi!");
    java.lang.String[] str_array62 = i18n51.getStrings(str_array60, "GMCrx");
    java.lang.String[] str_array64 = i18n44.getStrings(str_array60, "friends");
    java.lang.String[] str_array66 = i18n36.getStrings(str_array64, "GMCt");
    java.lang.String[] str_array68 = i18n29.getStrings(str_array64, "friend");
    java.lang.String[] str_array70 = i18n23.getStrings(str_array64, "GMCt");
    java.lang.String[] str_array72 = i18n19.getStrings(str_array64, "groundmc.lobby.admin");
    java.lang.String[] str_array74 = i18n5.getStrings(str_array64, "GMCz");
    java.util.Locale locale75 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array76 = i18n0.getStrings(str_array64, locale75);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test162"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    java.lang.String str8 = commandVanish0.getName();
    java.lang.String str9 = commandVanish0.getName();
    java.lang.String str10 = commandVanish0.getName();
    java.lang.String str11 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender12 = null;
    org.bukkit.command.Command command13 = null;
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n15.getBundleCache$spigot_1_8();
    java.lang.String[] str_array17 = new java.lang.String[] {  };
    java.lang.String[] str_array19 = i18n15.getStrings(str_array17, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n15.getBundleCache$spigot_1_8();
    char char22 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n23.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n23.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n27.getBundleCache$spigot_1_8();
    java.lang.String[] str_array29 = new java.lang.String[] {  };
    java.lang.String[] str_array31 = i18n27.getStrings(str_array29, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n27.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char34 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n33.getBundleCache$spigot_1_8();
    char char36 = i18n33.getColorChar();
    char char37 = i18n33.getColorChar();
    char char38 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache39 = i18n33.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char41 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n40.getBundleCache$spigot_1_8();
    char char43 = i18n40.getColorChar();
    char char44 = i18n40.getColorChar();
    char char45 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache46 = i18n40.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache47 = i18n40.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n48 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char49 = i18n48.getColorChar();
    char char50 = i18n48.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n48.getBundleCache$spigot_1_8();
    char char52 = i18n48.getColorChar();
    char char53 = i18n48.getColorChar();
    char char54 = i18n48.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n55 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char56 = i18n55.getColorChar();
    char char57 = i18n55.getColorChar();
    char char58 = i18n55.getColorChar();
    char char59 = i18n55.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n60 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache61 = i18n60.getBundleCache$spigot_1_8();
    java.lang.String[] str_array62 = new java.lang.String[] {  };
    java.lang.String[] str_array64 = i18n60.getStrings(str_array62, "hi!");
    java.lang.String[] str_array66 = i18n55.getStrings(str_array64, "GMCrx");
    java.lang.String[] str_array68 = i18n48.getStrings(str_array64, "friends");
    java.lang.String[] str_array70 = i18n40.getStrings(str_array68, "GMCt");
    java.lang.String[] str_array72 = i18n33.getStrings(str_array68, "friend");
    java.lang.String[] str_array74 = i18n27.getStrings(str_array68, "GMCt");
    java.lang.String[] str_array76 = i18n23.getStrings(str_array68, "groundmc.lobby.admin");
    java.lang.String[] str_array78 = i18n15.getStrings(str_array76, "lang.lobby");
    // The following exception was thrown during execution in test generation
    try {
    boolean b79 = commandVanish0.execute(commandSender12, command13, "groundmc.lobby.vanish", str_array78);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "vanish"+ "'", str9.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "vanish"+ "'", str10.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "vanish"+ "'", str11.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char56 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test163"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    java.lang.String str8 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender9 = null;
    org.bukkit.command.Command command10 = null;
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    char char14 = i18n12.getColorChar();
    char char15 = i18n12.getColorChar();
    char char16 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n17.getBundleCache$spigot_1_8();
    java.lang.String[] str_array19 = new java.lang.String[] {  };
    java.lang.String[] str_array21 = i18n17.getStrings(str_array19, "hi!");
    java.lang.String[] str_array23 = i18n12.getStrings(str_array21, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    char char26 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n24.getBundleCache$spigot_1_8();
    char char28 = i18n24.getColorChar();
    char char29 = i18n24.getColorChar();
    char char30 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    char char33 = i18n31.getColorChar();
    char char34 = i18n31.getColorChar();
    char char35 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n36.getBundleCache$spigot_1_8();
    java.lang.String[] str_array38 = new java.lang.String[] {  };
    java.lang.String[] str_array40 = i18n36.getStrings(str_array38, "hi!");
    java.lang.String[] str_array42 = i18n31.getStrings(str_array40, "GMCrx");
    java.lang.String[] str_array44 = i18n24.getStrings(str_array40, "friends");
    java.lang.String[] str_array46 = i18n12.getStrings(str_array44, "");
    // The following exception was thrown during execution in test generation
    try {
    boolean b47 = commandLobby0.execute(commandSender9, command10, "GMChide", str_array46);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lobby"+ "'", str8.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test164"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    java.lang.String str8 = commandVanish0.getName();
    java.lang.String str9 = commandVanish0.getName();
    java.lang.String str10 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender11 = null;
    org.bukkit.command.Command command12 = null;
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n14.getBundleCache$spigot_1_8();
    java.lang.String[] str_array16 = new java.lang.String[] {  };
    java.lang.String[] str_array18 = i18n14.getStrings(str_array16, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n20.getBundleCache$spigot_1_8();
    char char23 = i18n20.getColorChar();
    char char24 = i18n20.getColorChar();
    char char25 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n27.getBundleCache$spigot_1_8();
    char char30 = i18n27.getColorChar();
    char char31 = i18n27.getColorChar();
    char char32 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n27.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n27.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n35 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char36 = i18n35.getColorChar();
    char char37 = i18n35.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache38 = i18n35.getBundleCache$spigot_1_8();
    char char39 = i18n35.getColorChar();
    char char40 = i18n35.getColorChar();
    char char41 = i18n35.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n42 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char43 = i18n42.getColorChar();
    char char44 = i18n42.getColorChar();
    char char45 = i18n42.getColorChar();
    char char46 = i18n42.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n47 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache48 = i18n47.getBundleCache$spigot_1_8();
    java.lang.String[] str_array49 = new java.lang.String[] {  };
    java.lang.String[] str_array51 = i18n47.getStrings(str_array49, "hi!");
    java.lang.String[] str_array53 = i18n42.getStrings(str_array51, "GMCrx");
    java.lang.String[] str_array55 = i18n35.getStrings(str_array51, "friends");
    java.lang.String[] str_array57 = i18n27.getStrings(str_array55, "GMCt");
    java.lang.String[] str_array59 = i18n20.getStrings(str_array55, "friend");
    java.lang.String[] str_array61 = i18n14.getStrings(str_array55, "GMCt");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str62 = commandVanish0.getTabCompletion(commandSender11, command12, "GMC", str_array61);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "vanish"+ "'", str9.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "vanish"+ "'", str10.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test165"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = i18n0.getBundleCache$spigot_1_8();
    char char2 = i18n0.getColorChar();
    char char3 = i18n0.getColorChar();
    java.util.Locale locale5 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str6 = i18n0.getString("GMCy", locale5);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test166"); }

    org.joda.time.DateTime dateTime2 = null;
    // The following exception was thrown during execution in test generation
    try {
    gtlp.groundmc.lobby.Relationship relationship3 = new gtlp.groundmc.lobby.Relationship("GMCry", "lobby", dateTime2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test167"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    java.lang.String str8 = commandFriend0.getName();
    java.lang.String str9 = commandFriend0.getName();
    java.lang.String str10 = commandFriend0.getName();
    java.lang.String str11 = commandFriend0.getName();
    java.lang.String str12 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender13 = null;
    org.bukkit.command.Command command14 = null;
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n16.getBundleCache$spigot_1_8();
    char char19 = i18n16.getColorChar();
    char char20 = i18n16.getColorChar();
    char char21 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    char char26 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n24.getBundleCache$spigot_1_8();
    char char28 = i18n24.getColorChar();
    char char29 = i18n24.getColorChar();
    char char30 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    char char33 = i18n31.getColorChar();
    char char34 = i18n31.getColorChar();
    char char35 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n36.getBundleCache$spigot_1_8();
    java.lang.String[] str_array38 = new java.lang.String[] {  };
    java.lang.String[] str_array40 = i18n36.getStrings(str_array38, "hi!");
    java.lang.String[] str_array42 = i18n31.getStrings(str_array40, "GMCrx");
    java.lang.String[] str_array44 = i18n24.getStrings(str_array40, "friends");
    java.lang.String[] str_array46 = i18n16.getStrings(str_array44, "GMCt");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str47 = commandFriend0.getTabCompletion(commandSender13, command14, "groundmc.lobby.vanish", str_array44);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friend"+ "'", str8.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "friend"+ "'", str9.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "friend"+ "'", str10.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "friend"+ "'", str11.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "friend"+ "'", str12.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test168"); }

    gtlp.groundmc.lobby.registry.LobbyCommandRegistry.Companion companion0 = gtlp.groundmc.lobby.registry.LobbyCommandRegistry.Companion;
    gtlp.groundmc.lobby.commands.CommandCoins commandCoins1 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str2 = commandCoins1.getName();
    java.lang.String str3 = commandCoins1.getName();
    java.lang.String str4 = commandCoins1.getName();
    java.lang.String str5 = commandCoins1.getName();
    java.lang.String str6 = commandCoins1.getName();
    java.lang.String str7 = commandCoins1.getName();
    java.lang.String str8 = commandCoins1.getName();
    java.lang.String str9 = commandCoins1.getName();
    java.lang.String str10 = commandCoins1.getName();
    java.lang.String str11 = commandCoins1.getName();
    // The following exception was thrown during execution in test generation
    try {
    companion0.registerCommand((gtlp.groundmc.lobby.commands.ILobbyCommand)commandCoins1);
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(companion0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "coins"+ "'", str10.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "coins"+ "'", str11.equals("coins"));

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test169"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    char char4 = i18n0.getColorChar();
    char char5 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n0.getBundleCache$spigot_1_8();
    java.util.Locale locale8 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str9 = resourceBundleCache6.get("coins", locale8);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test170"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char7 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n6.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n6.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n6.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n6.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n12.getBundleCache$spigot_1_8();
    char char16 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    char char19 = i18n17.getColorChar();
    char char20 = i18n17.getColorChar();
    char char21 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n22.getBundleCache$spigot_1_8();
    java.lang.String[] str_array24 = new java.lang.String[] {  };
    java.lang.String[] str_array26 = i18n22.getStrings(str_array24, "hi!");
    java.lang.String[] str_array28 = i18n17.getStrings(str_array26, "GMCrx");
    java.lang.String[] str_array30 = i18n12.getStrings(str_array26, "GMC");
    java.lang.String[] str_array32 = i18n6.getStrings(str_array26, "GMCw");
    java.lang.String[] str_array34 = i18n0.getStrings(str_array32, "GMCy");
    gtlp.groundmc.lobby.util.I18n i18n35 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char36 = i18n35.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n35.getBundleCache$spigot_1_8();
    char char38 = i18n35.getColorChar();
    char char39 = i18n35.getColorChar();
    char char40 = i18n35.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache41 = i18n35.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n35.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n43 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char44 = i18n43.getColorChar();
    char char45 = i18n43.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache46 = i18n43.getBundleCache$spigot_1_8();
    char char47 = i18n43.getColorChar();
    char char48 = i18n43.getColorChar();
    char char49 = i18n43.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n50 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char51 = i18n50.getColorChar();
    char char52 = i18n50.getColorChar();
    char char53 = i18n50.getColorChar();
    char char54 = i18n50.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n55 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache56 = i18n55.getBundleCache$spigot_1_8();
    java.lang.String[] str_array57 = new java.lang.String[] {  };
    java.lang.String[] str_array59 = i18n55.getStrings(str_array57, "hi!");
    java.lang.String[] str_array61 = i18n50.getStrings(str_array59, "GMCrx");
    java.lang.String[] str_array63 = i18n43.getStrings(str_array59, "friends");
    java.lang.String[] str_array65 = i18n35.getStrings(str_array63, "GMCt");
    java.lang.String[] str_array67 = i18n0.getStrings(str_array65, "coins");
    java.util.Locale locale69 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str70 = i18n0.getString("GMChide", locale69);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test171"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    java.lang.String[] str_array4 = null;
    java.util.Locale locale5 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array6 = i18n0.getStrings(str_array4, locale5);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test172"); }

    org.joda.time.DateTime dateTime2 = null;
    // The following exception was thrown during execution in test generation
    try {
    gtlp.groundmc.lobby.Relationship relationship3 = new gtlp.groundmc.lobby.Relationship("GMCsilent", "groundmc.lobby.silent", dateTime2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test173"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    java.lang.String str8 = commandLobby0.getName();
    java.lang.String str9 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender10 = null;
    org.bukkit.command.Command command11 = null;
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n13.getBundleCache$spigot_1_8();
    char char16 = i18n13.getColorChar();
    char char17 = i18n13.getColorChar();
    char char18 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n20.getBundleCache$spigot_1_8();
    char char23 = i18n20.getColorChar();
    char char24 = i18n20.getColorChar();
    char char25 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char29 = i18n28.getColorChar();
    char char30 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n28.getBundleCache$spigot_1_8();
    char char32 = i18n28.getColorChar();
    char char33 = i18n28.getColorChar();
    char char34 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n35 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char36 = i18n35.getColorChar();
    char char37 = i18n35.getColorChar();
    char char38 = i18n35.getColorChar();
    char char39 = i18n35.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache41 = i18n40.getBundleCache$spigot_1_8();
    java.lang.String[] str_array42 = new java.lang.String[] {  };
    java.lang.String[] str_array44 = i18n40.getStrings(str_array42, "hi!");
    java.lang.String[] str_array46 = i18n35.getStrings(str_array44, "GMCrx");
    java.lang.String[] str_array48 = i18n28.getStrings(str_array44, "friends");
    java.lang.String[] str_array50 = i18n20.getStrings(str_array48, "GMCt");
    java.lang.String[] str_array52 = i18n13.getStrings(str_array48, "friend");
    gtlp.groundmc.lobby.util.I18n i18n53 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char54 = i18n53.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache55 = i18n53.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache56 = i18n53.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache57 = i18n53.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache58 = i18n53.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n59 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char60 = i18n59.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache61 = i18n59.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache62 = i18n59.getBundleCache$spigot_1_8();
    char char63 = i18n59.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n64 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char65 = i18n64.getColorChar();
    char char66 = i18n64.getColorChar();
    char char67 = i18n64.getColorChar();
    char char68 = i18n64.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n69 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache70 = i18n69.getBundleCache$spigot_1_8();
    java.lang.String[] str_array71 = new java.lang.String[] {  };
    java.lang.String[] str_array73 = i18n69.getStrings(str_array71, "hi!");
    java.lang.String[] str_array75 = i18n64.getStrings(str_array73, "GMCrx");
    java.lang.String[] str_array77 = i18n59.getStrings(str_array73, "GMC");
    java.lang.String[] str_array79 = i18n53.getStrings(str_array73, "GMCw");
    java.lang.String[] str_array81 = i18n13.getStrings(str_array79, "groundmc.lobby.admin");
    // The following exception was thrown during execution in test generation
    try {
    boolean b82 = commandLobby0.execute(commandSender10, command11, "GMCw", str_array81);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lobby"+ "'", str8.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "lobby"+ "'", str9.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char67 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test174"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = i18n0.getBundleCache$spigot_1_8();
    java.lang.String[] str_array2 = new java.lang.String[] {  };
    java.lang.String[] str_array4 = i18n0.getStrings(str_array2, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n0.getBundleCache$spigot_1_8();
    char char7 = i18n0.getColorChar();
    char char8 = i18n0.getColorChar();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str11 = i18n0.getString("friend", "GMCry");
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test175"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    java.lang.String str9 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender10 = null;
    org.bukkit.command.Command command11 = null;
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n13.getBundleCache$spigot_1_8();
    char char16 = i18n13.getColorChar();
    char char17 = i18n13.getColorChar();
    char char18 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n20.getBundleCache$spigot_1_8();
    char char23 = i18n20.getColorChar();
    char char24 = i18n20.getColorChar();
    char char25 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char29 = i18n28.getColorChar();
    char char30 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n28.getBundleCache$spigot_1_8();
    char char32 = i18n28.getColorChar();
    char char33 = i18n28.getColorChar();
    char char34 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n35 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char36 = i18n35.getColorChar();
    char char37 = i18n35.getColorChar();
    char char38 = i18n35.getColorChar();
    char char39 = i18n35.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache41 = i18n40.getBundleCache$spigot_1_8();
    java.lang.String[] str_array42 = new java.lang.String[] {  };
    java.lang.String[] str_array44 = i18n40.getStrings(str_array42, "hi!");
    java.lang.String[] str_array46 = i18n35.getStrings(str_array44, "GMCrx");
    java.lang.String[] str_array48 = i18n28.getStrings(str_array44, "friends");
    java.lang.String[] str_array50 = i18n20.getStrings(str_array48, "GMCt");
    java.lang.String[] str_array52 = i18n13.getStrings(str_array48, "friend");
    // The following exception was thrown during execution in test generation
    try {
    boolean b53 = commandCoins0.execute(commandSender10, command11, "groundmc.lobby.silent", str_array48);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test176"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    java.lang.String str6 = commandFriends0.getName();
    java.lang.String str7 = commandFriends0.getName();
    java.lang.String str8 = commandFriends0.getName();
    java.lang.String str9 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender10 = null;
    org.bukkit.command.Command command11 = null;
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n13.getBundleCache$spigot_1_8();
    char char17 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    char char22 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n20.getBundleCache$spigot_1_8();
    char char25 = i18n20.getColorChar();
    char char26 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    char char29 = i18n27.getColorChar();
    char char30 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n27.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char33 = i18n32.getColorChar();
    char char34 = i18n32.getColorChar();
    char char35 = i18n32.getColorChar();
    char char36 = i18n32.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n37 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache38 = i18n37.getBundleCache$spigot_1_8();
    java.lang.String[] str_array39 = new java.lang.String[] {  };
    java.lang.String[] str_array41 = i18n37.getStrings(str_array39, "hi!");
    java.lang.String[] str_array43 = i18n32.getStrings(str_array41, "GMCrx");
    java.lang.String[] str_array45 = i18n27.getStrings(str_array43, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n46 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache47 = i18n46.getBundleCache$spigot_1_8();
    java.lang.String[] str_array48 = new java.lang.String[] {  };
    java.lang.String[] str_array50 = i18n46.getStrings(str_array48, "hi!");
    java.lang.String[] str_array52 = i18n27.getStrings(str_array50, "groundmc.lobby.hide_players");
    java.lang.String[] str_array54 = i18n20.getStrings(str_array52, "lang.lobby");
    java.lang.String[] str_array56 = i18n13.getStrings(str_array54, "hi!");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str57 = commandFriends0.getTabCompletion(commandSender10, command11, "lobby", str_array56);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friends"+ "'", str7.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friends"+ "'", str8.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "friends"+ "'", str9.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test177"); }

    org.joda.time.DateTime dateTime2 = null;
    // The following exception was thrown during execution in test generation
    try {
    gtlp.groundmc.lobby.Relationship relationship3 = new gtlp.groundmc.lobby.Relationship("friends", "GMCz", dateTime2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test178"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    java.lang.String str6 = commandFriends0.getName();
    java.lang.String str7 = commandFriends0.getName();
    java.lang.String str8 = commandFriends0.getName();
    java.lang.String str9 = commandFriends0.getName();
    java.util.Locale locale10 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array11 = commandFriends0.getCommandHelp(locale10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friends"+ "'", str7.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friends"+ "'", str8.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "friends"+ "'", str9.equals("friends"));

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test179"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    java.lang.String str6 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender7 = null;
    org.bukkit.command.Command command8 = null;
    java.lang.String[] str_array10 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b11 = commandFriends0.execute(commandSender7, command8, "vanish", str_array10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test180"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender5 = null;
    org.bukkit.command.Command command6 = null;
    gtlp.groundmc.lobby.util.I18n i18n8 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n8.getBundleCache$spigot_1_8();
    java.lang.String[] str_array10 = new java.lang.String[] {  };
    java.lang.String[] str_array12 = i18n8.getStrings(str_array10, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n8.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n8.getBundleCache$spigot_1_8();
    char char15 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n20.getBundleCache$spigot_1_8();
    java.lang.String[] str_array22 = new java.lang.String[] {  };
    java.lang.String[] str_array24 = i18n20.getStrings(str_array22, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n26.getBundleCache$spigot_1_8();
    char char29 = i18n26.getColorChar();
    char char30 = i18n26.getColorChar();
    char char31 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n26.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char34 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n33.getBundleCache$spigot_1_8();
    char char36 = i18n33.getColorChar();
    char char37 = i18n33.getColorChar();
    char char38 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache39 = i18n33.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache40 = i18n33.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n41 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char42 = i18n41.getColorChar();
    char char43 = i18n41.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache44 = i18n41.getBundleCache$spigot_1_8();
    char char45 = i18n41.getColorChar();
    char char46 = i18n41.getColorChar();
    char char47 = i18n41.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n48 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char49 = i18n48.getColorChar();
    char char50 = i18n48.getColorChar();
    char char51 = i18n48.getColorChar();
    char char52 = i18n48.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n53 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache54 = i18n53.getBundleCache$spigot_1_8();
    java.lang.String[] str_array55 = new java.lang.String[] {  };
    java.lang.String[] str_array57 = i18n53.getStrings(str_array55, "hi!");
    java.lang.String[] str_array59 = i18n48.getStrings(str_array57, "GMCrx");
    java.lang.String[] str_array61 = i18n41.getStrings(str_array57, "friends");
    java.lang.String[] str_array63 = i18n33.getStrings(str_array61, "GMCt");
    java.lang.String[] str_array65 = i18n26.getStrings(str_array61, "friend");
    java.lang.String[] str_array67 = i18n20.getStrings(str_array61, "GMCt");
    java.lang.String[] str_array69 = i18n16.getStrings(str_array61, "groundmc.lobby.admin");
    java.lang.String[] str_array71 = i18n8.getStrings(str_array69, "lang.lobby");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str72 = commandLobby0.getTabCompletion(commandSender5, command6, "coins", str_array69);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test181"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    java.lang.String str6 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender7 = null;
    org.bukkit.command.Command command8 = null;
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    char char12 = i18n10.getColorChar();
    char char13 = i18n10.getColorChar();
    char char14 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n15.getBundleCache$spigot_1_8();
    java.lang.String[] str_array17 = new java.lang.String[] {  };
    java.lang.String[] str_array19 = i18n15.getStrings(str_array17, "hi!");
    java.lang.String[] str_array21 = i18n10.getStrings(str_array19, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    char char24 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n22.getBundleCache$spigot_1_8();
    char char26 = i18n22.getColorChar();
    char char27 = i18n22.getColorChar();
    char char28 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char30 = i18n29.getColorChar();
    char char31 = i18n29.getColorChar();
    char char32 = i18n29.getColorChar();
    char char33 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n34 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n34.getBundleCache$spigot_1_8();
    java.lang.String[] str_array36 = new java.lang.String[] {  };
    java.lang.String[] str_array38 = i18n34.getStrings(str_array36, "hi!");
    java.lang.String[] str_array40 = i18n29.getStrings(str_array38, "GMCrx");
    java.lang.String[] str_array42 = i18n22.getStrings(str_array38, "friends");
    java.lang.String[] str_array44 = i18n10.getStrings(str_array42, "");
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char46 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache47 = i18n45.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache48 = i18n45.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache49 = i18n45.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache50 = i18n45.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n51 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char52 = i18n51.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache53 = i18n51.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache54 = i18n51.getBundleCache$spigot_1_8();
    char char55 = i18n51.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n56 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char57 = i18n56.getColorChar();
    char char58 = i18n56.getColorChar();
    char char59 = i18n56.getColorChar();
    char char60 = i18n56.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n61 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache62 = i18n61.getBundleCache$spigot_1_8();
    java.lang.String[] str_array63 = new java.lang.String[] {  };
    java.lang.String[] str_array65 = i18n61.getStrings(str_array63, "hi!");
    java.lang.String[] str_array67 = i18n56.getStrings(str_array65, "GMCrx");
    java.lang.String[] str_array69 = i18n51.getStrings(str_array65, "GMC");
    java.lang.String[] str_array71 = i18n45.getStrings(str_array65, "GMCw");
    java.lang.String[] str_array73 = i18n10.getStrings(str_array71, "GMCz");
    // The following exception was thrown during execution in test generation
    try {
    boolean b74 = commandFriends0.execute(commandSender7, command8, "GMCsilent", str_array73);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test182"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    char char4 = i18n0.getColorChar();
    char char5 = i18n0.getColorChar();
    char char6 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char8 = i18n7.getColorChar();
    char char9 = i18n7.getColorChar();
    char char10 = i18n7.getColorChar();
    char char11 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n12.getBundleCache$spigot_1_8();
    java.lang.String[] str_array14 = new java.lang.String[] {  };
    java.lang.String[] str_array16 = i18n12.getStrings(str_array14, "hi!");
    java.lang.String[] str_array18 = i18n7.getStrings(str_array16, "GMCrx");
    java.lang.String[] str_array20 = i18n0.getStrings(str_array16, "friends");
    char char21 = i18n0.getColorChar();
    char char22 = i18n0.getColorChar();
    java.lang.String[] str_array23 = null;
    java.util.Locale locale24 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array25 = i18n0.getStrings(str_array23, locale24);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test183"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = i18n0.getBundleCache$spigot_1_8();
    java.lang.String[] str_array2 = new java.lang.String[] {  };
    java.lang.String[] str_array4 = i18n0.getStrings(str_array2, "hi!");
    char char5 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char7 = i18n6.getColorChar();
    char char8 = i18n6.getColorChar();
    char char9 = i18n6.getColorChar();
    char char10 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n11.getBundleCache$spigot_1_8();
    java.lang.String[] str_array13 = new java.lang.String[] {  };
    java.lang.String[] str_array15 = i18n11.getStrings(str_array13, "hi!");
    java.lang.String[] str_array17 = i18n6.getStrings(str_array15, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n18.getBundleCache$spigot_1_8();
    char char22 = i18n18.getColorChar();
    char char23 = i18n18.getColorChar();
    char char24 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    char char27 = i18n25.getColorChar();
    char char28 = i18n25.getColorChar();
    char char29 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n30.getBundleCache$spigot_1_8();
    java.lang.String[] str_array32 = new java.lang.String[] {  };
    java.lang.String[] str_array34 = i18n30.getStrings(str_array32, "hi!");
    java.lang.String[] str_array36 = i18n25.getStrings(str_array34, "GMCrx");
    java.lang.String[] str_array38 = i18n18.getStrings(str_array34, "friends");
    java.lang.String[] str_array40 = i18n6.getStrings(str_array38, "");
    java.util.Locale locale41 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array42 = i18n0.getStrings(str_array38, locale41);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test184"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    java.lang.String str9 = commandCoins0.getName();
    java.lang.String str10 = commandCoins0.getName();
    java.lang.String str11 = commandCoins0.getName();
    java.lang.String str12 = commandCoins0.getName();
    java.lang.String str13 = commandCoins0.getName();
    java.lang.String str14 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender15 = null;
    org.bukkit.command.Command command16 = null;
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    char char21 = i18n18.getColorChar();
    char char22 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n23.getBundleCache$spigot_1_8();
    java.lang.String[] str_array25 = new java.lang.String[] {  };
    java.lang.String[] str_array27 = i18n23.getStrings(str_array25, "hi!");
    java.lang.String[] str_array29 = i18n18.getStrings(str_array27, "GMCrx");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str30 = commandCoins0.getTabCompletion(commandSender15, command16, "GMCy", str_array27);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "coins"+ "'", str10.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "coins"+ "'", str11.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "coins"+ "'", str12.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "coins"+ "'", str13.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "coins"+ "'", str14.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test185"); }

    org.joda.time.DateTime dateTime2 = null;
    // The following exception was thrown during execution in test generation
    try {
    gtlp.groundmc.lobby.Relationship relationship3 = new gtlp.groundmc.lobby.Relationship("lang.lobby", "lang.lobby", dateTime2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test186"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    java.lang.String str9 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender10 = null;
    org.bukkit.command.Command command11 = null;
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    char char15 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n13.getBundleCache$spigot_1_8();
    char char17 = i18n13.getColorChar();
    char char18 = i18n13.getColorChar();
    char char19 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    char char22 = i18n20.getColorChar();
    char char23 = i18n20.getColorChar();
    char char24 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n25.getBundleCache$spigot_1_8();
    java.lang.String[] str_array27 = new java.lang.String[] {  };
    java.lang.String[] str_array29 = i18n25.getStrings(str_array27, "hi!");
    java.lang.String[] str_array31 = i18n20.getStrings(str_array29, "GMCrx");
    java.lang.String[] str_array33 = i18n13.getStrings(str_array29, "friends");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char37 = i18n36.getColorChar();
    char char38 = i18n36.getColorChar();
    char char39 = i18n36.getColorChar();
    char char40 = i18n36.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n41 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n41.getBundleCache$spigot_1_8();
    java.lang.String[] str_array43 = new java.lang.String[] {  };
    java.lang.String[] str_array45 = i18n41.getStrings(str_array43, "hi!");
    java.lang.String[] str_array47 = i18n36.getStrings(str_array45, "GMCrx");
    java.lang.String[] str_array49 = i18n13.getStrings(str_array47, "");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str50 = commandCoins0.getTabCompletion(commandSender10, command11, "friend", str_array49);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test187"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    char char5 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n8 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char9 = i18n8.getColorChar();
    char char10 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n8.getBundleCache$spigot_1_8();
    char char12 = i18n8.getColorChar();
    char char13 = i18n8.getColorChar();
    char char14 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    char char17 = i18n15.getColorChar();
    char char18 = i18n15.getColorChar();
    char char19 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n20.getBundleCache$spigot_1_8();
    java.lang.String[] str_array22 = new java.lang.String[] {  };
    java.lang.String[] str_array24 = i18n20.getStrings(str_array22, "hi!");
    java.lang.String[] str_array26 = i18n15.getStrings(str_array24, "GMCrx");
    java.lang.String[] str_array28 = i18n8.getStrings(str_array24, "friends");
    java.lang.String[] str_array30 = i18n0.getStrings(str_array28, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n31.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n31.getBundleCache$spigot_1_8();
    char char35 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char37 = i18n36.getColorChar();
    char char38 = i18n36.getColorChar();
    char char39 = i18n36.getColorChar();
    char char40 = i18n36.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n41 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n41.getBundleCache$spigot_1_8();
    java.lang.String[] str_array43 = new java.lang.String[] {  };
    java.lang.String[] str_array45 = i18n41.getStrings(str_array43, "hi!");
    java.lang.String[] str_array47 = i18n36.getStrings(str_array45, "GMCrx");
    java.lang.String[] str_array49 = i18n31.getStrings(str_array45, "GMC");
    java.lang.String[] str_array51 = i18n0.getStrings(str_array49, "groundmc.lobby.vanish");
    gtlp.groundmc.lobby.util.I18n i18n52 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char53 = i18n52.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache54 = i18n52.getBundleCache$spigot_1_8();
    char char55 = i18n52.getColorChar();
    char char56 = i18n52.getColorChar();
    char char57 = i18n52.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n58 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache59 = i18n58.getBundleCache$spigot_1_8();
    java.lang.String[] str_array60 = new java.lang.String[] {  };
    java.lang.String[] str_array62 = i18n58.getStrings(str_array60, "hi!");
    java.lang.String[] str_array64 = i18n52.getStrings(str_array62, "GMCy");
    java.lang.String[] str_array66 = i18n0.getStrings(str_array62, "");
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str69 = i18n0.getString("lang.lobby", "GMChide");
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char56 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test188"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    java.lang.String str8 = commandVanish0.getName();
    java.lang.String str9 = commandVanish0.getName();
    java.lang.String str10 = commandVanish0.getName();
    java.lang.String str11 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender12 = null;
    org.bukkit.command.Command command13 = null;
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n19.getBundleCache$spigot_1_8();
    java.lang.String[] str_array21 = new java.lang.String[] {  };
    java.lang.String[] str_array23 = i18n19.getStrings(str_array21, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n19.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n25.getBundleCache$spigot_1_8();
    char char28 = i18n25.getColorChar();
    char char29 = i18n25.getColorChar();
    char char30 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n25.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char33 = i18n32.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n32.getBundleCache$spigot_1_8();
    char char35 = i18n32.getColorChar();
    char char36 = i18n32.getColorChar();
    char char37 = i18n32.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache38 = i18n32.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache39 = i18n32.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char41 = i18n40.getColorChar();
    char char42 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache43 = i18n40.getBundleCache$spigot_1_8();
    char char44 = i18n40.getColorChar();
    char char45 = i18n40.getColorChar();
    char char46 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n47 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char48 = i18n47.getColorChar();
    char char49 = i18n47.getColorChar();
    char char50 = i18n47.getColorChar();
    char char51 = i18n47.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n52 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache53 = i18n52.getBundleCache$spigot_1_8();
    java.lang.String[] str_array54 = new java.lang.String[] {  };
    java.lang.String[] str_array56 = i18n52.getStrings(str_array54, "hi!");
    java.lang.String[] str_array58 = i18n47.getStrings(str_array56, "GMCrx");
    java.lang.String[] str_array60 = i18n40.getStrings(str_array56, "friends");
    java.lang.String[] str_array62 = i18n32.getStrings(str_array60, "GMCt");
    java.lang.String[] str_array64 = i18n25.getStrings(str_array60, "friend");
    java.lang.String[] str_array66 = i18n19.getStrings(str_array60, "GMCt");
    java.lang.String[] str_array68 = i18n15.getStrings(str_array60, "groundmc.lobby.admin");
    // The following exception was thrown during execution in test generation
    try {
    boolean b69 = commandVanish0.execute(commandSender12, command13, "hi!", str_array68);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "vanish"+ "'", str9.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "vanish"+ "'", str10.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "vanish"+ "'", str11.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test189"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    java.util.Locale locale4 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str5 = resourceBundleCache2.get("GMCrx", locale4);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test190"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    java.lang.String str8 = commandLobby0.getName();
    java.lang.String str9 = commandLobby0.getName();
    java.lang.String str10 = commandLobby0.getName();
    java.lang.String str11 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender12 = null;
    org.bukkit.command.Command command13 = null;
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    char char17 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n15.getBundleCache$spigot_1_8();
    char char19 = i18n15.getColorChar();
    char char20 = i18n15.getColorChar();
    char char21 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    char char24 = i18n22.getColorChar();
    char char25 = i18n22.getColorChar();
    char char26 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n27.getBundleCache$spigot_1_8();
    java.lang.String[] str_array29 = new java.lang.String[] {  };
    java.lang.String[] str_array31 = i18n27.getStrings(str_array29, "hi!");
    java.lang.String[] str_array33 = i18n22.getStrings(str_array31, "GMCrx");
    java.lang.String[] str_array35 = i18n15.getStrings(str_array31, "friends");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str36 = commandLobby0.getTabCompletion(commandSender12, command13, "groundmc.lobby.hide_players", str_array31);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lobby"+ "'", str8.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "lobby"+ "'", str9.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "lobby"+ "'", str10.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "lobby"+ "'", str11.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test191"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender9 = null;
    org.bukkit.command.Command command10 = null;
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n12.getBundleCache$spigot_1_8();
    char char16 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    char char19 = i18n17.getColorChar();
    char char20 = i18n17.getColorChar();
    char char21 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n22.getBundleCache$spigot_1_8();
    java.lang.String[] str_array24 = new java.lang.String[] {  };
    java.lang.String[] str_array26 = i18n22.getStrings(str_array24, "hi!");
    java.lang.String[] str_array28 = i18n17.getStrings(str_array26, "GMCrx");
    java.lang.String[] str_array30 = i18n12.getStrings(str_array26, "GMC");
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    char char33 = i18n31.getColorChar();
    char char34 = i18n31.getColorChar();
    char char35 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n36.getBundleCache$spigot_1_8();
    java.lang.String[] str_array38 = new java.lang.String[] {  };
    java.lang.String[] str_array40 = i18n36.getStrings(str_array38, "hi!");
    java.lang.String[] str_array42 = i18n31.getStrings(str_array40, "GMCrx");
    java.lang.String[] str_array44 = i18n12.getStrings(str_array40, "GMCz");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str45 = commandCoins0.getTabCompletion(commandSender9, command10, "", str_array40);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test192"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    char char3 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    char char7 = i18n5.getColorChar();
    char char8 = i18n5.getColorChar();
    char char9 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n10.getBundleCache$spigot_1_8();
    java.lang.String[] str_array12 = new java.lang.String[] {  };
    java.lang.String[] str_array14 = i18n10.getStrings(str_array12, "hi!");
    java.lang.String[] str_array16 = i18n5.getStrings(str_array14, "GMCrx");
    java.lang.String[] str_array18 = i18n0.getStrings(str_array16, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n19.getBundleCache$spigot_1_8();
    java.lang.String[] str_array21 = new java.lang.String[] {  };
    java.lang.String[] str_array23 = i18n19.getStrings(str_array21, "hi!");
    java.lang.String[] str_array25 = i18n0.getStrings(str_array23, "groundmc.lobby.hide_players");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n0.getBundleCache$spigot_1_8();
    char char27 = i18n0.getColorChar();
    char char28 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n0.getBundleCache$spigot_1_8();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str32 = i18n0.getString("groundmc.lobby.vanish", "GMC");
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test193"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    java.lang.String str9 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender10 = null;
    org.bukkit.command.Command command11 = null;
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n13.getBundleCache$spigot_1_8();
    char char16 = i18n13.getColorChar();
    char char17 = i18n13.getColorChar();
    char char18 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char22 = i18n21.getColorChar();
    char char23 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n21.getBundleCache$spigot_1_8();
    char char25 = i18n21.getColorChar();
    char char26 = i18n21.getColorChar();
    char char27 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char29 = i18n28.getColorChar();
    char char30 = i18n28.getColorChar();
    char char31 = i18n28.getColorChar();
    char char32 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n33.getBundleCache$spigot_1_8();
    java.lang.String[] str_array35 = new java.lang.String[] {  };
    java.lang.String[] str_array37 = i18n33.getStrings(str_array35, "hi!");
    java.lang.String[] str_array39 = i18n28.getStrings(str_array37, "GMCrx");
    java.lang.String[] str_array41 = i18n21.getStrings(str_array37, "friends");
    java.lang.String[] str_array43 = i18n13.getStrings(str_array41, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n44 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char45 = i18n44.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache46 = i18n44.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache47 = i18n44.getBundleCache$spigot_1_8();
    char char48 = i18n44.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n49 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char50 = i18n49.getColorChar();
    char char51 = i18n49.getColorChar();
    char char52 = i18n49.getColorChar();
    char char53 = i18n49.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n54 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache55 = i18n54.getBundleCache$spigot_1_8();
    java.lang.String[] str_array56 = new java.lang.String[] {  };
    java.lang.String[] str_array58 = i18n54.getStrings(str_array56, "hi!");
    java.lang.String[] str_array60 = i18n49.getStrings(str_array58, "GMCrx");
    java.lang.String[] str_array62 = i18n44.getStrings(str_array58, "GMC");
    java.lang.String[] str_array64 = i18n13.getStrings(str_array62, "groundmc.lobby.vanish");
    gtlp.groundmc.lobby.util.I18n i18n65 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char66 = i18n65.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache67 = i18n65.getBundleCache$spigot_1_8();
    char char68 = i18n65.getColorChar();
    char char69 = i18n65.getColorChar();
    char char70 = i18n65.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n71 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache72 = i18n71.getBundleCache$spigot_1_8();
    java.lang.String[] str_array73 = new java.lang.String[] {  };
    java.lang.String[] str_array75 = i18n71.getStrings(str_array73, "hi!");
    java.lang.String[] str_array77 = i18n65.getStrings(str_array75, "GMCy");
    java.lang.String[] str_array79 = i18n13.getStrings(str_array75, "");
    // The following exception was thrown during execution in test generation
    try {
    boolean b80 = commandCoins0.execute(commandSender10, command11, "vanish", str_array79);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char69 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char70 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test194"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    org.bukkit.command.CommandSender commandSender1 = null;
    org.bukkit.command.Command command2 = null;
    gtlp.groundmc.lobby.util.I18n i18n4 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char5 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n4.getBundleCache$spigot_1_8();
    char char7 = i18n4.getColorChar();
    char char8 = i18n4.getColorChar();
    char char9 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    char char13 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n16.getBundleCache$spigot_1_8();
    char char19 = i18n16.getColorChar();
    char char20 = i18n16.getColorChar();
    char char21 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n23.getBundleCache$spigot_1_8();
    char char26 = i18n23.getColorChar();
    char char27 = i18n23.getColorChar();
    char char28 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n23.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n23.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    char char33 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n31.getBundleCache$spigot_1_8();
    char char35 = i18n31.getColorChar();
    char char36 = i18n31.getColorChar();
    char char37 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n38 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char39 = i18n38.getColorChar();
    char char40 = i18n38.getColorChar();
    char char41 = i18n38.getColorChar();
    char char42 = i18n38.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n43 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache44 = i18n43.getBundleCache$spigot_1_8();
    java.lang.String[] str_array45 = new java.lang.String[] {  };
    java.lang.String[] str_array47 = i18n43.getStrings(str_array45, "hi!");
    java.lang.String[] str_array49 = i18n38.getStrings(str_array47, "GMCrx");
    java.lang.String[] str_array51 = i18n31.getStrings(str_array47, "friends");
    java.lang.String[] str_array53 = i18n23.getStrings(str_array51, "GMCt");
    java.lang.String[] str_array55 = i18n16.getStrings(str_array51, "friend");
    gtlp.groundmc.lobby.util.I18n i18n56 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char57 = i18n56.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache58 = i18n56.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache59 = i18n56.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache60 = i18n56.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache61 = i18n56.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n62 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char63 = i18n62.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache64 = i18n62.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache65 = i18n62.getBundleCache$spigot_1_8();
    char char66 = i18n62.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n67 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char68 = i18n67.getColorChar();
    char char69 = i18n67.getColorChar();
    char char70 = i18n67.getColorChar();
    char char71 = i18n67.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n72 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache73 = i18n72.getBundleCache$spigot_1_8();
    java.lang.String[] str_array74 = new java.lang.String[] {  };
    java.lang.String[] str_array76 = i18n72.getStrings(str_array74, "hi!");
    java.lang.String[] str_array78 = i18n67.getStrings(str_array76, "GMCrx");
    java.lang.String[] str_array80 = i18n62.getStrings(str_array76, "GMC");
    java.lang.String[] str_array82 = i18n56.getStrings(str_array76, "GMCw");
    java.lang.String[] str_array84 = i18n16.getStrings(str_array82, "groundmc.lobby.admin");
    java.lang.String[] str_array86 = i18n11.getStrings(str_array82, "GMCry");
    java.lang.String[] str_array88 = i18n4.getStrings(str_array86, "groundmc.lobby.silent");
    // The following exception was thrown during execution in test generation
    try {
    boolean b89 = commandFriends0.execute(commandSender1, command2, "GMCx", str_array88);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char69 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char70 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char71 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test195"); }

    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = new gtlp.groundmc.lobby.util.I18n.ResourceBundleCache("groundmc.lobby.silent");
    java.util.concurrent.ConcurrentHashMap<java.util.Locale,java.util.ResourceBundle> concurrenthashmap_locale_resourceBundle2 = resourceBundleCache1.getBackingMap$spigot_1_8();
    java.util.Locale locale4 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str5 = resourceBundleCache1.get("", locale4);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(concurrenthashmap_locale_resourceBundle2);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test196"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    java.lang.String str9 = commandCoins0.getName();
    java.lang.String str10 = commandCoins0.getName();
    java.lang.String str11 = commandCoins0.getName();
    java.lang.String str12 = commandCoins0.getName();
    java.lang.String str13 = commandCoins0.getName();
    java.lang.String str14 = commandCoins0.getName();
    java.lang.String str15 = commandCoins0.getName();
    java.lang.String str16 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender17 = null;
    org.bukkit.command.Command command18 = null;
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    char char22 = i18n20.getColorChar();
    char char23 = i18n20.getColorChar();
    char char24 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n25.getBundleCache$spigot_1_8();
    java.lang.String[] str_array27 = new java.lang.String[] {  };
    java.lang.String[] str_array29 = i18n25.getStrings(str_array27, "hi!");
    java.lang.String[] str_array31 = i18n20.getStrings(str_array29, "GMCrx");
    char char32 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char34 = i18n33.getColorChar();
    char char35 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n33.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n37 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char38 = i18n37.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache39 = i18n37.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache40 = i18n37.getBundleCache$spigot_1_8();
    char char41 = i18n37.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n42 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char43 = i18n42.getColorChar();
    char char44 = i18n42.getColorChar();
    char char45 = i18n42.getColorChar();
    char char46 = i18n42.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n47 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache48 = i18n47.getBundleCache$spigot_1_8();
    java.lang.String[] str_array49 = new java.lang.String[] {  };
    java.lang.String[] str_array51 = i18n47.getStrings(str_array49, "hi!");
    java.lang.String[] str_array53 = i18n42.getStrings(str_array51, "GMCrx");
    java.lang.String[] str_array55 = i18n37.getStrings(str_array51, "GMC");
    java.lang.String[] str_array57 = i18n33.getStrings(str_array51, "GMCx");
    java.lang.String[] str_array59 = i18n20.getStrings(str_array57, "hi!");
    gtlp.groundmc.lobby.util.I18n i18n60 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char61 = i18n60.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache62 = i18n60.getBundleCache$spigot_1_8();
    char char63 = i18n60.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n64 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char65 = i18n64.getColorChar();
    char char66 = i18n64.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache67 = i18n64.getBundleCache$spigot_1_8();
    char char68 = i18n64.getColorChar();
    char char69 = i18n64.getColorChar();
    char char70 = i18n64.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n71 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char72 = i18n71.getColorChar();
    char char73 = i18n71.getColorChar();
    char char74 = i18n71.getColorChar();
    char char75 = i18n71.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n76 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache77 = i18n76.getBundleCache$spigot_1_8();
    java.lang.String[] str_array78 = new java.lang.String[] {  };
    java.lang.String[] str_array80 = i18n76.getStrings(str_array78, "hi!");
    java.lang.String[] str_array82 = i18n71.getStrings(str_array80, "GMCrx");
    java.lang.String[] str_array84 = i18n64.getStrings(str_array80, "friends");
    java.lang.String[] str_array86 = i18n60.getStrings(str_array84, "GMCsilent");
    java.lang.String[] str_array88 = i18n20.getStrings(str_array84, "");
    // The following exception was thrown during execution in test generation
    try {
    boolean b89 = commandCoins0.execute(commandSender17, command18, "vanish", str_array84);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "coins"+ "'", str10.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "coins"+ "'", str11.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "coins"+ "'", str12.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "coins"+ "'", str13.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "coins"+ "'", str14.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "coins"+ "'", str15.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "coins"+ "'", str16.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char69 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char70 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char72 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char73 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char74 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char75 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test197"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    java.lang.String str8 = commandLobby0.getName();
    java.lang.String str9 = commandLobby0.getName();
    java.lang.String str10 = commandLobby0.getName();
    java.lang.String str11 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender12 = null;
    org.bukkit.command.Command command13 = null;
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n15.getBundleCache$spigot_1_8();
    char char18 = i18n15.getColorChar();
    char char19 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char22 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n21.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n21.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n21.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n21.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n27.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n27.getBundleCache$spigot_1_8();
    char char31 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char33 = i18n32.getColorChar();
    char char34 = i18n32.getColorChar();
    char char35 = i18n32.getColorChar();
    char char36 = i18n32.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n37 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache38 = i18n37.getBundleCache$spigot_1_8();
    java.lang.String[] str_array39 = new java.lang.String[] {  };
    java.lang.String[] str_array41 = i18n37.getStrings(str_array39, "hi!");
    java.lang.String[] str_array43 = i18n32.getStrings(str_array41, "GMCrx");
    java.lang.String[] str_array45 = i18n27.getStrings(str_array41, "GMC");
    java.lang.String[] str_array47 = i18n21.getStrings(str_array41, "GMCw");
    java.lang.String[] str_array49 = i18n15.getStrings(str_array47, "GMCy");
    gtlp.groundmc.lobby.util.I18n i18n50 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char51 = i18n50.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache52 = i18n50.getBundleCache$spigot_1_8();
    char char53 = i18n50.getColorChar();
    char char54 = i18n50.getColorChar();
    char char55 = i18n50.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache56 = i18n50.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache57 = i18n50.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n58 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char59 = i18n58.getColorChar();
    char char60 = i18n58.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache61 = i18n58.getBundleCache$spigot_1_8();
    char char62 = i18n58.getColorChar();
    char char63 = i18n58.getColorChar();
    char char64 = i18n58.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n65 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char66 = i18n65.getColorChar();
    char char67 = i18n65.getColorChar();
    char char68 = i18n65.getColorChar();
    char char69 = i18n65.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n70 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache71 = i18n70.getBundleCache$spigot_1_8();
    java.lang.String[] str_array72 = new java.lang.String[] {  };
    java.lang.String[] str_array74 = i18n70.getStrings(str_array72, "hi!");
    java.lang.String[] str_array76 = i18n65.getStrings(str_array74, "GMCrx");
    java.lang.String[] str_array78 = i18n58.getStrings(str_array74, "friends");
    java.lang.String[] str_array80 = i18n50.getStrings(str_array78, "GMCt");
    java.lang.String[] str_array82 = i18n15.getStrings(str_array80, "coins");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str83 = commandLobby0.getTabCompletion(commandSender12, command13, "", str_array80);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lobby"+ "'", str8.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "lobby"+ "'", str9.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "lobby"+ "'", str10.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "lobby"+ "'", str11.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char62 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char67 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char69 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test198"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    char char5 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n8 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char9 = i18n8.getColorChar();
    char char10 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n8.getBundleCache$spigot_1_8();
    char char12 = i18n8.getColorChar();
    char char13 = i18n8.getColorChar();
    char char14 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    char char17 = i18n15.getColorChar();
    char char18 = i18n15.getColorChar();
    char char19 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n20.getBundleCache$spigot_1_8();
    java.lang.String[] str_array22 = new java.lang.String[] {  };
    java.lang.String[] str_array24 = i18n20.getStrings(str_array22, "hi!");
    java.lang.String[] str_array26 = i18n15.getStrings(str_array24, "GMCrx");
    java.lang.String[] str_array28 = i18n8.getStrings(str_array24, "friends");
    java.lang.String[] str_array30 = i18n0.getStrings(str_array28, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n31.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n31.getBundleCache$spigot_1_8();
    char char35 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char37 = i18n36.getColorChar();
    char char38 = i18n36.getColorChar();
    char char39 = i18n36.getColorChar();
    char char40 = i18n36.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n41 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n41.getBundleCache$spigot_1_8();
    java.lang.String[] str_array43 = new java.lang.String[] {  };
    java.lang.String[] str_array45 = i18n41.getStrings(str_array43, "hi!");
    java.lang.String[] str_array47 = i18n36.getStrings(str_array45, "GMCrx");
    java.lang.String[] str_array49 = i18n31.getStrings(str_array45, "GMC");
    java.lang.String[] str_array51 = i18n0.getStrings(str_array49, "groundmc.lobby.vanish");
    gtlp.groundmc.lobby.util.I18n i18n52 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char53 = i18n52.getColorChar();
    char char54 = i18n52.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache55 = i18n52.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n56 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char57 = i18n56.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache58 = i18n56.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache59 = i18n56.getBundleCache$spigot_1_8();
    char char60 = i18n56.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n61 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char62 = i18n61.getColorChar();
    char char63 = i18n61.getColorChar();
    char char64 = i18n61.getColorChar();
    char char65 = i18n61.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n66 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache67 = i18n66.getBundleCache$spigot_1_8();
    java.lang.String[] str_array68 = new java.lang.String[] {  };
    java.lang.String[] str_array70 = i18n66.getStrings(str_array68, "hi!");
    java.lang.String[] str_array72 = i18n61.getStrings(str_array70, "GMCrx");
    java.lang.String[] str_array74 = i18n56.getStrings(str_array70, "GMC");
    java.lang.String[] str_array76 = i18n52.getStrings(str_array70, "GMCx");
    java.util.Locale locale77 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array78 = i18n0.getStrings(str_array76, locale77);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char62 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test199"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender6 = null;
    org.bukkit.command.Command command7 = null;
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n9.getBundleCache$spigot_1_8();
    char char12 = i18n9.getColorChar();
    char char13 = i18n9.getColorChar();
    char char14 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n9.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n9.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    char char19 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n17.getBundleCache$spigot_1_8();
    char char21 = i18n17.getColorChar();
    char char22 = i18n17.getColorChar();
    char char23 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    char char26 = i18n24.getColorChar();
    char char27 = i18n24.getColorChar();
    char char28 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n29.getBundleCache$spigot_1_8();
    java.lang.String[] str_array31 = new java.lang.String[] {  };
    java.lang.String[] str_array33 = i18n29.getStrings(str_array31, "hi!");
    java.lang.String[] str_array35 = i18n24.getStrings(str_array33, "GMCrx");
    java.lang.String[] str_array37 = i18n17.getStrings(str_array33, "friends");
    java.lang.String[] str_array39 = i18n9.getStrings(str_array37, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char41 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n40.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache43 = i18n40.getBundleCache$spigot_1_8();
    char char44 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char46 = i18n45.getColorChar();
    char char47 = i18n45.getColorChar();
    char char48 = i18n45.getColorChar();
    char char49 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n50 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n50.getBundleCache$spigot_1_8();
    java.lang.String[] str_array52 = new java.lang.String[] {  };
    java.lang.String[] str_array54 = i18n50.getStrings(str_array52, "hi!");
    java.lang.String[] str_array56 = i18n45.getStrings(str_array54, "GMCrx");
    java.lang.String[] str_array58 = i18n40.getStrings(str_array54, "GMC");
    java.lang.String[] str_array60 = i18n9.getStrings(str_array58, "groundmc.lobby.vanish");
    gtlp.groundmc.lobby.util.I18n i18n61 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char62 = i18n61.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache63 = i18n61.getBundleCache$spigot_1_8();
    char char64 = i18n61.getColorChar();
    char char65 = i18n61.getColorChar();
    char char66 = i18n61.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n67 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache68 = i18n67.getBundleCache$spigot_1_8();
    java.lang.String[] str_array69 = new java.lang.String[] {  };
    java.lang.String[] str_array71 = i18n67.getStrings(str_array69, "hi!");
    java.lang.String[] str_array73 = i18n61.getStrings(str_array71, "GMCy");
    java.lang.String[] str_array75 = i18n9.getStrings(str_array71, "");
    // The following exception was thrown during execution in test generation
    try {
    boolean b76 = commandCoins0.execute(commandSender6, command7, "GMCz", str_array71);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char62 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test200"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender8 = null;
    org.bukkit.command.Command command9 = null;
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n11.getBundleCache$spigot_1_8();
    char char13 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    char char18 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n16.getBundleCache$spigot_1_8();
    char char20 = i18n16.getColorChar();
    char char21 = i18n16.getColorChar();
    char char22 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    char char25 = i18n23.getColorChar();
    char char26 = i18n23.getColorChar();
    char char27 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n28.getBundleCache$spigot_1_8();
    java.lang.String[] str_array30 = new java.lang.String[] {  };
    java.lang.String[] str_array32 = i18n28.getStrings(str_array30, "hi!");
    java.lang.String[] str_array34 = i18n23.getStrings(str_array32, "GMCrx");
    java.lang.String[] str_array36 = i18n16.getStrings(str_array32, "friends");
    java.lang.String[] str_array38 = i18n14.getStrings(str_array36, "vanish");
    java.lang.String[] str_array40 = i18n11.getStrings(str_array38, "GMCt");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str41 = commandFriend0.getTabCompletion(commandSender8, command9, "", str_array40);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test201"); }

    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = new gtlp.groundmc.lobby.util.I18n.ResourceBundleCache("hi!");
    java.util.concurrent.ConcurrentHashMap<java.util.Locale,java.util.ResourceBundle> concurrenthashmap_locale_resourceBundle2 = resourceBundleCache1.getBackingMap$spigot_1_8();
    java.lang.String str3 = resourceBundleCache1.getName();
    java.lang.String str4 = resourceBundleCache1.getName();
    java.lang.String str5 = resourceBundleCache1.getName();
    java.lang.String str6 = resourceBundleCache1.getName();
    java.lang.String str7 = resourceBundleCache1.getName();
    java.util.concurrent.ConcurrentHashMap<java.util.Locale,java.util.ResourceBundle> concurrenthashmap_locale_resourceBundle8 = resourceBundleCache1.getBackingMap$spigot_1_8();
    java.lang.String str9 = resourceBundleCache1.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(concurrenthashmap_locale_resourceBundle2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "hi!"+ "'", str3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!"+ "'", str4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!"+ "'", str5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!"+ "'", str6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(concurrenthashmap_locale_resourceBundle8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "hi!"+ "'", str9.equals("hi!"));

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test202"); }

    org.joda.time.DateTime dateTime2 = null;
    // The following exception was thrown during execution in test generation
    try {
    gtlp.groundmc.lobby.Relationship relationship3 = new gtlp.groundmc.lobby.Relationship("GMCsilent", "groundmc.lobby.hide_players", dateTime2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test203"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = i18n0.getBundleCache$spigot_1_8();
    java.lang.String[] str_array2 = new java.lang.String[] {  };
    java.lang.String[] str_array4 = i18n0.getStrings(str_array2, "hi!");
    char char5 = i18n0.getColorChar();
    char char6 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n8 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n8.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    char char12 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n10.getBundleCache$spigot_1_8();
    char char14 = i18n10.getColorChar();
    char char15 = i18n10.getColorChar();
    char char16 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    char char19 = i18n17.getColorChar();
    char char20 = i18n17.getColorChar();
    char char21 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n22.getBundleCache$spigot_1_8();
    java.lang.String[] str_array24 = new java.lang.String[] {  };
    java.lang.String[] str_array26 = i18n22.getStrings(str_array24, "hi!");
    java.lang.String[] str_array28 = i18n17.getStrings(str_array26, "GMCrx");
    java.lang.String[] str_array30 = i18n10.getStrings(str_array26, "friends");
    java.lang.String[] str_array32 = i18n8.getStrings(str_array30, "vanish");
    java.util.Locale locale33 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array34 = i18n0.getStrings(str_array32, locale33);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test204"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n5.getBundleCache$spigot_1_8();
    char char8 = i18n5.getColorChar();
    char char9 = i18n5.getColorChar();
    char char10 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n5.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n12.getBundleCache$spigot_1_8();
    char char15 = i18n12.getColorChar();
    char char16 = i18n12.getColorChar();
    char char17 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    char char22 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n20.getBundleCache$spigot_1_8();
    char char24 = i18n20.getColorChar();
    char char25 = i18n20.getColorChar();
    char char26 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    char char29 = i18n27.getColorChar();
    char char30 = i18n27.getColorChar();
    char char31 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n32.getBundleCache$spigot_1_8();
    java.lang.String[] str_array34 = new java.lang.String[] {  };
    java.lang.String[] str_array36 = i18n32.getStrings(str_array34, "hi!");
    java.lang.String[] str_array38 = i18n27.getStrings(str_array36, "GMCrx");
    java.lang.String[] str_array40 = i18n20.getStrings(str_array36, "friends");
    java.lang.String[] str_array42 = i18n12.getStrings(str_array40, "GMCt");
    java.lang.String[] str_array44 = i18n5.getStrings(str_array40, "friend");
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char46 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache47 = i18n45.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache48 = i18n45.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache49 = i18n45.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache50 = i18n45.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n51 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char52 = i18n51.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache53 = i18n51.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache54 = i18n51.getBundleCache$spigot_1_8();
    char char55 = i18n51.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n56 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char57 = i18n56.getColorChar();
    char char58 = i18n56.getColorChar();
    char char59 = i18n56.getColorChar();
    char char60 = i18n56.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n61 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache62 = i18n61.getBundleCache$spigot_1_8();
    java.lang.String[] str_array63 = new java.lang.String[] {  };
    java.lang.String[] str_array65 = i18n61.getStrings(str_array63, "hi!");
    java.lang.String[] str_array67 = i18n56.getStrings(str_array65, "GMCrx");
    java.lang.String[] str_array69 = i18n51.getStrings(str_array65, "GMC");
    java.lang.String[] str_array71 = i18n45.getStrings(str_array65, "GMCw");
    java.lang.String[] str_array73 = i18n5.getStrings(str_array71, "groundmc.lobby.admin");
    java.lang.String[] str_array75 = i18n0.getStrings(str_array71, "GMCry");
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str78 = i18n0.getString("GMCz", "GMCy");
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test205"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    java.lang.String str9 = commandCoins0.getName();
    java.lang.String str10 = commandCoins0.getName();
    java.lang.String str11 = commandCoins0.getName();
    java.lang.String str12 = commandCoins0.getName();
    java.lang.String str13 = commandCoins0.getName();
    java.lang.String str14 = commandCoins0.getName();
    java.lang.String str15 = commandCoins0.getName();
    java.lang.String str16 = commandCoins0.getName();
    java.util.Locale locale17 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array18 = commandCoins0.getCommandHelp(locale17);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "coins"+ "'", str10.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "coins"+ "'", str11.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "coins"+ "'", str12.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "coins"+ "'", str13.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "coins"+ "'", str14.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "coins"+ "'", str15.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "coins"+ "'", str16.equals("coins"));

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test206"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender7 = null;
    org.bukkit.command.Command command8 = null;
    java.lang.String[] str_array10 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str11 = commandCoins0.getTabCompletion(commandSender7, command8, "hi!", str_array10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test207"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    org.bukkit.command.CommandSender commandSender1 = null;
    org.bukkit.command.Command command2 = null;
    gtlp.groundmc.lobby.util.I18n i18n4 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char5 = i18n4.getColorChar();
    char char6 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n4.getBundleCache$spigot_1_8();
    char char8 = i18n4.getColorChar();
    char char9 = i18n4.getColorChar();
    char char10 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n11.getBundleCache$spigot_1_8();
    char char14 = i18n11.getColorChar();
    char char15 = i18n11.getColorChar();
    char char16 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    char char21 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n19.getBundleCache$spigot_1_8();
    char char23 = i18n19.getColorChar();
    char char24 = i18n19.getColorChar();
    char char25 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    char char28 = i18n26.getColorChar();
    char char29 = i18n26.getColorChar();
    char char30 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n31.getBundleCache$spigot_1_8();
    java.lang.String[] str_array33 = new java.lang.String[] {  };
    java.lang.String[] str_array35 = i18n31.getStrings(str_array33, "hi!");
    java.lang.String[] str_array37 = i18n26.getStrings(str_array35, "GMCrx");
    java.lang.String[] str_array39 = i18n19.getStrings(str_array35, "friends");
    java.lang.String[] str_array41 = i18n11.getStrings(str_array39, "GMCt");
    java.lang.String[] str_array43 = i18n4.getStrings(str_array39, "groundmc.lobby.admin");
    gtlp.groundmc.lobby.util.I18n i18n44 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char45 = i18n44.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache46 = i18n44.getBundleCache$spigot_1_8();
    char char47 = i18n44.getColorChar();
    char char48 = i18n44.getColorChar();
    char char49 = i18n44.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache50 = i18n44.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n44.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n52 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char53 = i18n52.getColorChar();
    char char54 = i18n52.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache55 = i18n52.getBundleCache$spigot_1_8();
    char char56 = i18n52.getColorChar();
    char char57 = i18n52.getColorChar();
    char char58 = i18n52.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n59 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char60 = i18n59.getColorChar();
    char char61 = i18n59.getColorChar();
    char char62 = i18n59.getColorChar();
    char char63 = i18n59.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n64 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache65 = i18n64.getBundleCache$spigot_1_8();
    java.lang.String[] str_array66 = new java.lang.String[] {  };
    java.lang.String[] str_array68 = i18n64.getStrings(str_array66, "hi!");
    java.lang.String[] str_array70 = i18n59.getStrings(str_array68, "GMCrx");
    java.lang.String[] str_array72 = i18n52.getStrings(str_array68, "friends");
    java.lang.String[] str_array74 = i18n44.getStrings(str_array72, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n75 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char76 = i18n75.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache77 = i18n75.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache78 = i18n75.getBundleCache$spigot_1_8();
    char char79 = i18n75.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n80 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char81 = i18n80.getColorChar();
    char char82 = i18n80.getColorChar();
    char char83 = i18n80.getColorChar();
    char char84 = i18n80.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n85 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache86 = i18n85.getBundleCache$spigot_1_8();
    java.lang.String[] str_array87 = new java.lang.String[] {  };
    java.lang.String[] str_array89 = i18n85.getStrings(str_array87, "hi!");
    java.lang.String[] str_array91 = i18n80.getStrings(str_array89, "GMCrx");
    java.lang.String[] str_array93 = i18n75.getStrings(str_array89, "GMC");
    java.lang.String[] str_array95 = i18n44.getStrings(str_array93, "groundmc.lobby.vanish");
    java.lang.String[] str_array97 = i18n4.getStrings(str_array93, "GMChide");
    // The following exception was thrown during execution in test generation
    try {
    boolean b98 = commandFriends0.execute(commandSender1, command2, "groundmc.lobby.vanish", str_array97);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char56 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char62 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char76 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char79 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char81 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char82 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char83 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char84 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array97);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test208"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    java.lang.String str6 = commandFriends0.getName();
    java.lang.String str7 = commandFriends0.getName();
    java.lang.String str8 = commandFriends0.getName();
    java.lang.String str9 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender10 = null;
    org.bukkit.command.Command command11 = null;
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    char char15 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n13.getBundleCache$spigot_1_8();
    char char18 = i18n13.getColorChar();
    char char19 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    char char22 = i18n20.getColorChar();
    char char23 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    char char27 = i18n25.getColorChar();
    char char28 = i18n25.getColorChar();
    char char29 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n30.getBundleCache$spigot_1_8();
    java.lang.String[] str_array32 = new java.lang.String[] {  };
    java.lang.String[] str_array34 = i18n30.getStrings(str_array32, "hi!");
    java.lang.String[] str_array36 = i18n25.getStrings(str_array34, "GMCrx");
    java.lang.String[] str_array38 = i18n20.getStrings(str_array36, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n39 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache40 = i18n39.getBundleCache$spigot_1_8();
    java.lang.String[] str_array41 = new java.lang.String[] {  };
    java.lang.String[] str_array43 = i18n39.getStrings(str_array41, "hi!");
    java.lang.String[] str_array45 = i18n20.getStrings(str_array43, "groundmc.lobby.hide_players");
    java.lang.String[] str_array47 = i18n13.getStrings(str_array45, "lang.lobby");
    // The following exception was thrown during execution in test generation
    try {
    boolean b48 = commandFriends0.execute(commandSender10, command11, "groundmc.lobby.hide_players", str_array47);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friends"+ "'", str7.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friends"+ "'", str8.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "friends"+ "'", str9.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test209"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = i18n0.getBundleCache$spigot_1_8();
    char char2 = i18n0.getColorChar();
    char char3 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str7 = i18n0.getString("lang.lobby", "GMCz");
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test210"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    java.lang.String str8 = commandLobby0.getName();
    java.lang.String str9 = commandLobby0.getName();
    java.lang.String str10 = commandLobby0.getName();
    java.lang.String str11 = commandLobby0.getName();
    java.lang.String str12 = commandLobby0.getName();
    java.lang.String str13 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender14 = null;
    org.bukkit.command.Command command15 = null;
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    char char19 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n17.getBundleCache$spigot_1_8();
    char char21 = i18n17.getColorChar();
    char char22 = i18n17.getColorChar();
    char char23 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    char char26 = i18n24.getColorChar();
    char char27 = i18n24.getColorChar();
    char char28 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n29.getBundleCache$spigot_1_8();
    java.lang.String[] str_array31 = new java.lang.String[] {  };
    java.lang.String[] str_array33 = i18n29.getStrings(str_array31, "hi!");
    java.lang.String[] str_array35 = i18n24.getStrings(str_array33, "GMCrx");
    java.lang.String[] str_array37 = i18n17.getStrings(str_array33, "friends");
    // The following exception was thrown during execution in test generation
    try {
    boolean b38 = commandLobby0.execute(commandSender14, command15, "groundmc.lobby.silent", str_array33);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lobby"+ "'", str8.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "lobby"+ "'", str9.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "lobby"+ "'", str10.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "lobby"+ "'", str11.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "lobby"+ "'", str12.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "lobby"+ "'", str13.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test211"); }

    gtlp.groundmc.lobby.registry.LobbyCommandRegistry.Companion companion0 = gtlp.groundmc.lobby.registry.LobbyCommandRegistry.Companion;
    gtlp.groundmc.lobby.commands.CommandLobby commandLobby1 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str2 = commandLobby1.getName();
    java.lang.String str3 = commandLobby1.getName();
    java.lang.String str4 = commandLobby1.getName();
    java.lang.String str5 = commandLobby1.getName();
    java.lang.String str6 = commandLobby1.getName();
    // The following exception was thrown during execution in test generation
    try {
    companion0.registerCommand((gtlp.groundmc.lobby.commands.ILobbyCommand)commandLobby1);
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(companion0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test212"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    java.lang.String str8 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender9 = null;
    org.bukkit.command.Command command10 = null;
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n12.getBundleCache$spigot_1_8();
    char char14 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    char char19 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n17.getBundleCache$spigot_1_8();
    char char21 = i18n17.getColorChar();
    char char22 = i18n17.getColorChar();
    char char23 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    char char26 = i18n24.getColorChar();
    char char27 = i18n24.getColorChar();
    char char28 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n29.getBundleCache$spigot_1_8();
    java.lang.String[] str_array31 = new java.lang.String[] {  };
    java.lang.String[] str_array33 = i18n29.getStrings(str_array31, "hi!");
    java.lang.String[] str_array35 = i18n24.getStrings(str_array33, "GMCrx");
    java.lang.String[] str_array37 = i18n17.getStrings(str_array33, "friends");
    java.lang.String[] str_array39 = i18n15.getStrings(str_array37, "vanish");
    java.lang.String[] str_array41 = i18n12.getStrings(str_array39, "GMCt");
    // The following exception was thrown during execution in test generation
    try {
    boolean b42 = commandFriend0.execute(commandSender9, command10, "GMCt", str_array39);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friend"+ "'", str8.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test213"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender4 = null;
    org.bukkit.command.Command command5 = null;
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char8 = i18n7.getColorChar();
    char char9 = i18n7.getColorChar();
    char char10 = i18n7.getColorChar();
    char char11 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n12.getBundleCache$spigot_1_8();
    java.lang.String[] str_array14 = new java.lang.String[] {  };
    java.lang.String[] str_array16 = i18n12.getStrings(str_array14, "hi!");
    java.lang.String[] str_array18 = i18n7.getStrings(str_array16, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    char char21 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n19.getBundleCache$spigot_1_8();
    char char23 = i18n19.getColorChar();
    char char24 = i18n19.getColorChar();
    char char25 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    char char28 = i18n26.getColorChar();
    char char29 = i18n26.getColorChar();
    char char30 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n31.getBundleCache$spigot_1_8();
    java.lang.String[] str_array33 = new java.lang.String[] {  };
    java.lang.String[] str_array35 = i18n31.getStrings(str_array33, "hi!");
    java.lang.String[] str_array37 = i18n26.getStrings(str_array35, "GMCrx");
    java.lang.String[] str_array39 = i18n19.getStrings(str_array35, "friends");
    java.lang.String[] str_array41 = i18n7.getStrings(str_array39, "");
    gtlp.groundmc.lobby.util.I18n i18n42 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char43 = i18n42.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache44 = i18n42.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache45 = i18n42.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache46 = i18n42.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache47 = i18n42.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n48 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char49 = i18n48.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache50 = i18n48.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n48.getBundleCache$spigot_1_8();
    char char52 = i18n48.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n53 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char54 = i18n53.getColorChar();
    char char55 = i18n53.getColorChar();
    char char56 = i18n53.getColorChar();
    char char57 = i18n53.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n58 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache59 = i18n58.getBundleCache$spigot_1_8();
    java.lang.String[] str_array60 = new java.lang.String[] {  };
    java.lang.String[] str_array62 = i18n58.getStrings(str_array60, "hi!");
    java.lang.String[] str_array64 = i18n53.getStrings(str_array62, "GMCrx");
    java.lang.String[] str_array66 = i18n48.getStrings(str_array62, "GMC");
    java.lang.String[] str_array68 = i18n42.getStrings(str_array62, "GMCw");
    java.lang.String[] str_array70 = i18n7.getStrings(str_array68, "GMCz");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str71 = commandLobby0.getTabCompletion(commandSender4, command5, "GMCry", str_array68);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char56 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test214"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender3 = null;
    org.bukkit.command.Command command4 = null;
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char7 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n6.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n6.getBundleCache$spigot_1_8();
    char char10 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    char char13 = i18n11.getColorChar();
    char char14 = i18n11.getColorChar();
    char char15 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n16.getBundleCache$spigot_1_8();
    java.lang.String[] str_array18 = new java.lang.String[] {  };
    java.lang.String[] str_array20 = i18n16.getStrings(str_array18, "hi!");
    java.lang.String[] str_array22 = i18n11.getStrings(str_array20, "GMCrx");
    java.lang.String[] str_array24 = i18n6.getStrings(str_array20, "GMC");
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    char char27 = i18n25.getColorChar();
    char char28 = i18n25.getColorChar();
    char char29 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n30.getBundleCache$spigot_1_8();
    java.lang.String[] str_array32 = new java.lang.String[] {  };
    java.lang.String[] str_array34 = i18n30.getStrings(str_array32, "hi!");
    java.lang.String[] str_array36 = i18n25.getStrings(str_array34, "GMCrx");
    java.lang.String[] str_array38 = i18n6.getStrings(str_array34, "GMCz");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str39 = commandLobby0.getTabCompletion(commandSender3, command4, "groundmc.lobby.silent", str_array34);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test215"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    char char5 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n0.getBundleCache$spigot_1_8();
    char char7 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n9.getBundleCache$spigot_1_8();
    char char12 = i18n9.getColorChar();
    char char13 = i18n9.getColorChar();
    char char14 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n9.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n9.getBundleCache$spigot_1_8();
    char char17 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n23.getBundleCache$spigot_1_8();
    char char26 = i18n23.getColorChar();
    char char27 = i18n23.getColorChar();
    char char28 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n23.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char31 = i18n30.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n30.getBundleCache$spigot_1_8();
    char char33 = i18n30.getColorChar();
    char char34 = i18n30.getColorChar();
    char char35 = i18n30.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n30.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n30.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n38 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char39 = i18n38.getColorChar();
    char char40 = i18n38.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache41 = i18n38.getBundleCache$spigot_1_8();
    char char42 = i18n38.getColorChar();
    char char43 = i18n38.getColorChar();
    char char44 = i18n38.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char46 = i18n45.getColorChar();
    char char47 = i18n45.getColorChar();
    char char48 = i18n45.getColorChar();
    char char49 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n50 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n50.getBundleCache$spigot_1_8();
    java.lang.String[] str_array52 = new java.lang.String[] {  };
    java.lang.String[] str_array54 = i18n50.getStrings(str_array52, "hi!");
    java.lang.String[] str_array56 = i18n45.getStrings(str_array54, "GMCrx");
    java.lang.String[] str_array58 = i18n38.getStrings(str_array54, "friends");
    java.lang.String[] str_array60 = i18n30.getStrings(str_array58, "GMCt");
    java.lang.String[] str_array62 = i18n23.getStrings(str_array58, "friend");
    gtlp.groundmc.lobby.util.I18n i18n63 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char64 = i18n63.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache65 = i18n63.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache66 = i18n63.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache67 = i18n63.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache68 = i18n63.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n69 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char70 = i18n69.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache71 = i18n69.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache72 = i18n69.getBundleCache$spigot_1_8();
    char char73 = i18n69.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n74 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char75 = i18n74.getColorChar();
    char char76 = i18n74.getColorChar();
    char char77 = i18n74.getColorChar();
    char char78 = i18n74.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n79 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache80 = i18n79.getBundleCache$spigot_1_8();
    java.lang.String[] str_array81 = new java.lang.String[] {  };
    java.lang.String[] str_array83 = i18n79.getStrings(str_array81, "hi!");
    java.lang.String[] str_array85 = i18n74.getStrings(str_array83, "GMCrx");
    java.lang.String[] str_array87 = i18n69.getStrings(str_array83, "GMC");
    java.lang.String[] str_array89 = i18n63.getStrings(str_array83, "GMCw");
    java.lang.String[] str_array91 = i18n23.getStrings(str_array89, "groundmc.lobby.admin");
    java.lang.String[] str_array93 = i18n18.getStrings(str_array89, "GMCry");
    java.lang.String[] str_array95 = i18n9.getStrings(str_array93, "GMCrx");
    java.util.Locale locale96 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array97 = i18n0.getStrings(str_array95, locale96);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char70 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char73 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char75 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char76 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char77 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char78 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array95);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test216"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender5 = null;
    org.bukkit.command.Command command6 = null;
    gtlp.groundmc.lobby.util.I18n i18n8 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char9 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    char char14 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n12.getBundleCache$spigot_1_8();
    char char16 = i18n12.getColorChar();
    char char17 = i18n12.getColorChar();
    char char18 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    char char21 = i18n19.getColorChar();
    char char22 = i18n19.getColorChar();
    char char23 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n24.getBundleCache$spigot_1_8();
    java.lang.String[] str_array26 = new java.lang.String[] {  };
    java.lang.String[] str_array28 = i18n24.getStrings(str_array26, "hi!");
    java.lang.String[] str_array30 = i18n19.getStrings(str_array28, "GMCrx");
    java.lang.String[] str_array32 = i18n12.getStrings(str_array28, "friends");
    java.lang.String[] str_array34 = i18n10.getStrings(str_array32, "vanish");
    java.lang.String[] str_array36 = i18n8.getStrings(str_array32, "GMCx");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str37 = commandFriends0.getTabCompletion(commandSender5, command6, "GMCw", str_array36);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test217"); }

    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = new gtlp.groundmc.lobby.util.I18n.ResourceBundleCache("GMCw");
    java.util.concurrent.ConcurrentHashMap<java.util.Locale,java.util.ResourceBundle> concurrenthashmap_locale_resourceBundle2 = resourceBundleCache1.getBackingMap$spigot_1_8();
    java.lang.String str3 = resourceBundleCache1.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(concurrenthashmap_locale_resourceBundle2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "GMCw"+ "'", str3.equals("GMCw"));

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test218"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    java.lang.String str8 = commandFriend0.getName();
    java.lang.String str9 = commandFriend0.getName();
    java.lang.String str10 = commandFriend0.getName();
    java.lang.String str11 = commandFriend0.getName();
    java.lang.String str12 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender13 = null;
    org.bukkit.command.Command command14 = null;
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n18.getBundleCache$spigot_1_8();
    char char22 = i18n18.getColorChar();
    char char23 = i18n18.getColorChar();
    char char24 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    char char27 = i18n25.getColorChar();
    char char28 = i18n25.getColorChar();
    char char29 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n30.getBundleCache$spigot_1_8();
    java.lang.String[] str_array32 = new java.lang.String[] {  };
    java.lang.String[] str_array34 = i18n30.getStrings(str_array32, "hi!");
    java.lang.String[] str_array36 = i18n25.getStrings(str_array34, "GMCrx");
    java.lang.String[] str_array38 = i18n18.getStrings(str_array34, "friends");
    java.lang.String[] str_array40 = i18n16.getStrings(str_array38, "vanish");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str41 = commandFriend0.getTabCompletion(commandSender13, command14, "GMCry", str_array38);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friend"+ "'", str8.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "friend"+ "'", str9.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "friend"+ "'", str10.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "friend"+ "'", str11.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "friend"+ "'", str12.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test219"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    java.lang.String str8 = commandLobby0.getName();
    java.lang.String str9 = commandLobby0.getName();
    java.lang.String str10 = commandLobby0.getName();
    java.lang.String str11 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender12 = null;
    org.bukkit.command.Command command13 = null;
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char22 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n21.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n21.getBundleCache$spigot_1_8();
    char char25 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    char char28 = i18n26.getColorChar();
    char char29 = i18n26.getColorChar();
    char char30 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n31.getBundleCache$spigot_1_8();
    java.lang.String[] str_array33 = new java.lang.String[] {  };
    java.lang.String[] str_array35 = i18n31.getStrings(str_array33, "hi!");
    java.lang.String[] str_array37 = i18n26.getStrings(str_array35, "GMCrx");
    java.lang.String[] str_array39 = i18n21.getStrings(str_array35, "GMC");
    java.lang.String[] str_array41 = i18n15.getStrings(str_array35, "GMCw");
    // The following exception was thrown during execution in test generation
    try {
    boolean b42 = commandLobby0.execute(commandSender12, command13, "vanish", str_array41);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lobby"+ "'", str8.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "lobby"+ "'", str9.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "lobby"+ "'", str10.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "lobby"+ "'", str11.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test220"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    java.lang.String str8 = commandFriend0.getName();
    java.lang.String str9 = commandFriend0.getName();
    java.lang.String str10 = commandFriend0.getName();
    java.lang.String str11 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender12 = null;
    org.bukkit.command.Command command13 = null;
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n15.getBundleCache$spigot_1_8();
    java.lang.String[] str_array17 = new java.lang.String[] {  };
    java.lang.String[] str_array19 = i18n15.getStrings(str_array17, "hi!");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str20 = commandFriend0.getTabCompletion(commandSender12, command13, "GMCw", str_array17);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friend"+ "'", str8.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "friend"+ "'", str9.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "friend"+ "'", str10.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "friend"+ "'", str11.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test221"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    java.lang.String str8 = commandVanish0.getName();
    java.lang.String str9 = commandVanish0.getName();
    java.lang.String str10 = commandVanish0.getName();
    java.lang.String str11 = commandVanish0.getName();
    java.lang.String str12 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender13 = null;
    org.bukkit.command.Command command14 = null;
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n22.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n22.getBundleCache$spigot_1_8();
    char char26 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    char char29 = i18n27.getColorChar();
    char char30 = i18n27.getColorChar();
    char char31 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n32.getBundleCache$spigot_1_8();
    java.lang.String[] str_array34 = new java.lang.String[] {  };
    java.lang.String[] str_array36 = i18n32.getStrings(str_array34, "hi!");
    java.lang.String[] str_array38 = i18n27.getStrings(str_array36, "GMCrx");
    java.lang.String[] str_array40 = i18n22.getStrings(str_array36, "GMC");
    java.lang.String[] str_array42 = i18n16.getStrings(str_array36, "GMCw");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache43 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache44 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char46 = i18n45.getColorChar();
    char char47 = i18n45.getColorChar();
    char char48 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache49 = i18n45.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n50 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char51 = i18n50.getColorChar();
    char char52 = i18n50.getColorChar();
    char char53 = i18n50.getColorChar();
    char char54 = i18n50.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n55 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache56 = i18n55.getBundleCache$spigot_1_8();
    java.lang.String[] str_array57 = new java.lang.String[] {  };
    java.lang.String[] str_array59 = i18n55.getStrings(str_array57, "hi!");
    java.lang.String[] str_array61 = i18n50.getStrings(str_array59, "GMCrx");
    java.lang.String[] str_array63 = i18n45.getStrings(str_array61, "GMCt");
    java.lang.String[] str_array65 = i18n16.getStrings(str_array63, "hi!");
    // The following exception was thrown during execution in test generation
    try {
    boolean b66 = commandVanish0.execute(commandSender13, command14, "GMCw", str_array65);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "vanish"+ "'", str9.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "vanish"+ "'", str10.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "vanish"+ "'", str11.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "vanish"+ "'", str12.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test222"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    java.lang.String str8 = commandLobby0.getName();
    java.lang.String str9 = commandLobby0.getName();
    java.lang.String str10 = commandLobby0.getName();
    java.lang.String str11 = commandLobby0.getName();
    java.lang.String str12 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender13 = null;
    org.bukkit.command.Command command14 = null;
    java.lang.String[] str_array16 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str17 = commandLobby0.getTabCompletion(commandSender13, command14, "GMCx", str_array16);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lobby"+ "'", str8.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "lobby"+ "'", str9.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "lobby"+ "'", str10.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "lobby"+ "'", str11.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "lobby"+ "'", str12.equals("lobby"));

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test223"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    java.lang.String str8 = commandLobby0.getName();
    java.lang.String str9 = commandLobby0.getName();
    java.lang.String str10 = commandLobby0.getName();
    java.lang.String str11 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender12 = null;
    org.bukkit.command.Command command13 = null;
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n15.getBundleCache$spigot_1_8();
    char char18 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n15.getBundleCache$spigot_1_8();
    char char20 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char22 = i18n21.getColorChar();
    char char23 = i18n21.getColorChar();
    char char24 = i18n21.getColorChar();
    char char25 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n26.getBundleCache$spigot_1_8();
    java.lang.String[] str_array28 = new java.lang.String[] {  };
    java.lang.String[] str_array30 = i18n26.getStrings(str_array28, "hi!");
    java.lang.String[] str_array32 = i18n21.getStrings(str_array30, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char34 = i18n33.getColorChar();
    char char35 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n33.getBundleCache$spigot_1_8();
    char char37 = i18n33.getColorChar();
    char char38 = i18n33.getColorChar();
    char char39 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char41 = i18n40.getColorChar();
    char char42 = i18n40.getColorChar();
    char char43 = i18n40.getColorChar();
    char char44 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache46 = i18n45.getBundleCache$spigot_1_8();
    java.lang.String[] str_array47 = new java.lang.String[] {  };
    java.lang.String[] str_array49 = i18n45.getStrings(str_array47, "hi!");
    java.lang.String[] str_array51 = i18n40.getStrings(str_array49, "GMCrx");
    java.lang.String[] str_array53 = i18n33.getStrings(str_array49, "friends");
    java.lang.String[] str_array55 = i18n21.getStrings(str_array53, "");
    java.lang.String[] str_array57 = i18n15.getStrings(str_array53, "GMCw");
    char char58 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache59 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n60 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char61 = i18n60.getColorChar();
    char char62 = i18n60.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache63 = i18n60.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache64 = i18n60.getBundleCache$spigot_1_8();
    char char65 = i18n60.getColorChar();
    char char66 = i18n60.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n67 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char68 = i18n67.getColorChar();
    char char69 = i18n67.getColorChar();
    char char70 = i18n67.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache71 = i18n67.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n72 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char73 = i18n72.getColorChar();
    char char74 = i18n72.getColorChar();
    char char75 = i18n72.getColorChar();
    char char76 = i18n72.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n77 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache78 = i18n77.getBundleCache$spigot_1_8();
    java.lang.String[] str_array79 = new java.lang.String[] {  };
    java.lang.String[] str_array81 = i18n77.getStrings(str_array79, "hi!");
    java.lang.String[] str_array83 = i18n72.getStrings(str_array81, "GMCrx");
    java.lang.String[] str_array85 = i18n67.getStrings(str_array83, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n86 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache87 = i18n86.getBundleCache$spigot_1_8();
    java.lang.String[] str_array88 = new java.lang.String[] {  };
    java.lang.String[] str_array90 = i18n86.getStrings(str_array88, "hi!");
    java.lang.String[] str_array92 = i18n67.getStrings(str_array90, "groundmc.lobby.hide_players");
    java.lang.String[] str_array94 = i18n60.getStrings(str_array92, "lang.lobby");
    java.lang.String[] str_array96 = i18n15.getStrings(str_array92, "lobby");
    // The following exception was thrown during execution in test generation
    try {
    boolean b97 = commandLobby0.execute(commandSender12, command13, "GMCry", str_array92);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lobby"+ "'", str8.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "lobby"+ "'", str9.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "lobby"+ "'", str10.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "lobby"+ "'", str11.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char62 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char69 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char70 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char73 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char74 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char75 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char76 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array96);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test224"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    java.lang.String str6 = commandFriends0.getName();
    java.lang.String str7 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender8 = null;
    org.bukkit.command.Command command9 = null;
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n11.getBundleCache$spigot_1_8();
    char char14 = i18n11.getColorChar();
    char char15 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n23.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n23.getBundleCache$spigot_1_8();
    char char27 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char29 = i18n28.getColorChar();
    char char30 = i18n28.getColorChar();
    char char31 = i18n28.getColorChar();
    char char32 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n33.getBundleCache$spigot_1_8();
    java.lang.String[] str_array35 = new java.lang.String[] {  };
    java.lang.String[] str_array37 = i18n33.getStrings(str_array35, "hi!");
    java.lang.String[] str_array39 = i18n28.getStrings(str_array37, "GMCrx");
    java.lang.String[] str_array41 = i18n23.getStrings(str_array37, "GMC");
    java.lang.String[] str_array43 = i18n17.getStrings(str_array37, "GMCw");
    java.lang.String[] str_array45 = i18n11.getStrings(str_array43, "GMCy");
    gtlp.groundmc.lobby.util.I18n i18n46 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char47 = i18n46.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache48 = i18n46.getBundleCache$spigot_1_8();
    char char49 = i18n46.getColorChar();
    char char50 = i18n46.getColorChar();
    char char51 = i18n46.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache52 = i18n46.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache53 = i18n46.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n54 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char55 = i18n54.getColorChar();
    char char56 = i18n54.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache57 = i18n54.getBundleCache$spigot_1_8();
    char char58 = i18n54.getColorChar();
    char char59 = i18n54.getColorChar();
    char char60 = i18n54.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n61 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char62 = i18n61.getColorChar();
    char char63 = i18n61.getColorChar();
    char char64 = i18n61.getColorChar();
    char char65 = i18n61.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n66 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache67 = i18n66.getBundleCache$spigot_1_8();
    java.lang.String[] str_array68 = new java.lang.String[] {  };
    java.lang.String[] str_array70 = i18n66.getStrings(str_array68, "hi!");
    java.lang.String[] str_array72 = i18n61.getStrings(str_array70, "GMCrx");
    java.lang.String[] str_array74 = i18n54.getStrings(str_array70, "friends");
    java.lang.String[] str_array76 = i18n46.getStrings(str_array74, "GMCt");
    java.lang.String[] str_array78 = i18n11.getStrings(str_array76, "coins");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str79 = commandFriends0.getTabCompletion(commandSender8, command9, "friend", str_array76);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friends"+ "'", str7.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char56 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char62 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test225"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    char char3 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    char char6 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n0.getBundleCache$spigot_1_8();
    java.lang.String[] str_array8 = null;
    java.util.Locale locale9 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array10 = i18n0.getStrings(str_array8, locale9);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test226"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = i18n0.getBundleCache$spigot_1_8();
    java.lang.String[] str_array2 = new java.lang.String[] {  };
    java.lang.String[] str_array4 = i18n0.getStrings(str_array2, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n0.getBundleCache$spigot_1_8();
    java.util.Locale locale8 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str9 = i18n0.getString("groundmc.lobby.hide_players", locale8);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test227"); }

    int i1 = gtlp.groundmc.lobby.util.ExtensionsKt.getMegabytes(10485760);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test228"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    java.lang.String str8 = commandVanish0.getName();
    java.lang.String str9 = commandVanish0.getName();
    java.lang.String str10 = commandVanish0.getName();
    java.lang.String str11 = commandVanish0.getName();
    java.lang.String str12 = commandVanish0.getName();
    java.lang.String str13 = commandVanish0.getName();
    java.lang.String str14 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender15 = null;
    org.bukkit.command.Command command16 = null;
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n18.getBundleCache$spigot_1_8();
    char char21 = i18n18.getColorChar();
    char char22 = i18n18.getColorChar();
    char char23 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n24.getBundleCache$spigot_1_8();
    java.lang.String[] str_array26 = new java.lang.String[] {  };
    java.lang.String[] str_array28 = i18n24.getStrings(str_array26, "hi!");
    java.lang.String[] str_array30 = i18n18.getStrings(str_array28, "GMCy");
    // The following exception was thrown during execution in test generation
    try {
    boolean b31 = commandVanish0.execute(commandSender15, command16, "vanish", str_array28);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "vanish"+ "'", str9.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "vanish"+ "'", str10.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "vanish"+ "'", str11.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "vanish"+ "'", str12.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "vanish"+ "'", str13.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "vanish"+ "'", str14.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test229"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    java.lang.String str8 = commandLobby0.getName();
    java.lang.String str9 = commandLobby0.getName();
    java.lang.String str10 = commandLobby0.getName();
    java.lang.String str11 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender12 = null;
    org.bukkit.command.Command command13 = null;
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char22 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n21.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n21.getBundleCache$spigot_1_8();
    char char25 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    char char28 = i18n26.getColorChar();
    char char29 = i18n26.getColorChar();
    char char30 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n31.getBundleCache$spigot_1_8();
    java.lang.String[] str_array33 = new java.lang.String[] {  };
    java.lang.String[] str_array35 = i18n31.getStrings(str_array33, "hi!");
    java.lang.String[] str_array37 = i18n26.getStrings(str_array35, "GMCrx");
    java.lang.String[] str_array39 = i18n21.getStrings(str_array35, "GMC");
    java.lang.String[] str_array41 = i18n15.getStrings(str_array35, "GMCw");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache43 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n44 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char45 = i18n44.getColorChar();
    char char46 = i18n44.getColorChar();
    char char47 = i18n44.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache48 = i18n44.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n49 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char50 = i18n49.getColorChar();
    char char51 = i18n49.getColorChar();
    char char52 = i18n49.getColorChar();
    char char53 = i18n49.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n54 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache55 = i18n54.getBundleCache$spigot_1_8();
    java.lang.String[] str_array56 = new java.lang.String[] {  };
    java.lang.String[] str_array58 = i18n54.getStrings(str_array56, "hi!");
    java.lang.String[] str_array60 = i18n49.getStrings(str_array58, "GMCrx");
    java.lang.String[] str_array62 = i18n44.getStrings(str_array60, "GMCt");
    java.lang.String[] str_array64 = i18n15.getStrings(str_array62, "hi!");
    // The following exception was thrown during execution in test generation
    try {
    boolean b65 = commandLobby0.execute(commandSender12, command13, "GMCry", str_array64);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lobby"+ "'", str8.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "lobby"+ "'", str9.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "lobby"+ "'", str10.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "lobby"+ "'", str11.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test230"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender3 = null;
    org.bukkit.command.Command command4 = null;
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char7 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n6.getBundleCache$spigot_1_8();
    char char9 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n6.getBundleCache$spigot_1_8();
    char char11 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    char char14 = i18n12.getColorChar();
    char char15 = i18n12.getColorChar();
    char char16 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n17.getBundleCache$spigot_1_8();
    java.lang.String[] str_array19 = new java.lang.String[] {  };
    java.lang.String[] str_array21 = i18n17.getStrings(str_array19, "hi!");
    java.lang.String[] str_array23 = i18n12.getStrings(str_array21, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    char char26 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n24.getBundleCache$spigot_1_8();
    char char28 = i18n24.getColorChar();
    char char29 = i18n24.getColorChar();
    char char30 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    char char33 = i18n31.getColorChar();
    char char34 = i18n31.getColorChar();
    char char35 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n36.getBundleCache$spigot_1_8();
    java.lang.String[] str_array38 = new java.lang.String[] {  };
    java.lang.String[] str_array40 = i18n36.getStrings(str_array38, "hi!");
    java.lang.String[] str_array42 = i18n31.getStrings(str_array40, "GMCrx");
    java.lang.String[] str_array44 = i18n24.getStrings(str_array40, "friends");
    java.lang.String[] str_array46 = i18n12.getStrings(str_array44, "");
    java.lang.String[] str_array48 = i18n6.getStrings(str_array44, "GMCw");
    // The following exception was thrown during execution in test generation
    try {
    boolean b49 = commandFriends0.execute(commandSender3, command4, "friends", str_array48);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test231"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    java.util.Locale locale6 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str7 = resourceBundleCache4.get("vanish", locale6);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test232"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    java.lang.String str8 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender9 = null;
    org.bukkit.command.Command command10 = null;
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    char char14 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n12.getBundleCache$spigot_1_8();
    char char17 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n18.getBundleCache$spigot_1_8();
    char char22 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    char char27 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n25.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n25.getBundleCache$spigot_1_8();
    char char30 = i18n25.getColorChar();
    char char31 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char33 = i18n32.getColorChar();
    char char34 = i18n32.getColorChar();
    char char35 = i18n32.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n32.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n37 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char38 = i18n37.getColorChar();
    char char39 = i18n37.getColorChar();
    char char40 = i18n37.getColorChar();
    char char41 = i18n37.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n42 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache43 = i18n42.getBundleCache$spigot_1_8();
    java.lang.String[] str_array44 = new java.lang.String[] {  };
    java.lang.String[] str_array46 = i18n42.getStrings(str_array44, "hi!");
    java.lang.String[] str_array48 = i18n37.getStrings(str_array46, "GMCrx");
    java.lang.String[] str_array50 = i18n32.getStrings(str_array48, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n51 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache52 = i18n51.getBundleCache$spigot_1_8();
    java.lang.String[] str_array53 = new java.lang.String[] {  };
    java.lang.String[] str_array55 = i18n51.getStrings(str_array53, "hi!");
    java.lang.String[] str_array57 = i18n32.getStrings(str_array55, "groundmc.lobby.hide_players");
    java.lang.String[] str_array59 = i18n25.getStrings(str_array57, "lang.lobby");
    java.lang.String[] str_array61 = i18n18.getStrings(str_array59, "hi!");
    java.lang.String[] str_array63 = i18n12.getStrings(str_array61, "GMCw");
    // The following exception was thrown during execution in test generation
    try {
    boolean b64 = commandLobby0.execute(commandSender9, command10, "vanish", str_array61);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lobby"+ "'", str8.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test233"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender2 = null;
    org.bukkit.command.Command command3 = null;
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n5.getBundleCache$spigot_1_8();
    char char8 = i18n5.getColorChar();
    char char9 = i18n5.getColorChar();
    char char10 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n5.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    char char14 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n17.getBundleCache$spigot_1_8();
    char char20 = i18n17.getColorChar();
    char char21 = i18n17.getColorChar();
    char char22 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n24.getBundleCache$spigot_1_8();
    char char27 = i18n24.getColorChar();
    char char28 = i18n24.getColorChar();
    char char29 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n24.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n24.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char33 = i18n32.getColorChar();
    char char34 = i18n32.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n32.getBundleCache$spigot_1_8();
    char char36 = i18n32.getColorChar();
    char char37 = i18n32.getColorChar();
    char char38 = i18n32.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n39 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char40 = i18n39.getColorChar();
    char char41 = i18n39.getColorChar();
    char char42 = i18n39.getColorChar();
    char char43 = i18n39.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n44 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache45 = i18n44.getBundleCache$spigot_1_8();
    java.lang.String[] str_array46 = new java.lang.String[] {  };
    java.lang.String[] str_array48 = i18n44.getStrings(str_array46, "hi!");
    java.lang.String[] str_array50 = i18n39.getStrings(str_array48, "GMCrx");
    java.lang.String[] str_array52 = i18n32.getStrings(str_array48, "friends");
    java.lang.String[] str_array54 = i18n24.getStrings(str_array52, "GMCt");
    java.lang.String[] str_array56 = i18n17.getStrings(str_array52, "friend");
    gtlp.groundmc.lobby.util.I18n i18n57 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char58 = i18n57.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache59 = i18n57.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache60 = i18n57.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache61 = i18n57.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache62 = i18n57.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n63 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char64 = i18n63.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache65 = i18n63.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache66 = i18n63.getBundleCache$spigot_1_8();
    char char67 = i18n63.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n68 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char69 = i18n68.getColorChar();
    char char70 = i18n68.getColorChar();
    char char71 = i18n68.getColorChar();
    char char72 = i18n68.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n73 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache74 = i18n73.getBundleCache$spigot_1_8();
    java.lang.String[] str_array75 = new java.lang.String[] {  };
    java.lang.String[] str_array77 = i18n73.getStrings(str_array75, "hi!");
    java.lang.String[] str_array79 = i18n68.getStrings(str_array77, "GMCrx");
    java.lang.String[] str_array81 = i18n63.getStrings(str_array77, "GMC");
    java.lang.String[] str_array83 = i18n57.getStrings(str_array77, "GMCw");
    java.lang.String[] str_array85 = i18n17.getStrings(str_array83, "groundmc.lobby.admin");
    java.lang.String[] str_array87 = i18n12.getStrings(str_array83, "GMCry");
    java.lang.String[] str_array89 = i18n5.getStrings(str_array87, "groundmc.lobby.silent");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str90 = commandLobby0.getTabCompletion(commandSender2, command3, "friends", str_array87);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char67 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char69 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char70 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char71 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char72 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array89);

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test234"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    java.lang.String str8 = commandVanish0.getName();
    java.lang.String str9 = commandVanish0.getName();
    java.lang.String str10 = commandVanish0.getName();
    java.lang.String str11 = commandVanish0.getName();
    java.lang.String str12 = commandVanish0.getName();
    java.lang.String str13 = commandVanish0.getName();
    java.lang.String str14 = commandVanish0.getName();
    java.lang.String str15 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender16 = null;
    org.bukkit.command.Command command17 = null;
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n19.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n19.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n19.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n19.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n25.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n25.getBundleCache$spigot_1_8();
    char char29 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char31 = i18n30.getColorChar();
    char char32 = i18n30.getColorChar();
    char char33 = i18n30.getColorChar();
    char char34 = i18n30.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n35 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n35.getBundleCache$spigot_1_8();
    java.lang.String[] str_array37 = new java.lang.String[] {  };
    java.lang.String[] str_array39 = i18n35.getStrings(str_array37, "hi!");
    java.lang.String[] str_array41 = i18n30.getStrings(str_array39, "GMCrx");
    java.lang.String[] str_array43 = i18n25.getStrings(str_array39, "GMC");
    java.lang.String[] str_array45 = i18n19.getStrings(str_array39, "GMCw");
    // The following exception was thrown during execution in test generation
    try {
    boolean b46 = commandVanish0.execute(commandSender16, command17, "GMCt", str_array39);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "vanish"+ "'", str9.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "vanish"+ "'", str10.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "vanish"+ "'", str11.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "vanish"+ "'", str12.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "vanish"+ "'", str13.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "vanish"+ "'", str14.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "vanish"+ "'", str15.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test235"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender8 = null;
    org.bukkit.command.Command command9 = null;
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n11.getBundleCache$spigot_1_8();
    char char14 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n11.getBundleCache$spigot_1_8();
    char char16 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    char char19 = i18n17.getColorChar();
    char char20 = i18n17.getColorChar();
    char char21 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n22.getBundleCache$spigot_1_8();
    java.lang.String[] str_array24 = new java.lang.String[] {  };
    java.lang.String[] str_array26 = i18n22.getStrings(str_array24, "hi!");
    java.lang.String[] str_array28 = i18n17.getStrings(str_array26, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char30 = i18n29.getColorChar();
    char char31 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n29.getBundleCache$spigot_1_8();
    char char33 = i18n29.getColorChar();
    char char34 = i18n29.getColorChar();
    char char35 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char37 = i18n36.getColorChar();
    char char38 = i18n36.getColorChar();
    char char39 = i18n36.getColorChar();
    char char40 = i18n36.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n41 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n41.getBundleCache$spigot_1_8();
    java.lang.String[] str_array43 = new java.lang.String[] {  };
    java.lang.String[] str_array45 = i18n41.getStrings(str_array43, "hi!");
    java.lang.String[] str_array47 = i18n36.getStrings(str_array45, "GMCrx");
    java.lang.String[] str_array49 = i18n29.getStrings(str_array45, "friends");
    java.lang.String[] str_array51 = i18n17.getStrings(str_array49, "");
    java.lang.String[] str_array53 = i18n11.getStrings(str_array49, "GMCw");
    // The following exception was thrown during execution in test generation
    try {
    boolean b54 = commandCoins0.execute(commandSender8, command9, "", str_array53);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test236"); }

    org.joda.time.DateTime dateTime2 = null;
    // The following exception was thrown during execution in test generation
    try {
    gtlp.groundmc.lobby.Relationship relationship3 = new gtlp.groundmc.lobby.Relationship("", "groundmc.lobby.admin", dateTime2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test237"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender2 = null;
    org.bukkit.command.Command command3 = null;
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    char char11 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n9.getBundleCache$spigot_1_8();
    char char13 = i18n9.getColorChar();
    char char14 = i18n9.getColorChar();
    char char15 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    char char18 = i18n16.getColorChar();
    char char19 = i18n16.getColorChar();
    char char20 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n21.getBundleCache$spigot_1_8();
    java.lang.String[] str_array23 = new java.lang.String[] {  };
    java.lang.String[] str_array25 = i18n21.getStrings(str_array23, "hi!");
    java.lang.String[] str_array27 = i18n16.getStrings(str_array25, "GMCrx");
    java.lang.String[] str_array29 = i18n9.getStrings(str_array25, "friends");
    java.lang.String[] str_array31 = i18n7.getStrings(str_array29, "vanish");
    java.lang.String[] str_array33 = i18n5.getStrings(str_array29, "GMCx");
    // The following exception was thrown during execution in test generation
    try {
    boolean b34 = commandCoins0.execute(commandSender2, command3, "GMCsilent", str_array29);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test238"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    java.lang.String str8 = commandVanish0.getName();
    java.lang.String str9 = commandVanish0.getName();
    java.lang.String str10 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender11 = null;
    org.bukkit.command.Command command12 = null;
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n14.getBundleCache$spigot_1_8();
    char char16 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    char char21 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n19.getBundleCache$spigot_1_8();
    char char23 = i18n19.getColorChar();
    char char24 = i18n19.getColorChar();
    char char25 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    char char28 = i18n26.getColorChar();
    char char29 = i18n26.getColorChar();
    char char30 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n31.getBundleCache$spigot_1_8();
    java.lang.String[] str_array33 = new java.lang.String[] {  };
    java.lang.String[] str_array35 = i18n31.getStrings(str_array33, "hi!");
    java.lang.String[] str_array37 = i18n26.getStrings(str_array35, "GMCrx");
    java.lang.String[] str_array39 = i18n19.getStrings(str_array35, "friends");
    java.lang.String[] str_array41 = i18n17.getStrings(str_array39, "vanish");
    java.lang.String[] str_array43 = i18n14.getStrings(str_array41, "GMCt");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str44 = commandVanish0.getTabCompletion(commandSender11, command12, "groundmc.lobby.silent", str_array41);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "vanish"+ "'", str9.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "vanish"+ "'", str10.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test239"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    java.lang.String str8 = commandFriend0.getName();
    java.lang.String str9 = commandFriend0.getName();
    java.lang.String str10 = commandFriend0.getName();
    java.lang.String str11 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender12 = null;
    org.bukkit.command.Command command13 = null;
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n15.getBundleCache$spigot_1_8();
    char char19 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    char char22 = i18n20.getColorChar();
    char char23 = i18n20.getColorChar();
    char char24 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n25.getBundleCache$spigot_1_8();
    java.lang.String[] str_array27 = new java.lang.String[] {  };
    java.lang.String[] str_array29 = i18n25.getStrings(str_array27, "hi!");
    java.lang.String[] str_array31 = i18n20.getStrings(str_array29, "GMCrx");
    java.lang.String[] str_array33 = i18n15.getStrings(str_array29, "GMC");
    gtlp.groundmc.lobby.util.I18n i18n34 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char35 = i18n34.getColorChar();
    char char36 = i18n34.getColorChar();
    char char37 = i18n34.getColorChar();
    char char38 = i18n34.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n39 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache40 = i18n39.getBundleCache$spigot_1_8();
    java.lang.String[] str_array41 = new java.lang.String[] {  };
    java.lang.String[] str_array43 = i18n39.getStrings(str_array41, "hi!");
    java.lang.String[] str_array45 = i18n34.getStrings(str_array43, "GMCrx");
    java.lang.String[] str_array47 = i18n15.getStrings(str_array43, "GMCz");
    // The following exception was thrown during execution in test generation
    try {
    boolean b48 = commandFriend0.execute(commandSender12, command13, "GMCt", str_array47);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friend"+ "'", str8.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "friend"+ "'", str9.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "friend"+ "'", str10.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "friend"+ "'", str11.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test240"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    java.lang.String str8 = commandFriend0.getName();
    java.lang.String str9 = commandFriend0.getName();
    java.lang.String str10 = commandFriend0.getName();
    java.lang.String str11 = commandFriend0.getName();
    java.lang.String str12 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender13 = null;
    org.bukkit.command.Command command14 = null;
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    char char18 = i18n16.getColorChar();
    char char19 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char22 = i18n21.getColorChar();
    char char23 = i18n21.getColorChar();
    char char24 = i18n21.getColorChar();
    char char25 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n26.getBundleCache$spigot_1_8();
    java.lang.String[] str_array28 = new java.lang.String[] {  };
    java.lang.String[] str_array30 = i18n26.getStrings(str_array28, "hi!");
    java.lang.String[] str_array32 = i18n21.getStrings(str_array30, "GMCrx");
    java.lang.String[] str_array34 = i18n16.getStrings(str_array32, "GMCt");
    // The following exception was thrown during execution in test generation
    try {
    boolean b35 = commandFriend0.execute(commandSender13, command14, "hi!", str_array32);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friend"+ "'", str8.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "friend"+ "'", str9.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "friend"+ "'", str10.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "friend"+ "'", str11.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "friend"+ "'", str12.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test241"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n i18n1 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char2 = i18n1.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n1.getBundleCache$spigot_1_8();
    char char4 = i18n1.getColorChar();
    char char5 = i18n1.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n1.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char8 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n13.getBundleCache$spigot_1_8();
    char char17 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    char char21 = i18n18.getColorChar();
    char char22 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n23.getBundleCache$spigot_1_8();
    java.lang.String[] str_array25 = new java.lang.String[] {  };
    java.lang.String[] str_array27 = i18n23.getStrings(str_array25, "hi!");
    java.lang.String[] str_array29 = i18n18.getStrings(str_array27, "GMCrx");
    java.lang.String[] str_array31 = i18n13.getStrings(str_array27, "GMC");
    java.lang.String[] str_array33 = i18n7.getStrings(str_array27, "GMCw");
    java.lang.String[] str_array35 = i18n1.getStrings(str_array33, "GMCy");
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char37 = i18n36.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache38 = i18n36.getBundleCache$spigot_1_8();
    char char39 = i18n36.getColorChar();
    char char40 = i18n36.getColorChar();
    char char41 = i18n36.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n36.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache43 = i18n36.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n44 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char45 = i18n44.getColorChar();
    char char46 = i18n44.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache47 = i18n44.getBundleCache$spigot_1_8();
    char char48 = i18n44.getColorChar();
    char char49 = i18n44.getColorChar();
    char char50 = i18n44.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n51 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char52 = i18n51.getColorChar();
    char char53 = i18n51.getColorChar();
    char char54 = i18n51.getColorChar();
    char char55 = i18n51.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n56 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache57 = i18n56.getBundleCache$spigot_1_8();
    java.lang.String[] str_array58 = new java.lang.String[] {  };
    java.lang.String[] str_array60 = i18n56.getStrings(str_array58, "hi!");
    java.lang.String[] str_array62 = i18n51.getStrings(str_array60, "GMCrx");
    java.lang.String[] str_array64 = i18n44.getStrings(str_array60, "friends");
    java.lang.String[] str_array66 = i18n36.getStrings(str_array64, "GMCt");
    java.lang.String[] str_array68 = i18n1.getStrings(str_array66, "coins");
    java.util.Locale locale69 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array70 = i18n0.getStrings(str_array68, locale69);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test242"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    java.lang.String str8 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender9 = null;
    org.bukkit.command.Command command10 = null;
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    char char14 = i18n12.getColorChar();
    char char15 = i18n12.getColorChar();
    char char16 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n17.getBundleCache$spigot_1_8();
    java.lang.String[] str_array19 = new java.lang.String[] {  };
    java.lang.String[] str_array21 = i18n17.getStrings(str_array19, "hi!");
    java.lang.String[] str_array23 = i18n12.getStrings(str_array21, "GMCrx");
    char char24 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    char char27 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n25.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char30 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n29.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n29.getBundleCache$spigot_1_8();
    char char33 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n34 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char35 = i18n34.getColorChar();
    char char36 = i18n34.getColorChar();
    char char37 = i18n34.getColorChar();
    char char38 = i18n34.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n39 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache40 = i18n39.getBundleCache$spigot_1_8();
    java.lang.String[] str_array41 = new java.lang.String[] {  };
    java.lang.String[] str_array43 = i18n39.getStrings(str_array41, "hi!");
    java.lang.String[] str_array45 = i18n34.getStrings(str_array43, "GMCrx");
    java.lang.String[] str_array47 = i18n29.getStrings(str_array43, "GMC");
    java.lang.String[] str_array49 = i18n25.getStrings(str_array43, "GMCx");
    java.lang.String[] str_array51 = i18n12.getStrings(str_array49, "hi!");
    gtlp.groundmc.lobby.util.I18n i18n52 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char53 = i18n52.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache54 = i18n52.getBundleCache$spigot_1_8();
    char char55 = i18n52.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n56 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char57 = i18n56.getColorChar();
    char char58 = i18n56.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache59 = i18n56.getBundleCache$spigot_1_8();
    char char60 = i18n56.getColorChar();
    char char61 = i18n56.getColorChar();
    char char62 = i18n56.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n63 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char64 = i18n63.getColorChar();
    char char65 = i18n63.getColorChar();
    char char66 = i18n63.getColorChar();
    char char67 = i18n63.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n68 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache69 = i18n68.getBundleCache$spigot_1_8();
    java.lang.String[] str_array70 = new java.lang.String[] {  };
    java.lang.String[] str_array72 = i18n68.getStrings(str_array70, "hi!");
    java.lang.String[] str_array74 = i18n63.getStrings(str_array72, "GMCrx");
    java.lang.String[] str_array76 = i18n56.getStrings(str_array72, "friends");
    java.lang.String[] str_array78 = i18n52.getStrings(str_array76, "GMCsilent");
    java.lang.String[] str_array80 = i18n12.getStrings(str_array76, "");
    // The following exception was thrown during execution in test generation
    try {
    boolean b81 = commandVanish0.execute(commandSender9, command10, "friends", str_array76);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char62 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char67 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test243"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender2 = null;
    org.bukkit.command.Command command3 = null;
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n5.getBundleCache$spigot_1_8();
    char char8 = i18n5.getColorChar();
    char char9 = i18n5.getColorChar();
    char char10 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n11.getBundleCache$spigot_1_8();
    java.lang.String[] str_array13 = new java.lang.String[] {  };
    java.lang.String[] str_array15 = i18n11.getStrings(str_array13, "hi!");
    java.lang.String[] str_array17 = i18n5.getStrings(str_array15, "GMCy");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str18 = commandFriends0.getTabCompletion(commandSender2, command3, "groundmc.lobby.vanish", str_array17);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test244"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    char char3 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    char char5 = i18n0.getColorChar();
    java.util.Locale locale7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = i18n0.getString("GMCrx", locale7);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test245"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender6 = null;
    org.bukkit.command.Command command7 = null;
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n9.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n9.getBundleCache$spigot_1_8();
    char char13 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    char char16 = i18n14.getColorChar();
    char char17 = i18n14.getColorChar();
    char char18 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n19.getBundleCache$spigot_1_8();
    java.lang.String[] str_array21 = new java.lang.String[] {  };
    java.lang.String[] str_array23 = i18n19.getStrings(str_array21, "hi!");
    java.lang.String[] str_array25 = i18n14.getStrings(str_array23, "GMCrx");
    java.lang.String[] str_array27 = i18n9.getStrings(str_array23, "GMC");
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char29 = i18n28.getColorChar();
    char char30 = i18n28.getColorChar();
    char char31 = i18n28.getColorChar();
    char char32 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n33.getBundleCache$spigot_1_8();
    java.lang.String[] str_array35 = new java.lang.String[] {  };
    java.lang.String[] str_array37 = i18n33.getStrings(str_array35, "hi!");
    java.lang.String[] str_array39 = i18n28.getStrings(str_array37, "GMCrx");
    java.lang.String[] str_array41 = i18n9.getStrings(str_array37, "GMCz");
    // The following exception was thrown during execution in test generation
    try {
    boolean b42 = commandVanish0.execute(commandSender6, command7, "GMCx", str_array37);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test246"); }

    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = new gtlp.groundmc.lobby.util.I18n.ResourceBundleCache("GMCx");
    java.util.concurrent.ConcurrentHashMap<java.util.Locale,java.util.ResourceBundle> concurrenthashmap_locale_resourceBundle2 = resourceBundleCache1.getBackingMap$spigot_1_8();
    java.util.Locale locale4 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str5 = resourceBundleCache1.get("groundmc.lobby.vanish", locale4);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(concurrenthashmap_locale_resourceBundle2);

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test247"); }

    org.joda.time.DateTime dateTime2 = null;
    // The following exception was thrown during execution in test generation
    try {
    gtlp.groundmc.lobby.Relationship relationship3 = new gtlp.groundmc.lobby.Relationship("friend", "GMChide", dateTime2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test248"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    java.lang.String str8 = commandLobby0.getName();
    java.lang.String str9 = commandLobby0.getName();
    java.lang.String str10 = commandLobby0.getName();
    java.lang.String str11 = commandLobby0.getName();
    java.lang.String str12 = commandLobby0.getName();
    java.lang.String str13 = commandLobby0.getName();
    java.lang.String str14 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender15 = null;
    org.bukkit.command.Command command16 = null;
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    char char21 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    char char25 = i18n23.getColorChar();
    char char26 = i18n23.getColorChar();
    char char27 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n28.getBundleCache$spigot_1_8();
    java.lang.String[] str_array30 = new java.lang.String[] {  };
    java.lang.String[] str_array32 = i18n28.getStrings(str_array30, "hi!");
    java.lang.String[] str_array34 = i18n23.getStrings(str_array32, "GMCrx");
    java.lang.String[] str_array36 = i18n18.getStrings(str_array34, "GMCt");
    // The following exception was thrown during execution in test generation
    try {
    boolean b37 = commandLobby0.execute(commandSender15, command16, "GMC", str_array34);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lobby"+ "'", str8.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "lobby"+ "'", str9.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "lobby"+ "'", str10.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "lobby"+ "'", str11.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "lobby"+ "'", str12.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "lobby"+ "'", str13.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "lobby"+ "'", str14.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test249"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender4 = null;
    org.bukkit.command.Command command5 = null;
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char8 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n13.getBundleCache$spigot_1_8();
    char char17 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    char char21 = i18n18.getColorChar();
    char char22 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n23.getBundleCache$spigot_1_8();
    java.lang.String[] str_array25 = new java.lang.String[] {  };
    java.lang.String[] str_array27 = i18n23.getStrings(str_array25, "hi!");
    java.lang.String[] str_array29 = i18n18.getStrings(str_array27, "GMCrx");
    java.lang.String[] str_array31 = i18n13.getStrings(str_array27, "GMC");
    java.lang.String[] str_array33 = i18n7.getStrings(str_array27, "GMCw");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char37 = i18n36.getColorChar();
    char char38 = i18n36.getColorChar();
    char char39 = i18n36.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache40 = i18n36.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n41 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char42 = i18n41.getColorChar();
    char char43 = i18n41.getColorChar();
    char char44 = i18n41.getColorChar();
    char char45 = i18n41.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n46 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache47 = i18n46.getBundleCache$spigot_1_8();
    java.lang.String[] str_array48 = new java.lang.String[] {  };
    java.lang.String[] str_array50 = i18n46.getStrings(str_array48, "hi!");
    java.lang.String[] str_array52 = i18n41.getStrings(str_array50, "GMCrx");
    java.lang.String[] str_array54 = i18n36.getStrings(str_array52, "GMCt");
    java.lang.String[] str_array56 = i18n7.getStrings(str_array54, "hi!");
    // The following exception was thrown during execution in test generation
    try {
    boolean b57 = commandFriends0.execute(commandSender4, command5, "coins", str_array54);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test250"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n5.getBundleCache$spigot_1_8();
    java.lang.String[] str_array7 = new java.lang.String[] {  };
    java.lang.String[] str_array9 = i18n5.getStrings(str_array7, "hi!");
    java.lang.String[] str_array11 = i18n0.getStrings(str_array9, "GMCrx");
    char char12 = i18n0.getColorChar();
    char char13 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    char char16 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n14.getBundleCache$spigot_1_8();
    char char18 = i18n14.getColorChar();
    char char19 = i18n14.getColorChar();
    char char20 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char22 = i18n21.getColorChar();
    char char23 = i18n21.getColorChar();
    char char24 = i18n21.getColorChar();
    char char25 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n26.getBundleCache$spigot_1_8();
    java.lang.String[] str_array28 = new java.lang.String[] {  };
    java.lang.String[] str_array30 = i18n26.getStrings(str_array28, "hi!");
    java.lang.String[] str_array32 = i18n21.getStrings(str_array30, "GMCrx");
    java.lang.String[] str_array34 = i18n14.getStrings(str_array30, "friends");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n37 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char38 = i18n37.getColorChar();
    char char39 = i18n37.getColorChar();
    char char40 = i18n37.getColorChar();
    char char41 = i18n37.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n42 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache43 = i18n42.getBundleCache$spigot_1_8();
    java.lang.String[] str_array44 = new java.lang.String[] {  };
    java.lang.String[] str_array46 = i18n42.getStrings(str_array44, "hi!");
    java.lang.String[] str_array48 = i18n37.getStrings(str_array46, "GMCrx");
    java.lang.String[] str_array50 = i18n14.getStrings(str_array48, "");
    java.util.Locale locale51 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array52 = i18n0.getStrings(str_array50, locale51);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test251"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    char char5 = i18n0.getColorChar();
    char char6 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n7.getBundleCache$spigot_1_8();
    java.lang.String[] str_array9 = new java.lang.String[] {  };
    java.lang.String[] str_array11 = i18n7.getStrings(str_array9, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n7.getBundleCache$spigot_1_8();
    char char14 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n19.getBundleCache$spigot_1_8();
    java.lang.String[] str_array21 = new java.lang.String[] {  };
    java.lang.String[] str_array23 = i18n19.getStrings(str_array21, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n19.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n25.getBundleCache$spigot_1_8();
    char char28 = i18n25.getColorChar();
    char char29 = i18n25.getColorChar();
    char char30 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n25.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char33 = i18n32.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n32.getBundleCache$spigot_1_8();
    char char35 = i18n32.getColorChar();
    char char36 = i18n32.getColorChar();
    char char37 = i18n32.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache38 = i18n32.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache39 = i18n32.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char41 = i18n40.getColorChar();
    char char42 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache43 = i18n40.getBundleCache$spigot_1_8();
    char char44 = i18n40.getColorChar();
    char char45 = i18n40.getColorChar();
    char char46 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n47 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char48 = i18n47.getColorChar();
    char char49 = i18n47.getColorChar();
    char char50 = i18n47.getColorChar();
    char char51 = i18n47.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n52 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache53 = i18n52.getBundleCache$spigot_1_8();
    java.lang.String[] str_array54 = new java.lang.String[] {  };
    java.lang.String[] str_array56 = i18n52.getStrings(str_array54, "hi!");
    java.lang.String[] str_array58 = i18n47.getStrings(str_array56, "GMCrx");
    java.lang.String[] str_array60 = i18n40.getStrings(str_array56, "friends");
    java.lang.String[] str_array62 = i18n32.getStrings(str_array60, "GMCt");
    java.lang.String[] str_array64 = i18n25.getStrings(str_array60, "friend");
    java.lang.String[] str_array66 = i18n19.getStrings(str_array60, "GMCt");
    java.lang.String[] str_array68 = i18n15.getStrings(str_array60, "groundmc.lobby.admin");
    java.lang.String[] str_array70 = i18n7.getStrings(str_array68, "lang.lobby");
    java.lang.String[] str_array72 = i18n0.getStrings(str_array68, "GMCry");
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str75 = i18n0.getString("GMChide", "GMC");
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test252"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender2 = null;
    org.bukkit.command.Command command3 = null;
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    char char7 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n5.getBundleCache$spigot_1_8();
    char char9 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n10.getBundleCache$spigot_1_8();
    char char13 = i18n10.getColorChar();
    char char14 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n22.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n22.getBundleCache$spigot_1_8();
    char char26 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    char char29 = i18n27.getColorChar();
    char char30 = i18n27.getColorChar();
    char char31 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n32.getBundleCache$spigot_1_8();
    java.lang.String[] str_array34 = new java.lang.String[] {  };
    java.lang.String[] str_array36 = i18n32.getStrings(str_array34, "hi!");
    java.lang.String[] str_array38 = i18n27.getStrings(str_array36, "GMCrx");
    java.lang.String[] str_array40 = i18n22.getStrings(str_array36, "GMC");
    java.lang.String[] str_array42 = i18n16.getStrings(str_array36, "GMCw");
    java.lang.String[] str_array44 = i18n10.getStrings(str_array42, "GMCy");
    java.lang.String[] str_array46 = i18n5.getStrings(str_array42, "GMCy");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str47 = commandFriend0.getTabCompletion(commandSender2, command3, "lang.lobby", str_array42);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test253"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    java.lang.String str6 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender7 = null;
    org.bukkit.command.Command command8 = null;
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n14.getBundleCache$spigot_1_8();
    java.lang.String[] str_array16 = new java.lang.String[] {  };
    java.lang.String[] str_array18 = i18n14.getStrings(str_array16, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n20.getBundleCache$spigot_1_8();
    char char23 = i18n20.getColorChar();
    char char24 = i18n20.getColorChar();
    char char25 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n27.getBundleCache$spigot_1_8();
    char char30 = i18n27.getColorChar();
    char char31 = i18n27.getColorChar();
    char char32 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n27.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n27.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n35 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char36 = i18n35.getColorChar();
    char char37 = i18n35.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache38 = i18n35.getBundleCache$spigot_1_8();
    char char39 = i18n35.getColorChar();
    char char40 = i18n35.getColorChar();
    char char41 = i18n35.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n42 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char43 = i18n42.getColorChar();
    char char44 = i18n42.getColorChar();
    char char45 = i18n42.getColorChar();
    char char46 = i18n42.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n47 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache48 = i18n47.getBundleCache$spigot_1_8();
    java.lang.String[] str_array49 = new java.lang.String[] {  };
    java.lang.String[] str_array51 = i18n47.getStrings(str_array49, "hi!");
    java.lang.String[] str_array53 = i18n42.getStrings(str_array51, "GMCrx");
    java.lang.String[] str_array55 = i18n35.getStrings(str_array51, "friends");
    java.lang.String[] str_array57 = i18n27.getStrings(str_array55, "GMCt");
    java.lang.String[] str_array59 = i18n20.getStrings(str_array55, "friend");
    java.lang.String[] str_array61 = i18n14.getStrings(str_array55, "GMCt");
    java.lang.String[] str_array63 = i18n10.getStrings(str_array55, "groundmc.lobby.admin");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str64 = commandFriends0.getTabCompletion(commandSender7, command8, "GMCy", str_array63);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test254"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    char char4 = i18n0.getColorChar();
    char char5 = i18n0.getColorChar();
    char char6 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char8 = i18n7.getColorChar();
    char char9 = i18n7.getColorChar();
    char char10 = i18n7.getColorChar();
    char char11 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n12.getBundleCache$spigot_1_8();
    java.lang.String[] str_array14 = new java.lang.String[] {  };
    java.lang.String[] str_array16 = i18n12.getStrings(str_array14, "hi!");
    java.lang.String[] str_array18 = i18n7.getStrings(str_array16, "GMCrx");
    java.lang.String[] str_array20 = i18n0.getStrings(str_array16, "friends");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    char char25 = i18n23.getColorChar();
    char char26 = i18n23.getColorChar();
    char char27 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n28.getBundleCache$spigot_1_8();
    java.lang.String[] str_array30 = new java.lang.String[] {  };
    java.lang.String[] str_array32 = i18n28.getStrings(str_array30, "hi!");
    java.lang.String[] str_array34 = i18n23.getStrings(str_array32, "GMCrx");
    java.lang.String[] str_array36 = i18n0.getStrings(str_array34, "");
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str39 = i18n0.getString("friend", "lang.lobby");
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test255"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    java.lang.String str8 = commandVanish0.getName();
    java.lang.String str9 = commandVanish0.getName();
    java.lang.String str10 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender11 = null;
    org.bukkit.command.Command command12 = null;
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    char char16 = i18n14.getColorChar();
    char char17 = i18n14.getColorChar();
    char char18 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n19.getBundleCache$spigot_1_8();
    java.lang.String[] str_array21 = new java.lang.String[] {  };
    java.lang.String[] str_array23 = i18n19.getStrings(str_array21, "hi!");
    java.lang.String[] str_array25 = i18n14.getStrings(str_array23, "GMCrx");
    char char26 = i18n14.getColorChar();
    char char27 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char29 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n28.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n28.getBundleCache$spigot_1_8();
    char char32 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char34 = i18n33.getColorChar();
    char char35 = i18n33.getColorChar();
    char char36 = i18n33.getColorChar();
    char char37 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n38 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache39 = i18n38.getBundleCache$spigot_1_8();
    java.lang.String[] str_array40 = new java.lang.String[] {  };
    java.lang.String[] str_array42 = i18n38.getStrings(str_array40, "hi!");
    java.lang.String[] str_array44 = i18n33.getStrings(str_array42, "GMCrx");
    java.lang.String[] str_array46 = i18n28.getStrings(str_array42, "GMC");
    java.lang.String[] str_array48 = i18n14.getStrings(str_array46, "GMCz");
    // The following exception was thrown during execution in test generation
    try {
    boolean b49 = commandVanish0.execute(commandSender11, command12, "lobby", str_array48);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "vanish"+ "'", str9.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "vanish"+ "'", str10.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test256"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender2 = null;
    org.bukkit.command.Command command3 = null;
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n5.getBundleCache$spigot_1_8();
    char char8 = i18n5.getColorChar();
    char char9 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n5.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n17.getBundleCache$spigot_1_8();
    char char21 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    char char24 = i18n22.getColorChar();
    char char25 = i18n22.getColorChar();
    char char26 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n27.getBundleCache$spigot_1_8();
    java.lang.String[] str_array29 = new java.lang.String[] {  };
    java.lang.String[] str_array31 = i18n27.getStrings(str_array29, "hi!");
    java.lang.String[] str_array33 = i18n22.getStrings(str_array31, "GMCrx");
    java.lang.String[] str_array35 = i18n17.getStrings(str_array31, "GMC");
    java.lang.String[] str_array37 = i18n11.getStrings(str_array31, "GMCw");
    java.lang.String[] str_array39 = i18n5.getStrings(str_array37, "GMCy");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str40 = commandCoins0.getTabCompletion(commandSender2, command3, "GMCsilent", str_array39);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test257"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender4 = null;
    org.bukkit.command.Command command5 = null;
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    char char11 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n9.getBundleCache$spigot_1_8();
    char char13 = i18n9.getColorChar();
    char char14 = i18n9.getColorChar();
    char char15 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    char char18 = i18n16.getColorChar();
    char char19 = i18n16.getColorChar();
    char char20 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n21.getBundleCache$spigot_1_8();
    java.lang.String[] str_array23 = new java.lang.String[] {  };
    java.lang.String[] str_array25 = i18n21.getStrings(str_array23, "hi!");
    java.lang.String[] str_array27 = i18n16.getStrings(str_array25, "GMCrx");
    java.lang.String[] str_array29 = i18n9.getStrings(str_array25, "friends");
    java.lang.String[] str_array31 = i18n7.getStrings(str_array29, "vanish");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str32 = commandCoins0.getTabCompletion(commandSender4, command5, "groundmc.lobby.vanish", str_array31);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test258"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender5 = null;
    org.bukkit.command.Command command6 = null;
    gtlp.groundmc.lobby.util.I18n i18n8 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char9 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n8.getBundleCache$spigot_1_8();
    char char11 = i18n8.getColorChar();
    char char12 = i18n8.getColorChar();
    char char13 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n8.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n8.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    char char18 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n16.getBundleCache$spigot_1_8();
    char char20 = i18n16.getColorChar();
    char char21 = i18n16.getColorChar();
    char char22 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    char char25 = i18n23.getColorChar();
    char char26 = i18n23.getColorChar();
    char char27 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n28.getBundleCache$spigot_1_8();
    java.lang.String[] str_array30 = new java.lang.String[] {  };
    java.lang.String[] str_array32 = i18n28.getStrings(str_array30, "hi!");
    java.lang.String[] str_array34 = i18n23.getStrings(str_array32, "GMCrx");
    java.lang.String[] str_array36 = i18n16.getStrings(str_array32, "friends");
    java.lang.String[] str_array38 = i18n8.getStrings(str_array36, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n39 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char40 = i18n39.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache41 = i18n39.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n39.getBundleCache$spigot_1_8();
    char char43 = i18n39.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n44 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char45 = i18n44.getColorChar();
    char char46 = i18n44.getColorChar();
    char char47 = i18n44.getColorChar();
    char char48 = i18n44.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n49 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache50 = i18n49.getBundleCache$spigot_1_8();
    java.lang.String[] str_array51 = new java.lang.String[] {  };
    java.lang.String[] str_array53 = i18n49.getStrings(str_array51, "hi!");
    java.lang.String[] str_array55 = i18n44.getStrings(str_array53, "GMCrx");
    java.lang.String[] str_array57 = i18n39.getStrings(str_array53, "GMC");
    java.lang.String[] str_array59 = i18n8.getStrings(str_array57, "groundmc.lobby.vanish");
    // The following exception was thrown during execution in test generation
    try {
    boolean b60 = commandVanish0.execute(commandSender5, command6, "friends", str_array59);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test259"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender8 = null;
    org.bukkit.command.Command command9 = null;
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    char char13 = i18n11.getColorChar();
    char char14 = i18n11.getColorChar();
    char char15 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n16.getBundleCache$spigot_1_8();
    java.lang.String[] str_array18 = new java.lang.String[] {  };
    java.lang.String[] str_array20 = i18n16.getStrings(str_array18, "hi!");
    java.lang.String[] str_array22 = i18n11.getStrings(str_array20, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    char char25 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n23.getBundleCache$spigot_1_8();
    char char27 = i18n23.getColorChar();
    char char28 = i18n23.getColorChar();
    char char29 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char31 = i18n30.getColorChar();
    char char32 = i18n30.getColorChar();
    char char33 = i18n30.getColorChar();
    char char34 = i18n30.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n35 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n35.getBundleCache$spigot_1_8();
    java.lang.String[] str_array37 = new java.lang.String[] {  };
    java.lang.String[] str_array39 = i18n35.getStrings(str_array37, "hi!");
    java.lang.String[] str_array41 = i18n30.getStrings(str_array39, "GMCrx");
    java.lang.String[] str_array43 = i18n23.getStrings(str_array39, "friends");
    java.lang.String[] str_array45 = i18n11.getStrings(str_array43, "");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str46 = commandVanish0.getTabCompletion(commandSender8, command9, "GMChide", str_array43);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test260"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    java.lang.String str8 = commandVanish0.getName();
    java.lang.String str9 = commandVanish0.getName();
    java.lang.String str10 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender11 = null;
    org.bukkit.command.Command command12 = null;
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    char char16 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n14.getBundleCache$spigot_1_8();
    char char18 = i18n14.getColorChar();
    char char19 = i18n14.getColorChar();
    char char20 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char22 = i18n21.getColorChar();
    char char23 = i18n21.getColorChar();
    char char24 = i18n21.getColorChar();
    char char25 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n26.getBundleCache$spigot_1_8();
    java.lang.String[] str_array28 = new java.lang.String[] {  };
    java.lang.String[] str_array30 = i18n26.getStrings(str_array28, "hi!");
    java.lang.String[] str_array32 = i18n21.getStrings(str_array30, "GMCrx");
    java.lang.String[] str_array34 = i18n14.getStrings(str_array30, "friends");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n37 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char38 = i18n37.getColorChar();
    char char39 = i18n37.getColorChar();
    char char40 = i18n37.getColorChar();
    char char41 = i18n37.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n42 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache43 = i18n42.getBundleCache$spigot_1_8();
    java.lang.String[] str_array44 = new java.lang.String[] {  };
    java.lang.String[] str_array46 = i18n42.getStrings(str_array44, "hi!");
    java.lang.String[] str_array48 = i18n37.getStrings(str_array46, "GMCrx");
    java.lang.String[] str_array50 = i18n14.getStrings(str_array48, "");
    // The following exception was thrown during execution in test generation
    try {
    boolean b51 = commandVanish0.execute(commandSender11, command12, "groundmc.lobby.admin", str_array50);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "vanish"+ "'", str9.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "vanish"+ "'", str10.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test261"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    char char3 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    char char5 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char7 = i18n6.getColorChar();
    char char8 = i18n6.getColorChar();
    char char9 = i18n6.getColorChar();
    char char10 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n11.getBundleCache$spigot_1_8();
    java.lang.String[] str_array13 = new java.lang.String[] {  };
    java.lang.String[] str_array15 = i18n11.getStrings(str_array13, "hi!");
    java.lang.String[] str_array17 = i18n6.getStrings(str_array15, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n18.getBundleCache$spigot_1_8();
    char char22 = i18n18.getColorChar();
    char char23 = i18n18.getColorChar();
    char char24 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    char char27 = i18n25.getColorChar();
    char char28 = i18n25.getColorChar();
    char char29 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n30.getBundleCache$spigot_1_8();
    java.lang.String[] str_array32 = new java.lang.String[] {  };
    java.lang.String[] str_array34 = i18n30.getStrings(str_array32, "hi!");
    java.lang.String[] str_array36 = i18n25.getStrings(str_array34, "GMCrx");
    java.lang.String[] str_array38 = i18n18.getStrings(str_array34, "friends");
    java.lang.String[] str_array40 = i18n6.getStrings(str_array38, "");
    java.lang.String[] str_array42 = i18n0.getStrings(str_array38, "GMCw");
    char char43 = i18n0.getColorChar();
    java.util.Locale locale45 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str46 = i18n0.getString("GMCt", locale45);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test262"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    java.lang.String str6 = commandFriends0.getName();
    java.lang.String str7 = commandFriends0.getName();
    java.lang.String str8 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender9 = null;
    org.bukkit.command.Command command10 = null;
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n12.getBundleCache$spigot_1_8();
    char char15 = i18n12.getColorChar();
    char char16 = i18n12.getColorChar();
    char char17 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    char char21 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n19.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n19.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n24.getBundleCache$spigot_1_8();
    char char27 = i18n24.getColorChar();
    char char28 = i18n24.getColorChar();
    char char29 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n24.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n31.getBundleCache$spigot_1_8();
    char char34 = i18n31.getColorChar();
    char char35 = i18n31.getColorChar();
    char char36 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n31.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache38 = i18n31.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n39 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char40 = i18n39.getColorChar();
    char char41 = i18n39.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n39.getBundleCache$spigot_1_8();
    char char43 = i18n39.getColorChar();
    char char44 = i18n39.getColorChar();
    char char45 = i18n39.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n46 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char47 = i18n46.getColorChar();
    char char48 = i18n46.getColorChar();
    char char49 = i18n46.getColorChar();
    char char50 = i18n46.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n51 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache52 = i18n51.getBundleCache$spigot_1_8();
    java.lang.String[] str_array53 = new java.lang.String[] {  };
    java.lang.String[] str_array55 = i18n51.getStrings(str_array53, "hi!");
    java.lang.String[] str_array57 = i18n46.getStrings(str_array55, "GMCrx");
    java.lang.String[] str_array59 = i18n39.getStrings(str_array55, "friends");
    java.lang.String[] str_array61 = i18n31.getStrings(str_array59, "GMCt");
    java.lang.String[] str_array63 = i18n24.getStrings(str_array59, "friend");
    gtlp.groundmc.lobby.util.I18n i18n64 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char65 = i18n64.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache66 = i18n64.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache67 = i18n64.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache68 = i18n64.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache69 = i18n64.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n70 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char71 = i18n70.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache72 = i18n70.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache73 = i18n70.getBundleCache$spigot_1_8();
    char char74 = i18n70.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n75 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char76 = i18n75.getColorChar();
    char char77 = i18n75.getColorChar();
    char char78 = i18n75.getColorChar();
    char char79 = i18n75.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n80 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache81 = i18n80.getBundleCache$spigot_1_8();
    java.lang.String[] str_array82 = new java.lang.String[] {  };
    java.lang.String[] str_array84 = i18n80.getStrings(str_array82, "hi!");
    java.lang.String[] str_array86 = i18n75.getStrings(str_array84, "GMCrx");
    java.lang.String[] str_array88 = i18n70.getStrings(str_array84, "GMC");
    java.lang.String[] str_array90 = i18n64.getStrings(str_array84, "GMCw");
    java.lang.String[] str_array92 = i18n24.getStrings(str_array90, "groundmc.lobby.admin");
    java.lang.String[] str_array94 = i18n19.getStrings(str_array90, "GMCry");
    java.lang.String[] str_array96 = i18n12.getStrings(str_array94, "groundmc.lobby.silent");
    // The following exception was thrown during execution in test generation
    try {
    boolean b97 = commandFriends0.execute(commandSender9, command10, "vanish", str_array96);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friends"+ "'", str7.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friends"+ "'", str8.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char71 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char74 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char76 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char77 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char78 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char79 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array96);

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test263"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    java.lang.String str6 = commandFriends0.getName();
    java.lang.String str7 = commandFriends0.getName();
    java.lang.String str8 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender9 = null;
    org.bukkit.command.Command command10 = null;
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n12.getBundleCache$spigot_1_8();
    char char15 = i18n12.getColorChar();
    char char16 = i18n12.getColorChar();
    char char17 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n19.getBundleCache$spigot_1_8();
    char char22 = i18n19.getColorChar();
    char char23 = i18n19.getColorChar();
    char char24 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n19.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n19.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    char char29 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n27.getBundleCache$spigot_1_8();
    char char31 = i18n27.getColorChar();
    char char32 = i18n27.getColorChar();
    char char33 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n34 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char35 = i18n34.getColorChar();
    char char36 = i18n34.getColorChar();
    char char37 = i18n34.getColorChar();
    char char38 = i18n34.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n39 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache40 = i18n39.getBundleCache$spigot_1_8();
    java.lang.String[] str_array41 = new java.lang.String[] {  };
    java.lang.String[] str_array43 = i18n39.getStrings(str_array41, "hi!");
    java.lang.String[] str_array45 = i18n34.getStrings(str_array43, "GMCrx");
    java.lang.String[] str_array47 = i18n27.getStrings(str_array43, "friends");
    java.lang.String[] str_array49 = i18n19.getStrings(str_array47, "GMCt");
    java.lang.String[] str_array51 = i18n12.getStrings(str_array47, "friend");
    gtlp.groundmc.lobby.util.I18n i18n52 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char53 = i18n52.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache54 = i18n52.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache55 = i18n52.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache56 = i18n52.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache57 = i18n52.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n58 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char59 = i18n58.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache60 = i18n58.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache61 = i18n58.getBundleCache$spigot_1_8();
    char char62 = i18n58.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n63 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char64 = i18n63.getColorChar();
    char char65 = i18n63.getColorChar();
    char char66 = i18n63.getColorChar();
    char char67 = i18n63.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n68 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache69 = i18n68.getBundleCache$spigot_1_8();
    java.lang.String[] str_array70 = new java.lang.String[] {  };
    java.lang.String[] str_array72 = i18n68.getStrings(str_array70, "hi!");
    java.lang.String[] str_array74 = i18n63.getStrings(str_array72, "GMCrx");
    java.lang.String[] str_array76 = i18n58.getStrings(str_array72, "GMC");
    java.lang.String[] str_array78 = i18n52.getStrings(str_array72, "GMCw");
    java.lang.String[] str_array80 = i18n12.getStrings(str_array78, "groundmc.lobby.admin");
    // The following exception was thrown during execution in test generation
    try {
    boolean b81 = commandFriends0.execute(commandSender9, command10, "GMCry", str_array78);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friends"+ "'", str7.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friends"+ "'", str8.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char62 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char67 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test264"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender8 = null;
    org.bukkit.command.Command command9 = null;
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n11.getBundleCache$spigot_1_8();
    char char14 = i18n11.getColorChar();
    char char15 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n23.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n23.getBundleCache$spigot_1_8();
    char char27 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char29 = i18n28.getColorChar();
    char char30 = i18n28.getColorChar();
    char char31 = i18n28.getColorChar();
    char char32 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n33.getBundleCache$spigot_1_8();
    java.lang.String[] str_array35 = new java.lang.String[] {  };
    java.lang.String[] str_array37 = i18n33.getStrings(str_array35, "hi!");
    java.lang.String[] str_array39 = i18n28.getStrings(str_array37, "GMCrx");
    java.lang.String[] str_array41 = i18n23.getStrings(str_array37, "GMC");
    java.lang.String[] str_array43 = i18n17.getStrings(str_array37, "GMCw");
    java.lang.String[] str_array45 = i18n11.getStrings(str_array43, "GMCy");
    // The following exception was thrown during execution in test generation
    try {
    boolean b46 = commandFriend0.execute(commandSender8, command9, "GMCw", str_array43);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test265"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender8 = null;
    org.bukkit.command.Command command9 = null;
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n11.getBundleCache$spigot_1_8();
    char char14 = i18n11.getColorChar();
    char char15 = i18n11.getColorChar();
    char char16 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    char char21 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n19.getBundleCache$spigot_1_8();
    char char23 = i18n19.getColorChar();
    char char24 = i18n19.getColorChar();
    char char25 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    char char28 = i18n26.getColorChar();
    char char29 = i18n26.getColorChar();
    char char30 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n31.getBundleCache$spigot_1_8();
    java.lang.String[] str_array33 = new java.lang.String[] {  };
    java.lang.String[] str_array35 = i18n31.getStrings(str_array33, "hi!");
    java.lang.String[] str_array37 = i18n26.getStrings(str_array35, "GMCrx");
    java.lang.String[] str_array39 = i18n19.getStrings(str_array35, "friends");
    java.lang.String[] str_array41 = i18n11.getStrings(str_array39, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n42 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char43 = i18n42.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache44 = i18n42.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache45 = i18n42.getBundleCache$spigot_1_8();
    char char46 = i18n42.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n47 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char48 = i18n47.getColorChar();
    char char49 = i18n47.getColorChar();
    char char50 = i18n47.getColorChar();
    char char51 = i18n47.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n52 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache53 = i18n52.getBundleCache$spigot_1_8();
    java.lang.String[] str_array54 = new java.lang.String[] {  };
    java.lang.String[] str_array56 = i18n52.getStrings(str_array54, "hi!");
    java.lang.String[] str_array58 = i18n47.getStrings(str_array56, "GMCrx");
    java.lang.String[] str_array60 = i18n42.getStrings(str_array56, "GMC");
    java.lang.String[] str_array62 = i18n11.getStrings(str_array60, "groundmc.lobby.vanish");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str63 = commandFriend0.getTabCompletion(commandSender8, command9, "friends", str_array60);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test266"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    java.lang.String str8 = commandVanish0.getName();
    java.lang.String str9 = commandVanish0.getName();
    java.lang.String str10 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender11 = null;
    org.bukkit.command.Command command12 = null;
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    char char16 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n14.getBundleCache$spigot_1_8();
    char char18 = i18n14.getColorChar();
    char char19 = i18n14.getColorChar();
    char char20 = i18n14.getColorChar();
    char char21 = i18n14.getColorChar();
    char char22 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    char char25 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n23.getBundleCache$spigot_1_8();
    char char27 = i18n23.getColorChar();
    char char28 = i18n23.getColorChar();
    char char29 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char31 = i18n30.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n30.getBundleCache$spigot_1_8();
    char char33 = i18n30.getColorChar();
    char char34 = i18n30.getColorChar();
    char char35 = i18n30.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n30.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n30.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n38 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char39 = i18n38.getColorChar();
    char char40 = i18n38.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache41 = i18n38.getBundleCache$spigot_1_8();
    char char42 = i18n38.getColorChar();
    char char43 = i18n38.getColorChar();
    char char44 = i18n38.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char46 = i18n45.getColorChar();
    char char47 = i18n45.getColorChar();
    char char48 = i18n45.getColorChar();
    char char49 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n50 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n50.getBundleCache$spigot_1_8();
    java.lang.String[] str_array52 = new java.lang.String[] {  };
    java.lang.String[] str_array54 = i18n50.getStrings(str_array52, "hi!");
    java.lang.String[] str_array56 = i18n45.getStrings(str_array54, "GMCrx");
    java.lang.String[] str_array58 = i18n38.getStrings(str_array54, "friends");
    java.lang.String[] str_array60 = i18n30.getStrings(str_array58, "GMCt");
    java.lang.String[] str_array62 = i18n23.getStrings(str_array58, "groundmc.lobby.admin");
    java.lang.String[] str_array64 = i18n14.getStrings(str_array62, "coins");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str65 = commandVanish0.getTabCompletion(commandSender11, command12, "groundmc.lobby.silent", str_array64);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "vanish"+ "'", str9.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "vanish"+ "'", str10.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test267"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n5.getBundleCache$spigot_1_8();
    java.lang.String[] str_array7 = new java.lang.String[] {  };
    java.lang.String[] str_array9 = i18n5.getStrings(str_array7, "hi!");
    java.lang.String[] str_array11 = i18n0.getStrings(str_array9, "GMCrx");
    char char12 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n0.getBundleCache$spigot_1_8();
    char char14 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n0.getBundleCache$spigot_1_8();
    java.util.Locale locale18 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str19 = i18n0.getString("", locale18);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test268"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    char char3 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    char char7 = i18n5.getColorChar();
    char char8 = i18n5.getColorChar();
    char char9 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n10.getBundleCache$spigot_1_8();
    java.lang.String[] str_array12 = new java.lang.String[] {  };
    java.lang.String[] str_array14 = i18n10.getStrings(str_array12, "hi!");
    java.lang.String[] str_array16 = i18n5.getStrings(str_array14, "GMCrx");
    java.lang.String[] str_array18 = i18n0.getStrings(str_array16, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n19.getBundleCache$spigot_1_8();
    java.lang.String[] str_array21 = new java.lang.String[] {  };
    java.lang.String[] str_array23 = i18n19.getStrings(str_array21, "hi!");
    java.lang.String[] str_array25 = i18n0.getStrings(str_array23, "groundmc.lobby.hide_players");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    char char29 = i18n27.getColorChar();
    char char30 = i18n27.getColorChar();
    char char31 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n32.getBundleCache$spigot_1_8();
    java.lang.String[] str_array34 = new java.lang.String[] {  };
    java.lang.String[] str_array36 = i18n32.getStrings(str_array34, "hi!");
    java.lang.String[] str_array38 = i18n27.getStrings(str_array36, "GMCrx");
    char char39 = i18n27.getColorChar();
    char char40 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n41 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char42 = i18n41.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache43 = i18n41.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache44 = i18n41.getBundleCache$spigot_1_8();
    char char45 = i18n41.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n46 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char47 = i18n46.getColorChar();
    char char48 = i18n46.getColorChar();
    char char49 = i18n46.getColorChar();
    char char50 = i18n46.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n51 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache52 = i18n51.getBundleCache$spigot_1_8();
    java.lang.String[] str_array53 = new java.lang.String[] {  };
    java.lang.String[] str_array55 = i18n51.getStrings(str_array53, "hi!");
    java.lang.String[] str_array57 = i18n46.getStrings(str_array55, "GMCrx");
    java.lang.String[] str_array59 = i18n41.getStrings(str_array55, "GMC");
    java.lang.String[] str_array61 = i18n27.getStrings(str_array59, "GMCz");
    java.util.Locale locale62 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array63 = i18n0.getStrings(str_array61, locale62);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test269"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char7 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n6.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n6.getBundleCache$spigot_1_8();
    char char10 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    char char13 = i18n11.getColorChar();
    char char14 = i18n11.getColorChar();
    char char15 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n16.getBundleCache$spigot_1_8();
    java.lang.String[] str_array18 = new java.lang.String[] {  };
    java.lang.String[] str_array20 = i18n16.getStrings(str_array18, "hi!");
    java.lang.String[] str_array22 = i18n11.getStrings(str_array20, "GMCrx");
    java.lang.String[] str_array24 = i18n6.getStrings(str_array20, "GMC");
    java.lang.String[] str_array26 = i18n0.getStrings(str_array20, "GMCw");
    char char27 = i18n0.getColorChar();
    java.lang.String[] str_array28 = null;
    java.util.Locale locale29 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array30 = i18n0.getStrings(str_array28, locale29);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test270"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    java.lang.String str8 = commandLobby0.getName();
    java.lang.String str9 = commandLobby0.getName();
    java.lang.String str10 = commandLobby0.getName();
    java.lang.String str11 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender12 = null;
    org.bukkit.command.Command command13 = null;
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    char char17 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n19.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n19.getBundleCache$spigot_1_8();
    char char23 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    char char26 = i18n24.getColorChar();
    char char27 = i18n24.getColorChar();
    char char28 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n29.getBundleCache$spigot_1_8();
    java.lang.String[] str_array31 = new java.lang.String[] {  };
    java.lang.String[] str_array33 = i18n29.getStrings(str_array31, "hi!");
    java.lang.String[] str_array35 = i18n24.getStrings(str_array33, "GMCrx");
    java.lang.String[] str_array37 = i18n19.getStrings(str_array33, "GMC");
    java.lang.String[] str_array39 = i18n15.getStrings(str_array33, "GMCx");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str40 = commandLobby0.getTabCompletion(commandSender12, command13, "GMCx", str_array33);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lobby"+ "'", str8.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "lobby"+ "'", str9.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "lobby"+ "'", str10.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "lobby"+ "'", str11.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test271"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n5.getBundleCache$spigot_1_8();
    java.lang.String[] str_array7 = new java.lang.String[] {  };
    java.lang.String[] str_array9 = i18n5.getStrings(str_array7, "hi!");
    java.lang.String[] str_array11 = i18n0.getStrings(str_array9, "GMCrx");
    char char12 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    char char15 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n17.getBundleCache$spigot_1_8();
    char char21 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    char char24 = i18n22.getColorChar();
    char char25 = i18n22.getColorChar();
    char char26 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n27.getBundleCache$spigot_1_8();
    java.lang.String[] str_array29 = new java.lang.String[] {  };
    java.lang.String[] str_array31 = i18n27.getStrings(str_array29, "hi!");
    java.lang.String[] str_array33 = i18n22.getStrings(str_array31, "GMCrx");
    java.lang.String[] str_array35 = i18n17.getStrings(str_array31, "GMC");
    java.lang.String[] str_array37 = i18n13.getStrings(str_array31, "GMCx");
    java.lang.String[] str_array39 = i18n0.getStrings(str_array37, "hi!");
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char41 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n40.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache43 = i18n40.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache44 = i18n40.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache45 = i18n40.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache46 = i18n40.getBundleCache$spigot_1_8();
    char char47 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n48 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache49 = i18n48.getBundleCache$spigot_1_8();
    char char50 = i18n48.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n51 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache52 = i18n51.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n53 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char54 = i18n53.getColorChar();
    char char55 = i18n53.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache56 = i18n53.getBundleCache$spigot_1_8();
    char char57 = i18n53.getColorChar();
    char char58 = i18n53.getColorChar();
    char char59 = i18n53.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n60 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char61 = i18n60.getColorChar();
    char char62 = i18n60.getColorChar();
    char char63 = i18n60.getColorChar();
    char char64 = i18n60.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n65 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache66 = i18n65.getBundleCache$spigot_1_8();
    java.lang.String[] str_array67 = new java.lang.String[] {  };
    java.lang.String[] str_array69 = i18n65.getStrings(str_array67, "hi!");
    java.lang.String[] str_array71 = i18n60.getStrings(str_array69, "GMCrx");
    java.lang.String[] str_array73 = i18n53.getStrings(str_array69, "friends");
    java.lang.String[] str_array75 = i18n51.getStrings(str_array73, "vanish");
    java.lang.String[] str_array77 = i18n48.getStrings(str_array75, "GMCt");
    java.lang.String[] str_array79 = i18n40.getStrings(str_array75, "GMCz");
    java.lang.String[] str_array81 = i18n0.getStrings(str_array79, "GMCy");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache82 = i18n0.getBundleCache$spigot_1_8();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str85 = i18n0.getString("friends", "");
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char62 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache82);

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test272"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    java.lang.String str9 = commandCoins0.getName();
    java.lang.String str10 = commandCoins0.getName();
    java.lang.String str11 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender12 = null;
    org.bukkit.command.Command command13 = null;
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    char char21 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n19.getBundleCache$spigot_1_8();
    char char23 = i18n19.getColorChar();
    char char24 = i18n19.getColorChar();
    char char25 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    char char28 = i18n26.getColorChar();
    char char29 = i18n26.getColorChar();
    char char30 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n31.getBundleCache$spigot_1_8();
    java.lang.String[] str_array33 = new java.lang.String[] {  };
    java.lang.String[] str_array35 = i18n31.getStrings(str_array33, "hi!");
    java.lang.String[] str_array37 = i18n26.getStrings(str_array35, "GMCrx");
    java.lang.String[] str_array39 = i18n19.getStrings(str_array35, "friends");
    java.lang.String[] str_array41 = i18n17.getStrings(str_array39, "vanish");
    java.lang.String[] str_array43 = i18n15.getStrings(str_array39, "GMCx");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str44 = commandCoins0.getTabCompletion(commandSender12, command13, "GMCx", str_array43);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "coins"+ "'", str10.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "coins"+ "'", str11.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test273"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    java.lang.String str8 = commandLobby0.getName();
    java.lang.String str9 = commandLobby0.getName();
    java.lang.String str10 = commandLobby0.getName();
    java.lang.String str11 = commandLobby0.getName();
    java.lang.String str12 = commandLobby0.getName();
    java.lang.String str13 = commandLobby0.getName();
    java.lang.String str14 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender15 = null;
    org.bukkit.command.Command command16 = null;
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n24.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n24.getBundleCache$spigot_1_8();
    char char28 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char30 = i18n29.getColorChar();
    char char31 = i18n29.getColorChar();
    char char32 = i18n29.getColorChar();
    char char33 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n34 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n34.getBundleCache$spigot_1_8();
    java.lang.String[] str_array36 = new java.lang.String[] {  };
    java.lang.String[] str_array38 = i18n34.getStrings(str_array36, "hi!");
    java.lang.String[] str_array40 = i18n29.getStrings(str_array38, "GMCrx");
    java.lang.String[] str_array42 = i18n24.getStrings(str_array38, "GMC");
    java.lang.String[] str_array44 = i18n18.getStrings(str_array38, "GMCw");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str45 = commandLobby0.getTabCompletion(commandSender15, command16, "coins", str_array44);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lobby"+ "'", str8.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "lobby"+ "'", str9.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "lobby"+ "'", str10.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "lobby"+ "'", str11.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "lobby"+ "'", str12.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "lobby"+ "'", str13.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "lobby"+ "'", str14.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test274"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender3 = null;
    org.bukkit.command.Command command4 = null;
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char7 = i18n6.getColorChar();
    char char8 = i18n6.getColorChar();
    char char9 = i18n6.getColorChar();
    char char10 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n11.getBundleCache$spigot_1_8();
    java.lang.String[] str_array13 = new java.lang.String[] {  };
    java.lang.String[] str_array15 = i18n11.getStrings(str_array13, "hi!");
    java.lang.String[] str_array17 = i18n6.getStrings(str_array15, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n18.getBundleCache$spigot_1_8();
    char char22 = i18n18.getColorChar();
    char char23 = i18n18.getColorChar();
    char char24 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    char char27 = i18n25.getColorChar();
    char char28 = i18n25.getColorChar();
    char char29 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n30.getBundleCache$spigot_1_8();
    java.lang.String[] str_array32 = new java.lang.String[] {  };
    java.lang.String[] str_array34 = i18n30.getStrings(str_array32, "hi!");
    java.lang.String[] str_array36 = i18n25.getStrings(str_array34, "GMCrx");
    java.lang.String[] str_array38 = i18n18.getStrings(str_array34, "friends");
    java.lang.String[] str_array40 = i18n6.getStrings(str_array38, "");
    // The following exception was thrown during execution in test generation
    try {
    boolean b41 = commandCoins0.execute(commandSender3, command4, "", str_array38);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test275"); }

    gtlp.groundmc.lobby.registry.LobbyCommandRegistry.Companion companion0 = gtlp.groundmc.lobby.registry.LobbyCommandRegistry.Companion;
    gtlp.groundmc.lobby.commands.CommandVanish commandVanish1 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str2 = commandVanish1.getName();
    java.lang.String str3 = commandVanish1.getName();
    java.lang.String str4 = commandVanish1.getName();
    java.lang.String str5 = commandVanish1.getName();
    java.lang.String str6 = commandVanish1.getName();
    java.lang.String str7 = commandVanish1.getName();
    java.lang.String str8 = commandVanish1.getName();
    java.lang.String str9 = commandVanish1.getName();
    java.lang.String str10 = commandVanish1.getName();
    java.lang.String str11 = commandVanish1.getName();
    java.lang.String str12 = commandVanish1.getName();
    java.lang.String str13 = commandVanish1.getName();
    java.lang.String str14 = commandVanish1.getName();
    // The following exception was thrown during execution in test generation
    try {
    companion0.registerCommand((gtlp.groundmc.lobby.commands.ILobbyCommand)commandVanish1);
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(companion0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "vanish"+ "'", str9.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "vanish"+ "'", str10.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "vanish"+ "'", str11.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "vanish"+ "'", str12.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "vanish"+ "'", str13.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "vanish"+ "'", str14.equals("vanish"));

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test276"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    java.util.Locale locale6 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str7 = i18n0.getString("GMCrx", locale6);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test277"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    java.lang.String str8 = commandVanish0.getName();
    java.lang.String str9 = commandVanish0.getName();
    java.lang.String str10 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender11 = null;
    org.bukkit.command.Command command12 = null;
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n14.getBundleCache$spigot_1_8();
    java.lang.String[] str_array16 = new java.lang.String[] {  };
    java.lang.String[] str_array18 = i18n14.getStrings(str_array16, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n14.getBundleCache$spigot_1_8();
    char char21 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n22.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n22.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n26.getBundleCache$spigot_1_8();
    java.lang.String[] str_array28 = new java.lang.String[] {  };
    java.lang.String[] str_array30 = i18n26.getStrings(str_array28, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n26.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char33 = i18n32.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n32.getBundleCache$spigot_1_8();
    char char35 = i18n32.getColorChar();
    char char36 = i18n32.getColorChar();
    char char37 = i18n32.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache38 = i18n32.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n39 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char40 = i18n39.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache41 = i18n39.getBundleCache$spigot_1_8();
    char char42 = i18n39.getColorChar();
    char char43 = i18n39.getColorChar();
    char char44 = i18n39.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache45 = i18n39.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache46 = i18n39.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n47 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char48 = i18n47.getColorChar();
    char char49 = i18n47.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache50 = i18n47.getBundleCache$spigot_1_8();
    char char51 = i18n47.getColorChar();
    char char52 = i18n47.getColorChar();
    char char53 = i18n47.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n54 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char55 = i18n54.getColorChar();
    char char56 = i18n54.getColorChar();
    char char57 = i18n54.getColorChar();
    char char58 = i18n54.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n59 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache60 = i18n59.getBundleCache$spigot_1_8();
    java.lang.String[] str_array61 = new java.lang.String[] {  };
    java.lang.String[] str_array63 = i18n59.getStrings(str_array61, "hi!");
    java.lang.String[] str_array65 = i18n54.getStrings(str_array63, "GMCrx");
    java.lang.String[] str_array67 = i18n47.getStrings(str_array63, "friends");
    java.lang.String[] str_array69 = i18n39.getStrings(str_array67, "GMCt");
    java.lang.String[] str_array71 = i18n32.getStrings(str_array67, "friend");
    java.lang.String[] str_array73 = i18n26.getStrings(str_array67, "GMCt");
    java.lang.String[] str_array75 = i18n22.getStrings(str_array67, "groundmc.lobby.admin");
    java.lang.String[] str_array77 = i18n14.getStrings(str_array75, "lang.lobby");
    // The following exception was thrown during execution in test generation
    try {
    boolean b78 = commandVanish0.execute(commandSender11, command12, "GMCx", str_array77);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "vanish"+ "'", str9.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "vanish"+ "'", str10.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char56 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test278"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender4 = null;
    org.bukkit.command.Command command5 = null;
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char8 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n7.getBundleCache$spigot_1_8();
    char char10 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n7.getBundleCache$spigot_1_8();
    char char12 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    char char15 = i18n13.getColorChar();
    char char16 = i18n13.getColorChar();
    char char17 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n18.getBundleCache$spigot_1_8();
    java.lang.String[] str_array20 = new java.lang.String[] {  };
    java.lang.String[] str_array22 = i18n18.getStrings(str_array20, "hi!");
    java.lang.String[] str_array24 = i18n13.getStrings(str_array22, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    char char27 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n25.getBundleCache$spigot_1_8();
    char char29 = i18n25.getColorChar();
    char char30 = i18n25.getColorChar();
    char char31 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char33 = i18n32.getColorChar();
    char char34 = i18n32.getColorChar();
    char char35 = i18n32.getColorChar();
    char char36 = i18n32.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n37 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache38 = i18n37.getBundleCache$spigot_1_8();
    java.lang.String[] str_array39 = new java.lang.String[] {  };
    java.lang.String[] str_array41 = i18n37.getStrings(str_array39, "hi!");
    java.lang.String[] str_array43 = i18n32.getStrings(str_array41, "GMCrx");
    java.lang.String[] str_array45 = i18n25.getStrings(str_array41, "friends");
    java.lang.String[] str_array47 = i18n13.getStrings(str_array45, "");
    java.lang.String[] str_array49 = i18n7.getStrings(str_array45, "GMCw");
    char char50 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n52 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char53 = i18n52.getColorChar();
    char char54 = i18n52.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache55 = i18n52.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache56 = i18n52.getBundleCache$spigot_1_8();
    char char57 = i18n52.getColorChar();
    char char58 = i18n52.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n59 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char60 = i18n59.getColorChar();
    char char61 = i18n59.getColorChar();
    char char62 = i18n59.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache63 = i18n59.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n64 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char65 = i18n64.getColorChar();
    char char66 = i18n64.getColorChar();
    char char67 = i18n64.getColorChar();
    char char68 = i18n64.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n69 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache70 = i18n69.getBundleCache$spigot_1_8();
    java.lang.String[] str_array71 = new java.lang.String[] {  };
    java.lang.String[] str_array73 = i18n69.getStrings(str_array71, "hi!");
    java.lang.String[] str_array75 = i18n64.getStrings(str_array73, "GMCrx");
    java.lang.String[] str_array77 = i18n59.getStrings(str_array75, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n78 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache79 = i18n78.getBundleCache$spigot_1_8();
    java.lang.String[] str_array80 = new java.lang.String[] {  };
    java.lang.String[] str_array82 = i18n78.getStrings(str_array80, "hi!");
    java.lang.String[] str_array84 = i18n59.getStrings(str_array82, "groundmc.lobby.hide_players");
    java.lang.String[] str_array86 = i18n52.getStrings(str_array84, "lang.lobby");
    java.lang.String[] str_array88 = i18n7.getStrings(str_array84, "lobby");
    // The following exception was thrown during execution in test generation
    try {
    boolean b89 = commandCoins0.execute(commandSender4, command5, "GMCt", str_array88);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char62 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char67 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test279"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    java.lang.String str6 = commandFriends0.getName();
    java.lang.String str7 = commandFriends0.getName();
    java.lang.String str8 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender9 = null;
    org.bukkit.command.Command command10 = null;
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n12.getBundleCache$spigot_1_8();
    char char15 = i18n12.getColorChar();
    char char16 = i18n12.getColorChar();
    char char17 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n19.getBundleCache$spigot_1_8();
    char char22 = i18n19.getColorChar();
    char char23 = i18n19.getColorChar();
    char char24 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n19.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n19.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    char char29 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n27.getBundleCache$spigot_1_8();
    char char31 = i18n27.getColorChar();
    char char32 = i18n27.getColorChar();
    char char33 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n34 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char35 = i18n34.getColorChar();
    char char36 = i18n34.getColorChar();
    char char37 = i18n34.getColorChar();
    char char38 = i18n34.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n39 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache40 = i18n39.getBundleCache$spigot_1_8();
    java.lang.String[] str_array41 = new java.lang.String[] {  };
    java.lang.String[] str_array43 = i18n39.getStrings(str_array41, "hi!");
    java.lang.String[] str_array45 = i18n34.getStrings(str_array43, "GMCrx");
    java.lang.String[] str_array47 = i18n27.getStrings(str_array43, "friends");
    java.lang.String[] str_array49 = i18n19.getStrings(str_array47, "GMCt");
    java.lang.String[] str_array51 = i18n12.getStrings(str_array47, "friend");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str52 = commandFriends0.getTabCompletion(commandSender9, command10, "GMC", str_array51);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friends"+ "'", str7.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friends"+ "'", str8.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test280"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    java.lang.String str8 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender9 = null;
    org.bukkit.command.Command command10 = null;
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    char char14 = i18n12.getColorChar();
    char char15 = i18n12.getColorChar();
    char char16 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n17.getBundleCache$spigot_1_8();
    java.lang.String[] str_array19 = new java.lang.String[] {  };
    java.lang.String[] str_array21 = i18n17.getStrings(str_array19, "hi!");
    java.lang.String[] str_array23 = i18n12.getStrings(str_array21, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    char char26 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n24.getBundleCache$spigot_1_8();
    char char28 = i18n24.getColorChar();
    char char29 = i18n24.getColorChar();
    char char30 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    char char33 = i18n31.getColorChar();
    char char34 = i18n31.getColorChar();
    char char35 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n36.getBundleCache$spigot_1_8();
    java.lang.String[] str_array38 = new java.lang.String[] {  };
    java.lang.String[] str_array40 = i18n36.getStrings(str_array38, "hi!");
    java.lang.String[] str_array42 = i18n31.getStrings(str_array40, "GMCrx");
    java.lang.String[] str_array44 = i18n24.getStrings(str_array40, "friends");
    java.lang.String[] str_array46 = i18n12.getStrings(str_array44, "");
    gtlp.groundmc.lobby.util.I18n i18n47 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char48 = i18n47.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache49 = i18n47.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache50 = i18n47.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n47.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache52 = i18n47.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n53 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char54 = i18n53.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache55 = i18n53.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache56 = i18n53.getBundleCache$spigot_1_8();
    char char57 = i18n53.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n58 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char59 = i18n58.getColorChar();
    char char60 = i18n58.getColorChar();
    char char61 = i18n58.getColorChar();
    char char62 = i18n58.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n63 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache64 = i18n63.getBundleCache$spigot_1_8();
    java.lang.String[] str_array65 = new java.lang.String[] {  };
    java.lang.String[] str_array67 = i18n63.getStrings(str_array65, "hi!");
    java.lang.String[] str_array69 = i18n58.getStrings(str_array67, "GMCrx");
    java.lang.String[] str_array71 = i18n53.getStrings(str_array67, "GMC");
    java.lang.String[] str_array73 = i18n47.getStrings(str_array67, "GMCw");
    java.lang.String[] str_array75 = i18n12.getStrings(str_array73, "GMCz");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str76 = commandVanish0.getTabCompletion(commandSender9, command10, "GMCy", str_array73);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char62 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test281"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    char char5 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n0.getBundleCache$spigot_1_8();
    char char8 = i18n0.getColorChar();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str11 = i18n0.getString("friend", "GMCt");
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test282"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender5 = null;
    org.bukkit.command.Command command6 = null;
    gtlp.groundmc.lobby.util.I18n i18n8 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char9 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n8.getBundleCache$spigot_1_8();
    char char11 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    char char14 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n12.getBundleCache$spigot_1_8();
    char char16 = i18n12.getColorChar();
    char char17 = i18n12.getColorChar();
    char char18 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    char char21 = i18n19.getColorChar();
    char char22 = i18n19.getColorChar();
    char char23 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n24.getBundleCache$spigot_1_8();
    java.lang.String[] str_array26 = new java.lang.String[] {  };
    java.lang.String[] str_array28 = i18n24.getStrings(str_array26, "hi!");
    java.lang.String[] str_array30 = i18n19.getStrings(str_array28, "GMCrx");
    java.lang.String[] str_array32 = i18n12.getStrings(str_array28, "friends");
    java.lang.String[] str_array34 = i18n8.getStrings(str_array32, "GMCsilent");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str35 = commandFriends0.getTabCompletion(commandSender5, command6, "groundmc.lobby.vanish", str_array34);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test283"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    char char4 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    java.lang.String str6 = resourceBundleCache5.getName();
    java.util.Locale locale8 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str9 = resourceBundleCache5.get("GMCsilent", locale8);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lang.lobby"+ "'", str6.equals("lang.lobby"));

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test284"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender8 = null;
    org.bukkit.command.Command command9 = null;
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    char char13 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n15.getBundleCache$spigot_1_8();
    char char19 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    char char22 = i18n20.getColorChar();
    char char23 = i18n20.getColorChar();
    char char24 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n25.getBundleCache$spigot_1_8();
    java.lang.String[] str_array27 = new java.lang.String[] {  };
    java.lang.String[] str_array29 = i18n25.getStrings(str_array27, "hi!");
    java.lang.String[] str_array31 = i18n20.getStrings(str_array29, "GMCrx");
    java.lang.String[] str_array33 = i18n15.getStrings(str_array29, "GMC");
    java.lang.String[] str_array35 = i18n11.getStrings(str_array29, "GMCx");
    // The following exception was thrown during execution in test generation
    try {
    boolean b36 = commandVanish0.execute(commandSender8, command9, "GMCt", str_array35);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test285"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender7 = null;
    org.bukkit.command.Command command8 = null;
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n10.getBundleCache$spigot_1_8();
    char char13 = i18n10.getColorChar();
    char char14 = i18n10.getColorChar();
    char char15 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n18.getBundleCache$spigot_1_8();
    char char22 = i18n18.getColorChar();
    char char23 = i18n18.getColorChar();
    char char24 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    char char27 = i18n25.getColorChar();
    char char28 = i18n25.getColorChar();
    char char29 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n30.getBundleCache$spigot_1_8();
    java.lang.String[] str_array32 = new java.lang.String[] {  };
    java.lang.String[] str_array34 = i18n30.getStrings(str_array32, "hi!");
    java.lang.String[] str_array36 = i18n25.getStrings(str_array34, "GMCrx");
    java.lang.String[] str_array38 = i18n18.getStrings(str_array34, "friends");
    java.lang.String[] str_array40 = i18n10.getStrings(str_array38, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n41 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char42 = i18n41.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache43 = i18n41.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache44 = i18n41.getBundleCache$spigot_1_8();
    char char45 = i18n41.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n46 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char47 = i18n46.getColorChar();
    char char48 = i18n46.getColorChar();
    char char49 = i18n46.getColorChar();
    char char50 = i18n46.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n51 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache52 = i18n51.getBundleCache$spigot_1_8();
    java.lang.String[] str_array53 = new java.lang.String[] {  };
    java.lang.String[] str_array55 = i18n51.getStrings(str_array53, "hi!");
    java.lang.String[] str_array57 = i18n46.getStrings(str_array55, "GMCrx");
    java.lang.String[] str_array59 = i18n41.getStrings(str_array55, "GMC");
    java.lang.String[] str_array61 = i18n10.getStrings(str_array59, "groundmc.lobby.vanish");
    gtlp.groundmc.lobby.util.I18n i18n62 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char63 = i18n62.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache64 = i18n62.getBundleCache$spigot_1_8();
    char char65 = i18n62.getColorChar();
    char char66 = i18n62.getColorChar();
    char char67 = i18n62.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n68 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache69 = i18n68.getBundleCache$spigot_1_8();
    java.lang.String[] str_array70 = new java.lang.String[] {  };
    java.lang.String[] str_array72 = i18n68.getStrings(str_array70, "hi!");
    java.lang.String[] str_array74 = i18n62.getStrings(str_array72, "GMCy");
    java.lang.String[] str_array76 = i18n10.getStrings(str_array72, "");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str77 = commandVanish0.getTabCompletion(commandSender7, command8, "groundmc.lobby.vanish", str_array72);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char67 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test286"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    org.bukkit.command.CommandSender commandSender1 = null;
    org.bukkit.command.Command command2 = null;
    gtlp.groundmc.lobby.util.I18n i18n4 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char5 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n4.getBundleCache$spigot_1_8();
    char char7 = i18n4.getColorChar();
    char char8 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n16.getBundleCache$spigot_1_8();
    char char20 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char22 = i18n21.getColorChar();
    char char23 = i18n21.getColorChar();
    char char24 = i18n21.getColorChar();
    char char25 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n26.getBundleCache$spigot_1_8();
    java.lang.String[] str_array28 = new java.lang.String[] {  };
    java.lang.String[] str_array30 = i18n26.getStrings(str_array28, "hi!");
    java.lang.String[] str_array32 = i18n21.getStrings(str_array30, "GMCrx");
    java.lang.String[] str_array34 = i18n16.getStrings(str_array30, "GMC");
    java.lang.String[] str_array36 = i18n10.getStrings(str_array30, "GMCw");
    java.lang.String[] str_array38 = i18n4.getStrings(str_array36, "GMCy");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str39 = commandFriends0.getTabCompletion(commandSender1, command2, "GMCz", str_array38);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test287"); }

    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = new gtlp.groundmc.lobby.util.I18n.ResourceBundleCache("groundmc.lobby.vanish");
    java.util.concurrent.ConcurrentHashMap<java.util.Locale,java.util.ResourceBundle> concurrenthashmap_locale_resourceBundle2 = resourceBundleCache1.getBackingMap$spigot_1_8();
    java.lang.String str3 = resourceBundleCache1.getName();
    java.util.concurrent.ConcurrentHashMap<java.util.Locale,java.util.ResourceBundle> concurrenthashmap_locale_resourceBundle4 = resourceBundleCache1.getBackingMap$spigot_1_8();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(concurrenthashmap_locale_resourceBundle2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "groundmc.lobby.vanish"+ "'", str3.equals("groundmc.lobby.vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(concurrenthashmap_locale_resourceBundle4);

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test288"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    java.lang.String str6 = commandFriends0.getName();
    java.lang.String str7 = commandFriends0.getName();
    java.lang.String str8 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender9 = null;
    org.bukkit.command.Command command10 = null;
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n12.getBundleCache$spigot_1_8();
    char char15 = i18n12.getColorChar();
    char char16 = i18n12.getColorChar();
    char char17 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    char char22 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n20.getBundleCache$spigot_1_8();
    char char24 = i18n20.getColorChar();
    char char25 = i18n20.getColorChar();
    char char26 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    char char29 = i18n27.getColorChar();
    char char30 = i18n27.getColorChar();
    char char31 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n32.getBundleCache$spigot_1_8();
    java.lang.String[] str_array34 = new java.lang.String[] {  };
    java.lang.String[] str_array36 = i18n32.getStrings(str_array34, "hi!");
    java.lang.String[] str_array38 = i18n27.getStrings(str_array36, "GMCrx");
    java.lang.String[] str_array40 = i18n20.getStrings(str_array36, "friends");
    java.lang.String[] str_array42 = i18n12.getStrings(str_array40, "GMCt");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str43 = commandFriends0.getTabCompletion(commandSender9, command10, "GMC", str_array40);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friends"+ "'", str7.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friends"+ "'", str8.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test289"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    java.lang.String str8 = commandFriend0.getName();
    java.lang.String str9 = commandFriend0.getName();
    java.lang.String str10 = commandFriend0.getName();
    java.lang.String str11 = commandFriend0.getName();
    java.lang.String str12 = commandFriend0.getName();
    java.lang.String str13 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender14 = null;
    org.bukkit.command.Command command15 = null;
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n17.getBundleCache$spigot_1_8();
    java.lang.String[] str_array19 = new java.lang.String[] {  };
    java.lang.String[] str_array21 = i18n17.getStrings(str_array19, "hi!");
    // The following exception was thrown during execution in test generation
    try {
    boolean b22 = commandFriend0.execute(commandSender14, command15, "", str_array19);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friend"+ "'", str8.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "friend"+ "'", str9.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "friend"+ "'", str10.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "friend"+ "'", str11.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "friend"+ "'", str12.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "friend"+ "'", str13.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test290"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender2 = null;
    org.bukkit.command.Command command3 = null;
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n5.getBundleCache$spigot_1_8();
    char char8 = i18n5.getColorChar();
    char char9 = i18n5.getColorChar();
    char char10 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n5.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n12.getBundleCache$spigot_1_8();
    char char15 = i18n12.getColorChar();
    char char16 = i18n12.getColorChar();
    char char17 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    char char22 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n20.getBundleCache$spigot_1_8();
    char char24 = i18n20.getColorChar();
    char char25 = i18n20.getColorChar();
    char char26 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    char char29 = i18n27.getColorChar();
    char char30 = i18n27.getColorChar();
    char char31 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n32.getBundleCache$spigot_1_8();
    java.lang.String[] str_array34 = new java.lang.String[] {  };
    java.lang.String[] str_array36 = i18n32.getStrings(str_array34, "hi!");
    java.lang.String[] str_array38 = i18n27.getStrings(str_array36, "GMCrx");
    java.lang.String[] str_array40 = i18n20.getStrings(str_array36, "friends");
    java.lang.String[] str_array42 = i18n12.getStrings(str_array40, "GMCt");
    java.lang.String[] str_array44 = i18n5.getStrings(str_array40, "friend");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str45 = commandCoins0.getTabCompletion(commandSender2, command3, "GMCry", str_array40);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test291"); }

    org.joda.time.DateTime dateTime2 = null;
    // The following exception was thrown during execution in test generation
    try {
    gtlp.groundmc.lobby.Relationship relationship3 = new gtlp.groundmc.lobby.Relationship("GMCx", "friend", dateTime2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test292"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    java.lang.String str8 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender9 = null;
    org.bukkit.command.Command command10 = null;
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n12.getBundleCache$spigot_1_8();
    char char19 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n20.getBundleCache$spigot_1_8();
    char char22 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n23.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    char char27 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n25.getBundleCache$spigot_1_8();
    char char29 = i18n25.getColorChar();
    char char30 = i18n25.getColorChar();
    char char31 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char33 = i18n32.getColorChar();
    char char34 = i18n32.getColorChar();
    char char35 = i18n32.getColorChar();
    char char36 = i18n32.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n37 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache38 = i18n37.getBundleCache$spigot_1_8();
    java.lang.String[] str_array39 = new java.lang.String[] {  };
    java.lang.String[] str_array41 = i18n37.getStrings(str_array39, "hi!");
    java.lang.String[] str_array43 = i18n32.getStrings(str_array41, "GMCrx");
    java.lang.String[] str_array45 = i18n25.getStrings(str_array41, "friends");
    java.lang.String[] str_array47 = i18n23.getStrings(str_array45, "vanish");
    java.lang.String[] str_array49 = i18n20.getStrings(str_array47, "GMCt");
    java.lang.String[] str_array51 = i18n12.getStrings(str_array47, "GMCz");
    // The following exception was thrown during execution in test generation
    try {
    boolean b52 = commandVanish0.execute(commandSender9, command10, "lobby", str_array47);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test293"); }

    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = new gtlp.groundmc.lobby.util.I18n.ResourceBundleCache("GMCrx");
    java.util.Locale locale3 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str4 = resourceBundleCache1.get("lang.lobby", locale3);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test294"); }

    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = new gtlp.groundmc.lobby.util.I18n.ResourceBundleCache("groundmc.lobby.hide_players");
    java.util.concurrent.ConcurrentHashMap<java.util.Locale,java.util.ResourceBundle> concurrenthashmap_locale_resourceBundle2 = resourceBundleCache1.getBackingMap$spigot_1_8();
    java.util.Locale locale4 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str5 = resourceBundleCache1.get("friend", locale4);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(concurrenthashmap_locale_resourceBundle2);

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test295"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    java.lang.String str8 = commandVanish0.getName();
    java.lang.String str9 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender10 = null;
    org.bukkit.command.Command command11 = null;
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n13.getBundleCache$spigot_1_8();
    char char17 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    char char21 = i18n18.getColorChar();
    char char22 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n23.getBundleCache$spigot_1_8();
    java.lang.String[] str_array25 = new java.lang.String[] {  };
    java.lang.String[] str_array27 = i18n23.getStrings(str_array25, "hi!");
    java.lang.String[] str_array29 = i18n18.getStrings(str_array27, "GMCrx");
    java.lang.String[] str_array31 = i18n13.getStrings(str_array27, "GMC");
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char33 = i18n32.getColorChar();
    char char34 = i18n32.getColorChar();
    char char35 = i18n32.getColorChar();
    char char36 = i18n32.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n37 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache38 = i18n37.getBundleCache$spigot_1_8();
    java.lang.String[] str_array39 = new java.lang.String[] {  };
    java.lang.String[] str_array41 = i18n37.getStrings(str_array39, "hi!");
    java.lang.String[] str_array43 = i18n32.getStrings(str_array41, "GMCrx");
    java.lang.String[] str_array45 = i18n13.getStrings(str_array41, "GMCz");
    gtlp.groundmc.lobby.util.I18n i18n46 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char47 = i18n46.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache48 = i18n46.getBundleCache$spigot_1_8();
    char char49 = i18n46.getColorChar();
    char char50 = i18n46.getColorChar();
    char char51 = i18n46.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache52 = i18n46.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache53 = i18n46.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n54 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char55 = i18n54.getColorChar();
    char char56 = i18n54.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache57 = i18n54.getBundleCache$spigot_1_8();
    char char58 = i18n54.getColorChar();
    char char59 = i18n54.getColorChar();
    char char60 = i18n54.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n61 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char62 = i18n61.getColorChar();
    char char63 = i18n61.getColorChar();
    char char64 = i18n61.getColorChar();
    char char65 = i18n61.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n66 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache67 = i18n66.getBundleCache$spigot_1_8();
    java.lang.String[] str_array68 = new java.lang.String[] {  };
    java.lang.String[] str_array70 = i18n66.getStrings(str_array68, "hi!");
    java.lang.String[] str_array72 = i18n61.getStrings(str_array70, "GMCrx");
    java.lang.String[] str_array74 = i18n54.getStrings(str_array70, "friends");
    java.lang.String[] str_array76 = i18n46.getStrings(str_array74, "GMCt");
    java.lang.String[] str_array78 = i18n13.getStrings(str_array76, "");
    // The following exception was thrown during execution in test generation
    try {
    boolean b79 = commandVanish0.execute(commandSender10, command11, "groundmc.lobby.vanish", str_array76);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "vanish"+ "'", str9.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char56 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char62 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test296"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender5 = null;
    org.bukkit.command.Command command6 = null;
    gtlp.groundmc.lobby.util.I18n i18n8 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char9 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n8.getBundleCache$spigot_1_8();
    char char11 = i18n8.getColorChar();
    char char12 = i18n8.getColorChar();
    char char13 = i18n8.getColorChar();
    char char14 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n15.getBundleCache$spigot_1_8();
    java.lang.String[] str_array17 = new java.lang.String[] {  };
    java.lang.String[] str_array19 = i18n15.getStrings(str_array17, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n15.getBundleCache$spigot_1_8();
    char char22 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n23.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n23.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n27.getBundleCache$spigot_1_8();
    java.lang.String[] str_array29 = new java.lang.String[] {  };
    java.lang.String[] str_array31 = i18n27.getStrings(str_array29, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n27.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char34 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n33.getBundleCache$spigot_1_8();
    char char36 = i18n33.getColorChar();
    char char37 = i18n33.getColorChar();
    char char38 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache39 = i18n33.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char41 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n40.getBundleCache$spigot_1_8();
    char char43 = i18n40.getColorChar();
    char char44 = i18n40.getColorChar();
    char char45 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache46 = i18n40.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache47 = i18n40.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n48 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char49 = i18n48.getColorChar();
    char char50 = i18n48.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n48.getBundleCache$spigot_1_8();
    char char52 = i18n48.getColorChar();
    char char53 = i18n48.getColorChar();
    char char54 = i18n48.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n55 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char56 = i18n55.getColorChar();
    char char57 = i18n55.getColorChar();
    char char58 = i18n55.getColorChar();
    char char59 = i18n55.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n60 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache61 = i18n60.getBundleCache$spigot_1_8();
    java.lang.String[] str_array62 = new java.lang.String[] {  };
    java.lang.String[] str_array64 = i18n60.getStrings(str_array62, "hi!");
    java.lang.String[] str_array66 = i18n55.getStrings(str_array64, "GMCrx");
    java.lang.String[] str_array68 = i18n48.getStrings(str_array64, "friends");
    java.lang.String[] str_array70 = i18n40.getStrings(str_array68, "GMCt");
    java.lang.String[] str_array72 = i18n33.getStrings(str_array68, "friend");
    java.lang.String[] str_array74 = i18n27.getStrings(str_array68, "GMCt");
    java.lang.String[] str_array76 = i18n23.getStrings(str_array68, "groundmc.lobby.admin");
    java.lang.String[] str_array78 = i18n15.getStrings(str_array76, "lang.lobby");
    java.lang.String[] str_array80 = i18n8.getStrings(str_array76, "GMCry");
    // The following exception was thrown during execution in test generation
    try {
    boolean b81 = commandCoins0.execute(commandSender5, command6, "GMCry", str_array76);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char56 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test297"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    char char5 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char8 = i18n7.getColorChar();
    char char9 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n12.getBundleCache$spigot_1_8();
    char char15 = i18n12.getColorChar();
    char char16 = i18n12.getColorChar();
    char char17 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n19.getBundleCache$spigot_1_8();
    char char22 = i18n19.getColorChar();
    char char23 = i18n19.getColorChar();
    char char24 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n19.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n19.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    char char29 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n27.getBundleCache$spigot_1_8();
    char char31 = i18n27.getColorChar();
    char char32 = i18n27.getColorChar();
    char char33 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n34 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char35 = i18n34.getColorChar();
    char char36 = i18n34.getColorChar();
    char char37 = i18n34.getColorChar();
    char char38 = i18n34.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n39 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache40 = i18n39.getBundleCache$spigot_1_8();
    java.lang.String[] str_array41 = new java.lang.String[] {  };
    java.lang.String[] str_array43 = i18n39.getStrings(str_array41, "hi!");
    java.lang.String[] str_array45 = i18n34.getStrings(str_array43, "GMCrx");
    java.lang.String[] str_array47 = i18n27.getStrings(str_array43, "friends");
    java.lang.String[] str_array49 = i18n19.getStrings(str_array47, "GMCt");
    java.lang.String[] str_array51 = i18n12.getStrings(str_array47, "friend");
    gtlp.groundmc.lobby.util.I18n i18n52 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char53 = i18n52.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache54 = i18n52.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache55 = i18n52.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache56 = i18n52.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache57 = i18n52.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n58 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char59 = i18n58.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache60 = i18n58.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache61 = i18n58.getBundleCache$spigot_1_8();
    char char62 = i18n58.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n63 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char64 = i18n63.getColorChar();
    char char65 = i18n63.getColorChar();
    char char66 = i18n63.getColorChar();
    char char67 = i18n63.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n68 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache69 = i18n68.getBundleCache$spigot_1_8();
    java.lang.String[] str_array70 = new java.lang.String[] {  };
    java.lang.String[] str_array72 = i18n68.getStrings(str_array70, "hi!");
    java.lang.String[] str_array74 = i18n63.getStrings(str_array72, "GMCrx");
    java.lang.String[] str_array76 = i18n58.getStrings(str_array72, "GMC");
    java.lang.String[] str_array78 = i18n52.getStrings(str_array72, "GMCw");
    java.lang.String[] str_array80 = i18n12.getStrings(str_array78, "groundmc.lobby.admin");
    java.lang.String[] str_array82 = i18n7.getStrings(str_array78, "GMCry");
    java.lang.String[] str_array84 = i18n0.getStrings(str_array82, "groundmc.lobby.silent");
    char char85 = i18n0.getColorChar();
    java.util.Locale locale87 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str88 = i18n0.getString("vanish", locale87);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char62 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char67 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char85 == '&');

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test298"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender3 = null;
    org.bukkit.command.Command command4 = null;
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char7 = i18n6.getColorChar();
    char char8 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n6.getBundleCache$spigot_1_8();
    char char10 = i18n6.getColorChar();
    char char11 = i18n6.getColorChar();
    char char12 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    char char15 = i18n13.getColorChar();
    char char16 = i18n13.getColorChar();
    char char17 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n18.getBundleCache$spigot_1_8();
    java.lang.String[] str_array20 = new java.lang.String[] {  };
    java.lang.String[] str_array22 = i18n18.getStrings(str_array20, "hi!");
    java.lang.String[] str_array24 = i18n13.getStrings(str_array22, "GMCrx");
    java.lang.String[] str_array26 = i18n6.getStrings(str_array22, "friends");
    // The following exception was thrown during execution in test generation
    try {
    boolean b27 = commandFriends0.execute(commandSender3, command4, "groundmc.lobby.vanish", str_array22);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test299"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n5.getBundleCache$spigot_1_8();
    java.lang.String[] str_array7 = new java.lang.String[] {  };
    java.lang.String[] str_array9 = i18n5.getStrings(str_array7, "hi!");
    java.lang.String[] str_array11 = i18n0.getStrings(str_array9, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    char char14 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n12.getBundleCache$spigot_1_8();
    char char16 = i18n12.getColorChar();
    char char17 = i18n12.getColorChar();
    char char18 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    char char21 = i18n19.getColorChar();
    char char22 = i18n19.getColorChar();
    char char23 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n24.getBundleCache$spigot_1_8();
    java.lang.String[] str_array26 = new java.lang.String[] {  };
    java.lang.String[] str_array28 = i18n24.getStrings(str_array26, "hi!");
    java.lang.String[] str_array30 = i18n19.getStrings(str_array28, "GMCrx");
    java.lang.String[] str_array32 = i18n12.getStrings(str_array28, "friends");
    java.lang.String[] str_array34 = i18n0.getStrings(str_array32, "");
    char char35 = i18n0.getColorChar();
    java.util.Locale locale37 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str38 = i18n0.getString("GMCrx", locale37);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test300"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender4 = null;
    org.bukkit.command.Command command5 = null;
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char8 = i18n7.getColorChar();
    char char9 = i18n7.getColorChar();
    char char10 = i18n7.getColorChar();
    char char11 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n12.getBundleCache$spigot_1_8();
    java.lang.String[] str_array14 = new java.lang.String[] {  };
    java.lang.String[] str_array16 = i18n12.getStrings(str_array14, "hi!");
    java.lang.String[] str_array18 = i18n7.getStrings(str_array16, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    char char21 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n19.getBundleCache$spigot_1_8();
    char char23 = i18n19.getColorChar();
    char char24 = i18n19.getColorChar();
    char char25 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    char char28 = i18n26.getColorChar();
    char char29 = i18n26.getColorChar();
    char char30 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n31.getBundleCache$spigot_1_8();
    java.lang.String[] str_array33 = new java.lang.String[] {  };
    java.lang.String[] str_array35 = i18n31.getStrings(str_array33, "hi!");
    java.lang.String[] str_array37 = i18n26.getStrings(str_array35, "GMCrx");
    java.lang.String[] str_array39 = i18n19.getStrings(str_array35, "friends");
    java.lang.String[] str_array41 = i18n7.getStrings(str_array39, "");
    // The following exception was thrown during execution in test generation
    try {
    boolean b42 = commandLobby0.execute(commandSender4, command5, "GMCrx", str_array41);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test301"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    java.lang.String str8 = commandLobby0.getName();
    java.lang.String str9 = commandLobby0.getName();
    java.lang.String str10 = commandLobby0.getName();
    java.lang.String str11 = commandLobby0.getName();
    java.lang.String str12 = commandLobby0.getName();
    java.lang.String str13 = commandLobby0.getName();
    java.util.Locale locale14 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array15 = commandLobby0.getCommandHelp(locale14);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lobby"+ "'", str8.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "lobby"+ "'", str9.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "lobby"+ "'", str10.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "lobby"+ "'", str11.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "lobby"+ "'", str12.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "lobby"+ "'", str13.equals("lobby"));

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test302"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    java.lang.String str8 = commandVanish0.getName();
    java.lang.String str9 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender10 = null;
    org.bukkit.command.Command command11 = null;
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n13.getBundleCache$spigot_1_8();
    char char16 = i18n13.getColorChar();
    char char17 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n19.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n19.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n19.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n19.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n25.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n25.getBundleCache$spigot_1_8();
    char char29 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char31 = i18n30.getColorChar();
    char char32 = i18n30.getColorChar();
    char char33 = i18n30.getColorChar();
    char char34 = i18n30.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n35 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n35.getBundleCache$spigot_1_8();
    java.lang.String[] str_array37 = new java.lang.String[] {  };
    java.lang.String[] str_array39 = i18n35.getStrings(str_array37, "hi!");
    java.lang.String[] str_array41 = i18n30.getStrings(str_array39, "GMCrx");
    java.lang.String[] str_array43 = i18n25.getStrings(str_array39, "GMC");
    java.lang.String[] str_array45 = i18n19.getStrings(str_array39, "GMCw");
    java.lang.String[] str_array47 = i18n13.getStrings(str_array45, "GMCy");
    gtlp.groundmc.lobby.util.I18n i18n48 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char49 = i18n48.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache50 = i18n48.getBundleCache$spigot_1_8();
    char char51 = i18n48.getColorChar();
    char char52 = i18n48.getColorChar();
    char char53 = i18n48.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache54 = i18n48.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache55 = i18n48.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n56 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char57 = i18n56.getColorChar();
    char char58 = i18n56.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache59 = i18n56.getBundleCache$spigot_1_8();
    char char60 = i18n56.getColorChar();
    char char61 = i18n56.getColorChar();
    char char62 = i18n56.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n63 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char64 = i18n63.getColorChar();
    char char65 = i18n63.getColorChar();
    char char66 = i18n63.getColorChar();
    char char67 = i18n63.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n68 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache69 = i18n68.getBundleCache$spigot_1_8();
    java.lang.String[] str_array70 = new java.lang.String[] {  };
    java.lang.String[] str_array72 = i18n68.getStrings(str_array70, "hi!");
    java.lang.String[] str_array74 = i18n63.getStrings(str_array72, "GMCrx");
    java.lang.String[] str_array76 = i18n56.getStrings(str_array72, "friends");
    java.lang.String[] str_array78 = i18n48.getStrings(str_array76, "GMCt");
    java.lang.String[] str_array80 = i18n13.getStrings(str_array78, "coins");
    // The following exception was thrown during execution in test generation
    try {
    boolean b81 = commandVanish0.execute(commandSender10, command11, "groundmc.lobby.hide_players", str_array78);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "vanish"+ "'", str9.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char62 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char67 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test303"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender2 = null;
    org.bukkit.command.Command command3 = null;
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    char char7 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n5.getBundleCache$spigot_1_8();
    char char9 = i18n5.getColorChar();
    char char10 = i18n5.getColorChar();
    char char11 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n12.getBundleCache$spigot_1_8();
    char char15 = i18n12.getColorChar();
    char char16 = i18n12.getColorChar();
    char char17 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    char char22 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n20.getBundleCache$spigot_1_8();
    char char24 = i18n20.getColorChar();
    char char25 = i18n20.getColorChar();
    char char26 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    char char29 = i18n27.getColorChar();
    char char30 = i18n27.getColorChar();
    char char31 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n32.getBundleCache$spigot_1_8();
    java.lang.String[] str_array34 = new java.lang.String[] {  };
    java.lang.String[] str_array36 = i18n32.getStrings(str_array34, "hi!");
    java.lang.String[] str_array38 = i18n27.getStrings(str_array36, "GMCrx");
    java.lang.String[] str_array40 = i18n20.getStrings(str_array36, "friends");
    java.lang.String[] str_array42 = i18n12.getStrings(str_array40, "GMCt");
    java.lang.String[] str_array44 = i18n5.getStrings(str_array40, "groundmc.lobby.admin");
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char46 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache47 = i18n45.getBundleCache$spigot_1_8();
    char char48 = i18n45.getColorChar();
    char char49 = i18n45.getColorChar();
    char char50 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n45.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache52 = i18n45.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n53 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char54 = i18n53.getColorChar();
    char char55 = i18n53.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache56 = i18n53.getBundleCache$spigot_1_8();
    char char57 = i18n53.getColorChar();
    char char58 = i18n53.getColorChar();
    char char59 = i18n53.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n60 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char61 = i18n60.getColorChar();
    char char62 = i18n60.getColorChar();
    char char63 = i18n60.getColorChar();
    char char64 = i18n60.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n65 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache66 = i18n65.getBundleCache$spigot_1_8();
    java.lang.String[] str_array67 = new java.lang.String[] {  };
    java.lang.String[] str_array69 = i18n65.getStrings(str_array67, "hi!");
    java.lang.String[] str_array71 = i18n60.getStrings(str_array69, "GMCrx");
    java.lang.String[] str_array73 = i18n53.getStrings(str_array69, "friends");
    java.lang.String[] str_array75 = i18n45.getStrings(str_array73, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n76 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char77 = i18n76.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache78 = i18n76.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache79 = i18n76.getBundleCache$spigot_1_8();
    char char80 = i18n76.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n81 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char82 = i18n81.getColorChar();
    char char83 = i18n81.getColorChar();
    char char84 = i18n81.getColorChar();
    char char85 = i18n81.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n86 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache87 = i18n86.getBundleCache$spigot_1_8();
    java.lang.String[] str_array88 = new java.lang.String[] {  };
    java.lang.String[] str_array90 = i18n86.getStrings(str_array88, "hi!");
    java.lang.String[] str_array92 = i18n81.getStrings(str_array90, "GMCrx");
    java.lang.String[] str_array94 = i18n76.getStrings(str_array90, "GMC");
    java.lang.String[] str_array96 = i18n45.getStrings(str_array94, "groundmc.lobby.vanish");
    java.lang.String[] str_array98 = i18n5.getStrings(str_array94, "GMChide");
    // The following exception was thrown during execution in test generation
    try {
    boolean b99 = commandVanish0.execute(commandSender2, command3, "GMC", str_array98);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char62 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char77 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char80 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char82 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char83 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char84 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char85 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array98);

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test304"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender2 = null;
    org.bukkit.command.Command command3 = null;
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    char char7 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n5.getBundleCache$spigot_1_8();
    char char9 = i18n5.getColorChar();
    char char10 = i18n5.getColorChar();
    char char11 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n12.getBundleCache$spigot_1_8();
    char char15 = i18n12.getColorChar();
    char char16 = i18n12.getColorChar();
    char char17 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    char char22 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n20.getBundleCache$spigot_1_8();
    char char24 = i18n20.getColorChar();
    char char25 = i18n20.getColorChar();
    char char26 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    char char29 = i18n27.getColorChar();
    char char30 = i18n27.getColorChar();
    char char31 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n32.getBundleCache$spigot_1_8();
    java.lang.String[] str_array34 = new java.lang.String[] {  };
    java.lang.String[] str_array36 = i18n32.getStrings(str_array34, "hi!");
    java.lang.String[] str_array38 = i18n27.getStrings(str_array36, "GMCrx");
    java.lang.String[] str_array40 = i18n20.getStrings(str_array36, "friends");
    java.lang.String[] str_array42 = i18n12.getStrings(str_array40, "GMCt");
    java.lang.String[] str_array44 = i18n5.getStrings(str_array40, "groundmc.lobby.admin");
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char46 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache47 = i18n45.getBundleCache$spigot_1_8();
    char char48 = i18n45.getColorChar();
    char char49 = i18n45.getColorChar();
    char char50 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n45.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache52 = i18n45.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n53 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char54 = i18n53.getColorChar();
    char char55 = i18n53.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache56 = i18n53.getBundleCache$spigot_1_8();
    char char57 = i18n53.getColorChar();
    char char58 = i18n53.getColorChar();
    char char59 = i18n53.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n60 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char61 = i18n60.getColorChar();
    char char62 = i18n60.getColorChar();
    char char63 = i18n60.getColorChar();
    char char64 = i18n60.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n65 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache66 = i18n65.getBundleCache$spigot_1_8();
    java.lang.String[] str_array67 = new java.lang.String[] {  };
    java.lang.String[] str_array69 = i18n65.getStrings(str_array67, "hi!");
    java.lang.String[] str_array71 = i18n60.getStrings(str_array69, "GMCrx");
    java.lang.String[] str_array73 = i18n53.getStrings(str_array69, "friends");
    java.lang.String[] str_array75 = i18n45.getStrings(str_array73, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n76 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char77 = i18n76.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache78 = i18n76.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache79 = i18n76.getBundleCache$spigot_1_8();
    char char80 = i18n76.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n81 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char82 = i18n81.getColorChar();
    char char83 = i18n81.getColorChar();
    char char84 = i18n81.getColorChar();
    char char85 = i18n81.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n86 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache87 = i18n86.getBundleCache$spigot_1_8();
    java.lang.String[] str_array88 = new java.lang.String[] {  };
    java.lang.String[] str_array90 = i18n86.getStrings(str_array88, "hi!");
    java.lang.String[] str_array92 = i18n81.getStrings(str_array90, "GMCrx");
    java.lang.String[] str_array94 = i18n76.getStrings(str_array90, "GMC");
    java.lang.String[] str_array96 = i18n45.getStrings(str_array94, "groundmc.lobby.vanish");
    java.lang.String[] str_array98 = i18n5.getStrings(str_array94, "GMChide");
    // The following exception was thrown during execution in test generation
    try {
    boolean b99 = commandLobby0.execute(commandSender2, command3, "lang.lobby", str_array94);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char62 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char77 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char80 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char82 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char83 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char84 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char85 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array98);

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test305"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    java.lang.String str8 = commandLobby0.getName();
    java.lang.String str9 = commandLobby0.getName();
    java.lang.String str10 = commandLobby0.getName();
    java.lang.String str11 = commandLobby0.getName();
    java.lang.String str12 = commandLobby0.getName();
    java.lang.String str13 = commandLobby0.getName();
    java.lang.String str14 = commandLobby0.getName();
    java.util.Locale locale15 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array16 = commandLobby0.getCommandHelp(locale15);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lobby"+ "'", str8.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "lobby"+ "'", str9.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "lobby"+ "'", str10.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "lobby"+ "'", str11.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "lobby"+ "'", str12.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "lobby"+ "'", str13.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "lobby"+ "'", str14.equals("lobby"));

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test306"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    java.lang.String str6 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender7 = null;
    org.bukkit.command.Command command8 = null;
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n10.getBundleCache$spigot_1_8();
    char char13 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n10.getBundleCache$spigot_1_8();
    char char15 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    char char18 = i18n16.getColorChar();
    char char19 = i18n16.getColorChar();
    char char20 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n21.getBundleCache$spigot_1_8();
    java.lang.String[] str_array23 = new java.lang.String[] {  };
    java.lang.String[] str_array25 = i18n21.getStrings(str_array23, "hi!");
    java.lang.String[] str_array27 = i18n16.getStrings(str_array25, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char29 = i18n28.getColorChar();
    char char30 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n28.getBundleCache$spigot_1_8();
    char char32 = i18n28.getColorChar();
    char char33 = i18n28.getColorChar();
    char char34 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n35 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char36 = i18n35.getColorChar();
    char char37 = i18n35.getColorChar();
    char char38 = i18n35.getColorChar();
    char char39 = i18n35.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache41 = i18n40.getBundleCache$spigot_1_8();
    java.lang.String[] str_array42 = new java.lang.String[] {  };
    java.lang.String[] str_array44 = i18n40.getStrings(str_array42, "hi!");
    java.lang.String[] str_array46 = i18n35.getStrings(str_array44, "GMCrx");
    java.lang.String[] str_array48 = i18n28.getStrings(str_array44, "friends");
    java.lang.String[] str_array50 = i18n16.getStrings(str_array48, "");
    java.lang.String[] str_array52 = i18n10.getStrings(str_array48, "GMCw");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str53 = commandFriends0.getTabCompletion(commandSender7, command8, "hi!", str_array48);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test307"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender7 = null;
    org.bukkit.command.Command command8 = null;
    java.lang.String[] str_array10 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b11 = commandVanish0.execute(commandSender7, command8, "GMChide", str_array10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test308"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    java.lang.String str6 = commandFriends0.getName();
    java.lang.String str7 = commandFriends0.getName();
    java.lang.String str8 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender9 = null;
    org.bukkit.command.Command command10 = null;
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    char char18 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n16.getBundleCache$spigot_1_8();
    char char20 = i18n16.getColorChar();
    char char21 = i18n16.getColorChar();
    char char22 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    char char25 = i18n23.getColorChar();
    char char26 = i18n23.getColorChar();
    char char27 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n28.getBundleCache$spigot_1_8();
    java.lang.String[] str_array30 = new java.lang.String[] {  };
    java.lang.String[] str_array32 = i18n28.getStrings(str_array30, "hi!");
    java.lang.String[] str_array34 = i18n23.getStrings(str_array32, "GMCrx");
    java.lang.String[] str_array36 = i18n16.getStrings(str_array32, "friends");
    java.lang.String[] str_array38 = i18n14.getStrings(str_array36, "vanish");
    java.lang.String[] str_array40 = i18n12.getStrings(str_array36, "GMCx");
    // The following exception was thrown during execution in test generation
    try {
    boolean b41 = commandFriends0.execute(commandSender9, command10, "friends", str_array40);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friends"+ "'", str7.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friends"+ "'", str8.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test309"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    java.lang.String str9 = commandCoins0.getName();
    java.lang.String str10 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender11 = null;
    org.bukkit.command.Command command12 = null;
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    char char16 = i18n14.getColorChar();
    char char17 = i18n14.getColorChar();
    char char18 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n19.getBundleCache$spigot_1_8();
    java.lang.String[] str_array21 = new java.lang.String[] {  };
    java.lang.String[] str_array23 = i18n19.getStrings(str_array21, "hi!");
    java.lang.String[] str_array25 = i18n14.getStrings(str_array23, "GMCrx");
    char char26 = i18n14.getColorChar();
    char char27 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char29 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n28.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n28.getBundleCache$spigot_1_8();
    char char32 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char34 = i18n33.getColorChar();
    char char35 = i18n33.getColorChar();
    char char36 = i18n33.getColorChar();
    char char37 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n38 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache39 = i18n38.getBundleCache$spigot_1_8();
    java.lang.String[] str_array40 = new java.lang.String[] {  };
    java.lang.String[] str_array42 = i18n38.getStrings(str_array40, "hi!");
    java.lang.String[] str_array44 = i18n33.getStrings(str_array42, "GMCrx");
    java.lang.String[] str_array46 = i18n28.getStrings(str_array42, "GMC");
    java.lang.String[] str_array48 = i18n14.getStrings(str_array46, "GMCz");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str49 = commandCoins0.getTabCompletion(commandSender11, command12, "groundmc.lobby.vanish", str_array48);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "coins"+ "'", str10.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test310"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender3 = null;
    org.bukkit.command.Command command4 = null;
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char7 = i18n6.getColorChar();
    char char8 = i18n6.getColorChar();
    char char9 = i18n6.getColorChar();
    char char10 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n11.getBundleCache$spigot_1_8();
    java.lang.String[] str_array13 = new java.lang.String[] {  };
    java.lang.String[] str_array15 = i18n11.getStrings(str_array13, "hi!");
    java.lang.String[] str_array17 = i18n6.getStrings(str_array15, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n18.getBundleCache$spigot_1_8();
    char char22 = i18n18.getColorChar();
    char char23 = i18n18.getColorChar();
    char char24 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    char char27 = i18n25.getColorChar();
    char char28 = i18n25.getColorChar();
    char char29 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n30.getBundleCache$spigot_1_8();
    java.lang.String[] str_array32 = new java.lang.String[] {  };
    java.lang.String[] str_array34 = i18n30.getStrings(str_array32, "hi!");
    java.lang.String[] str_array36 = i18n25.getStrings(str_array34, "GMCrx");
    java.lang.String[] str_array38 = i18n18.getStrings(str_array34, "friends");
    java.lang.String[] str_array40 = i18n6.getStrings(str_array38, "");
    // The following exception was thrown during execution in test generation
    try {
    boolean b41 = commandLobby0.execute(commandSender3, command4, "coins", str_array38);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test311"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender3 = null;
    org.bukkit.command.Command command4 = null;
    java.lang.String[] str_array7 = new java.lang.String[] { "groundmc.lobby.vanish" };
    // The following exception was thrown during execution in test generation
    try {
    boolean b8 = commandFriend0.execute(commandSender3, command4, "GMCrx", str_array7);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test312"); }

    org.joda.time.DateTime dateTime2 = null;
    // The following exception was thrown during execution in test generation
    try {
    gtlp.groundmc.lobby.Relationship relationship3 = new gtlp.groundmc.lobby.Relationship("GMC", "GMCy", dateTime2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test313"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    java.lang.String str8 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender9 = null;
    org.bukkit.command.Command command10 = null;
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    char char14 = i18n12.getColorChar();
    char char15 = i18n12.getColorChar();
    char char16 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n17.getBundleCache$spigot_1_8();
    java.lang.String[] str_array19 = new java.lang.String[] {  };
    java.lang.String[] str_array21 = i18n17.getStrings(str_array19, "hi!");
    java.lang.String[] str_array23 = i18n12.getStrings(str_array21, "GMCrx");
    char char24 = i18n12.getColorChar();
    char char25 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n26.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n26.getBundleCache$spigot_1_8();
    char char30 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    char char33 = i18n31.getColorChar();
    char char34 = i18n31.getColorChar();
    char char35 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n36.getBundleCache$spigot_1_8();
    java.lang.String[] str_array38 = new java.lang.String[] {  };
    java.lang.String[] str_array40 = i18n36.getStrings(str_array38, "hi!");
    java.lang.String[] str_array42 = i18n31.getStrings(str_array40, "GMCrx");
    java.lang.String[] str_array44 = i18n26.getStrings(str_array40, "GMC");
    java.lang.String[] str_array46 = i18n12.getStrings(str_array44, "GMCz");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str47 = commandLobby0.getTabCompletion(commandSender9, command10, "GMCrx", str_array44);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lobby"+ "'", str8.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test314"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    java.lang.String str9 = commandCoins0.getName();
    java.lang.String str10 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender11 = null;
    org.bukkit.command.Command command12 = null;
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    char char16 = i18n14.getColorChar();
    char char17 = i18n14.getColorChar();
    char char18 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n19.getBundleCache$spigot_1_8();
    java.lang.String[] str_array21 = new java.lang.String[] {  };
    java.lang.String[] str_array23 = i18n19.getStrings(str_array21, "hi!");
    java.lang.String[] str_array25 = i18n14.getStrings(str_array23, "GMCrx");
    char char26 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    char char29 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n27.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n31.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n31.getBundleCache$spigot_1_8();
    char char35 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char37 = i18n36.getColorChar();
    char char38 = i18n36.getColorChar();
    char char39 = i18n36.getColorChar();
    char char40 = i18n36.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n41 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n41.getBundleCache$spigot_1_8();
    java.lang.String[] str_array43 = new java.lang.String[] {  };
    java.lang.String[] str_array45 = i18n41.getStrings(str_array43, "hi!");
    java.lang.String[] str_array47 = i18n36.getStrings(str_array45, "GMCrx");
    java.lang.String[] str_array49 = i18n31.getStrings(str_array45, "GMC");
    java.lang.String[] str_array51 = i18n27.getStrings(str_array45, "GMCx");
    java.lang.String[] str_array53 = i18n14.getStrings(str_array51, "hi!");
    gtlp.groundmc.lobby.util.I18n i18n54 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char55 = i18n54.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache56 = i18n54.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache57 = i18n54.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache58 = i18n54.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache59 = i18n54.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache60 = i18n54.getBundleCache$spigot_1_8();
    char char61 = i18n54.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n62 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache63 = i18n62.getBundleCache$spigot_1_8();
    char char64 = i18n62.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n65 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache66 = i18n65.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n67 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char68 = i18n67.getColorChar();
    char char69 = i18n67.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache70 = i18n67.getBundleCache$spigot_1_8();
    char char71 = i18n67.getColorChar();
    char char72 = i18n67.getColorChar();
    char char73 = i18n67.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n74 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char75 = i18n74.getColorChar();
    char char76 = i18n74.getColorChar();
    char char77 = i18n74.getColorChar();
    char char78 = i18n74.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n79 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache80 = i18n79.getBundleCache$spigot_1_8();
    java.lang.String[] str_array81 = new java.lang.String[] {  };
    java.lang.String[] str_array83 = i18n79.getStrings(str_array81, "hi!");
    java.lang.String[] str_array85 = i18n74.getStrings(str_array83, "GMCrx");
    java.lang.String[] str_array87 = i18n67.getStrings(str_array83, "friends");
    java.lang.String[] str_array89 = i18n65.getStrings(str_array87, "vanish");
    java.lang.String[] str_array91 = i18n62.getStrings(str_array89, "GMCt");
    java.lang.String[] str_array93 = i18n54.getStrings(str_array89, "GMCz");
    java.lang.String[] str_array95 = i18n14.getStrings(str_array93, "GMCy");
    // The following exception was thrown during execution in test generation
    try {
    boolean b96 = commandCoins0.execute(commandSender11, command12, "GMCz", str_array95);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "coins"+ "'", str10.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char69 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char71 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char72 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char73 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char75 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char76 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char77 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char78 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array95);

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test315"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    java.lang.String str8 = commandVanish0.getName();
    java.lang.String str9 = commandVanish0.getName();
    java.lang.String str10 = commandVanish0.getName();
    java.lang.String str11 = commandVanish0.getName();
    java.lang.String str12 = commandVanish0.getName();
    java.lang.String str13 = commandVanish0.getName();
    java.lang.String str14 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender15 = null;
    org.bukkit.command.Command command16 = null;
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n18.getBundleCache$spigot_1_8();
    char char23 = i18n18.getColorChar();
    char char24 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    char char27 = i18n25.getColorChar();
    char char28 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n25.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char31 = i18n30.getColorChar();
    char char32 = i18n30.getColorChar();
    char char33 = i18n30.getColorChar();
    char char34 = i18n30.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n35 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n35.getBundleCache$spigot_1_8();
    java.lang.String[] str_array37 = new java.lang.String[] {  };
    java.lang.String[] str_array39 = i18n35.getStrings(str_array37, "hi!");
    java.lang.String[] str_array41 = i18n30.getStrings(str_array39, "GMCrx");
    java.lang.String[] str_array43 = i18n25.getStrings(str_array41, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n44 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache45 = i18n44.getBundleCache$spigot_1_8();
    java.lang.String[] str_array46 = new java.lang.String[] {  };
    java.lang.String[] str_array48 = i18n44.getStrings(str_array46, "hi!");
    java.lang.String[] str_array50 = i18n25.getStrings(str_array48, "groundmc.lobby.hide_players");
    java.lang.String[] str_array52 = i18n18.getStrings(str_array50, "lang.lobby");
    // The following exception was thrown during execution in test generation
    try {
    boolean b53 = commandVanish0.execute(commandSender15, command16, "GMCry", str_array52);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "vanish"+ "'", str9.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "vanish"+ "'", str10.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "vanish"+ "'", str11.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "vanish"+ "'", str12.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "vanish"+ "'", str13.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "vanish"+ "'", str14.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test316"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender2 = null;
    org.bukkit.command.Command command3 = null;
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n5.getBundleCache$spigot_1_8();
    char char8 = i18n5.getColorChar();
    char char9 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n5.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n17.getBundleCache$spigot_1_8();
    char char21 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    char char24 = i18n22.getColorChar();
    char char25 = i18n22.getColorChar();
    char char26 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n27.getBundleCache$spigot_1_8();
    java.lang.String[] str_array29 = new java.lang.String[] {  };
    java.lang.String[] str_array31 = i18n27.getStrings(str_array29, "hi!");
    java.lang.String[] str_array33 = i18n22.getStrings(str_array31, "GMCrx");
    java.lang.String[] str_array35 = i18n17.getStrings(str_array31, "GMC");
    java.lang.String[] str_array37 = i18n11.getStrings(str_array31, "GMCw");
    java.lang.String[] str_array39 = i18n5.getStrings(str_array37, "GMCy");
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char41 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n40.getBundleCache$spigot_1_8();
    char char43 = i18n40.getColorChar();
    char char44 = i18n40.getColorChar();
    char char45 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache46 = i18n40.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache47 = i18n40.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n48 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char49 = i18n48.getColorChar();
    char char50 = i18n48.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n48.getBundleCache$spigot_1_8();
    char char52 = i18n48.getColorChar();
    char char53 = i18n48.getColorChar();
    char char54 = i18n48.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n55 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char56 = i18n55.getColorChar();
    char char57 = i18n55.getColorChar();
    char char58 = i18n55.getColorChar();
    char char59 = i18n55.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n60 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache61 = i18n60.getBundleCache$spigot_1_8();
    java.lang.String[] str_array62 = new java.lang.String[] {  };
    java.lang.String[] str_array64 = i18n60.getStrings(str_array62, "hi!");
    java.lang.String[] str_array66 = i18n55.getStrings(str_array64, "GMCrx");
    java.lang.String[] str_array68 = i18n48.getStrings(str_array64, "friends");
    java.lang.String[] str_array70 = i18n40.getStrings(str_array68, "GMCt");
    java.lang.String[] str_array72 = i18n5.getStrings(str_array70, "coins");
    // The following exception was thrown during execution in test generation
    try {
    boolean b73 = commandLobby0.execute(commandSender2, command3, "vanish", str_array72);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char56 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test317"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    java.lang.String str6 = commandFriends0.getName();
    java.lang.String str7 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender8 = null;
    org.bukkit.command.Command command9 = null;
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    char char13 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n11.getBundleCache$spigot_1_8();
    char char16 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n17.getBundleCache$spigot_1_8();
    char char21 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    char char26 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n24.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n24.getBundleCache$spigot_1_8();
    char char29 = i18n24.getColorChar();
    char char30 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    char char33 = i18n31.getColorChar();
    char char34 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n31.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char37 = i18n36.getColorChar();
    char char38 = i18n36.getColorChar();
    char char39 = i18n36.getColorChar();
    char char40 = i18n36.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n41 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n41.getBundleCache$spigot_1_8();
    java.lang.String[] str_array43 = new java.lang.String[] {  };
    java.lang.String[] str_array45 = i18n41.getStrings(str_array43, "hi!");
    java.lang.String[] str_array47 = i18n36.getStrings(str_array45, "GMCrx");
    java.lang.String[] str_array49 = i18n31.getStrings(str_array47, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n50 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n50.getBundleCache$spigot_1_8();
    java.lang.String[] str_array52 = new java.lang.String[] {  };
    java.lang.String[] str_array54 = i18n50.getStrings(str_array52, "hi!");
    java.lang.String[] str_array56 = i18n31.getStrings(str_array54, "groundmc.lobby.hide_players");
    java.lang.String[] str_array58 = i18n24.getStrings(str_array56, "lang.lobby");
    java.lang.String[] str_array60 = i18n17.getStrings(str_array58, "hi!");
    java.lang.String[] str_array62 = i18n11.getStrings(str_array60, "GMCw");
    // The following exception was thrown during execution in test generation
    try {
    boolean b63 = commandFriends0.execute(commandSender8, command9, "GMCrx", str_array60);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friends"+ "'", str7.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test318"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    char char4 = i18n0.getColorChar();
    char char5 = i18n0.getColorChar();
    char char6 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char8 = i18n7.getColorChar();
    char char9 = i18n7.getColorChar();
    char char10 = i18n7.getColorChar();
    char char11 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n12.getBundleCache$spigot_1_8();
    java.lang.String[] str_array14 = new java.lang.String[] {  };
    java.lang.String[] str_array16 = i18n12.getStrings(str_array14, "hi!");
    java.lang.String[] str_array18 = i18n7.getStrings(str_array16, "GMCrx");
    java.lang.String[] str_array20 = i18n0.getStrings(str_array16, "friends");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n0.getBundleCache$spigot_1_8();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str24 = i18n0.getString("coins", "GMChide");
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test319"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    java.lang.String str8 = commandLobby0.getName();
    java.lang.String str9 = commandLobby0.getName();
    java.lang.String str10 = commandLobby0.getName();
    java.lang.String str11 = commandLobby0.getName();
    java.lang.String str12 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender13 = null;
    org.bukkit.command.Command command14 = null;
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n16.getBundleCache$spigot_1_8();
    char char19 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    char char22 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n20.getBundleCache$spigot_1_8();
    char char24 = i18n20.getColorChar();
    char char25 = i18n20.getColorChar();
    char char26 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    char char29 = i18n27.getColorChar();
    char char30 = i18n27.getColorChar();
    char char31 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n32.getBundleCache$spigot_1_8();
    java.lang.String[] str_array34 = new java.lang.String[] {  };
    java.lang.String[] str_array36 = i18n32.getStrings(str_array34, "hi!");
    java.lang.String[] str_array38 = i18n27.getStrings(str_array36, "GMCrx");
    java.lang.String[] str_array40 = i18n20.getStrings(str_array36, "friends");
    java.lang.String[] str_array42 = i18n16.getStrings(str_array40, "GMCsilent");
    // The following exception was thrown during execution in test generation
    try {
    boolean b43 = commandLobby0.execute(commandSender13, command14, "lobby", str_array42);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lobby"+ "'", str8.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "lobby"+ "'", str9.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "lobby"+ "'", str10.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "lobby"+ "'", str11.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "lobby"+ "'", str12.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test320"); }

    gtlp.groundmc.lobby.registry.LobbyCommandRegistry.Companion companion0 = gtlp.groundmc.lobby.registry.LobbyCommandRegistry.Companion;
    gtlp.groundmc.lobby.commands.CommandCoins commandCoins1 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str2 = commandCoins1.getName();
    java.lang.String str3 = commandCoins1.getName();
    java.lang.String str4 = commandCoins1.getName();
    java.lang.String str5 = commandCoins1.getName();
    java.lang.String str6 = commandCoins1.getName();
    java.lang.String str7 = commandCoins1.getName();
    java.lang.String str8 = commandCoins1.getName();
    java.lang.String str9 = commandCoins1.getName();
    java.lang.String str10 = commandCoins1.getName();
    java.lang.String str11 = commandCoins1.getName();
    java.lang.String str12 = commandCoins1.getName();
    java.lang.String str13 = commandCoins1.getName();
    java.lang.String str14 = commandCoins1.getName();
    java.lang.String str15 = commandCoins1.getName();
    java.lang.String str16 = commandCoins1.getName();
    java.lang.String str17 = commandCoins1.getName();
    java.lang.String str18 = commandCoins1.getName();
    java.lang.String str19 = commandCoins1.getName();
    // The following exception was thrown during execution in test generation
    try {
    companion0.registerCommand((gtlp.groundmc.lobby.commands.ILobbyCommand)commandCoins1);
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(companion0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "coins"+ "'", str10.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "coins"+ "'", str11.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "coins"+ "'", str12.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "coins"+ "'", str13.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "coins"+ "'", str14.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "coins"+ "'", str15.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "coins"+ "'", str16.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "coins"+ "'", str17.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "coins"+ "'", str18.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "coins"+ "'", str19.equals("coins"));

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test321"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    java.lang.String str6 = resourceBundleCache5.getName();
    java.util.concurrent.ConcurrentHashMap<java.util.Locale,java.util.ResourceBundle> concurrenthashmap_locale_resourceBundle7 = resourceBundleCache5.getBackingMap$spigot_1_8();
    java.lang.String str8 = resourceBundleCache5.getName();
    java.util.concurrent.ConcurrentHashMap<java.util.Locale,java.util.ResourceBundle> concurrenthashmap_locale_resourceBundle9 = resourceBundleCache5.getBackingMap$spigot_1_8();
    java.util.Locale locale11 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str12 = resourceBundleCache5.get("groundmc.lobby.admin", locale11);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lang.lobby"+ "'", str6.equals("lang.lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(concurrenthashmap_locale_resourceBundle7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lang.lobby"+ "'", str8.equals("lang.lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(concurrenthashmap_locale_resourceBundle9);

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test322"); }

    gtlp.groundmc.lobby.registry.LobbyCommandRegistry.Companion companion0 = gtlp.groundmc.lobby.registry.LobbyCommandRegistry.Companion;
    gtlp.groundmc.lobby.commands.CommandFriend commandFriend1 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str2 = commandFriend1.getName();
    java.lang.String str3 = commandFriend1.getName();
    java.lang.String str4 = commandFriend1.getName();
    java.lang.String str5 = commandFriend1.getName();
    java.lang.String str6 = commandFriend1.getName();
    java.lang.String str7 = commandFriend1.getName();
    java.lang.String str8 = commandFriend1.getName();
    java.lang.String str9 = commandFriend1.getName();
    java.lang.String str10 = commandFriend1.getName();
    java.lang.String str11 = commandFriend1.getName();
    java.lang.String str12 = commandFriend1.getName();
    java.lang.String str13 = commandFriend1.getName();
    // The following exception was thrown during execution in test generation
    try {
    companion0.registerCommand((gtlp.groundmc.lobby.commands.ILobbyCommand)commandFriend1);
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(companion0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friend"+ "'", str8.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "friend"+ "'", str9.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "friend"+ "'", str10.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "friend"+ "'", str11.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "friend"+ "'", str12.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "friend"+ "'", str13.equals("friend"));

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test323"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    org.bukkit.command.CommandSender commandSender1 = null;
    org.bukkit.command.Command command2 = null;
    java.lang.String[] str_array7 = new java.lang.String[] { "vanish", "vanish", "GMCt" };
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str8 = commandLobby0.getTabCompletion(commandSender1, command2, "friend", str_array7);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test324"); }

    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = new gtlp.groundmc.lobby.util.I18n.ResourceBundleCache("hi!");
    java.util.concurrent.ConcurrentHashMap<java.util.Locale,java.util.ResourceBundle> concurrenthashmap_locale_resourceBundle2 = resourceBundleCache1.getBackingMap$spigot_1_8();
    java.lang.String str3 = resourceBundleCache1.getName();
    java.lang.String str4 = resourceBundleCache1.getName();
    java.lang.String str5 = resourceBundleCache1.getName();
    java.lang.String str6 = resourceBundleCache1.getName();
    java.lang.String str7 = resourceBundleCache1.getName();
    java.util.concurrent.ConcurrentHashMap<java.util.Locale,java.util.ResourceBundle> concurrenthashmap_locale_resourceBundle8 = resourceBundleCache1.getBackingMap$spigot_1_8();
    java.util.concurrent.ConcurrentHashMap<java.util.Locale,java.util.ResourceBundle> concurrenthashmap_locale_resourceBundle9 = resourceBundleCache1.getBackingMap$spigot_1_8();
    java.util.Locale locale11 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str12 = resourceBundleCache1.get("groundmc.lobby.vanish", locale11);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(concurrenthashmap_locale_resourceBundle2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "hi!"+ "'", str3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!"+ "'", str4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!"+ "'", str5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!"+ "'", str6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(concurrenthashmap_locale_resourceBundle8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(concurrenthashmap_locale_resourceBundle9);

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test325"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    char char3 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str7 = i18n0.getString("GMCw", "groundmc.lobby.hide_players");
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test326"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender3 = null;
    org.bukkit.command.Command command4 = null;
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char7 = i18n6.getColorChar();
    char char8 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n6.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n6.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n11.getBundleCache$spigot_1_8();
    char char14 = i18n11.getColorChar();
    char char15 = i18n11.getColorChar();
    char char16 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n18.getBundleCache$spigot_1_8();
    char char21 = i18n18.getColorChar();
    char char22 = i18n18.getColorChar();
    char char23 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    char char28 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n26.getBundleCache$spigot_1_8();
    char char30 = i18n26.getColorChar();
    char char31 = i18n26.getColorChar();
    char char32 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char34 = i18n33.getColorChar();
    char char35 = i18n33.getColorChar();
    char char36 = i18n33.getColorChar();
    char char37 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n38 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache39 = i18n38.getBundleCache$spigot_1_8();
    java.lang.String[] str_array40 = new java.lang.String[] {  };
    java.lang.String[] str_array42 = i18n38.getStrings(str_array40, "hi!");
    java.lang.String[] str_array44 = i18n33.getStrings(str_array42, "GMCrx");
    java.lang.String[] str_array46 = i18n26.getStrings(str_array42, "friends");
    java.lang.String[] str_array48 = i18n18.getStrings(str_array46, "GMCt");
    java.lang.String[] str_array50 = i18n11.getStrings(str_array46, "friend");
    gtlp.groundmc.lobby.util.I18n i18n51 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char52 = i18n51.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache53 = i18n51.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache54 = i18n51.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache55 = i18n51.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache56 = i18n51.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n57 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char58 = i18n57.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache59 = i18n57.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache60 = i18n57.getBundleCache$spigot_1_8();
    char char61 = i18n57.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n62 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char63 = i18n62.getColorChar();
    char char64 = i18n62.getColorChar();
    char char65 = i18n62.getColorChar();
    char char66 = i18n62.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n67 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache68 = i18n67.getBundleCache$spigot_1_8();
    java.lang.String[] str_array69 = new java.lang.String[] {  };
    java.lang.String[] str_array71 = i18n67.getStrings(str_array69, "hi!");
    java.lang.String[] str_array73 = i18n62.getStrings(str_array71, "GMCrx");
    java.lang.String[] str_array75 = i18n57.getStrings(str_array71, "GMC");
    java.lang.String[] str_array77 = i18n51.getStrings(str_array71, "GMCw");
    java.lang.String[] str_array79 = i18n11.getStrings(str_array77, "groundmc.lobby.admin");
    java.lang.String[] str_array81 = i18n6.getStrings(str_array77, "GMCry");
    // The following exception was thrown during execution in test generation
    try {
    boolean b82 = commandLobby0.execute(commandSender3, command4, "GMCy", str_array77);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test327"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = i18n0.getBundleCache$spigot_1_8();
    char char2 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n3 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char4 = i18n3.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n3.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n3.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n3.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n3.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n3.getBundleCache$spigot_1_8();
    char char10 = i18n3.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n11.getBundleCache$spigot_1_8();
    char char13 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    char char18 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n16.getBundleCache$spigot_1_8();
    char char20 = i18n16.getColorChar();
    char char21 = i18n16.getColorChar();
    char char22 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    char char25 = i18n23.getColorChar();
    char char26 = i18n23.getColorChar();
    char char27 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n28.getBundleCache$spigot_1_8();
    java.lang.String[] str_array30 = new java.lang.String[] {  };
    java.lang.String[] str_array32 = i18n28.getStrings(str_array30, "hi!");
    java.lang.String[] str_array34 = i18n23.getStrings(str_array32, "GMCrx");
    java.lang.String[] str_array36 = i18n16.getStrings(str_array32, "friends");
    java.lang.String[] str_array38 = i18n14.getStrings(str_array36, "vanish");
    java.lang.String[] str_array40 = i18n11.getStrings(str_array38, "GMCt");
    java.lang.String[] str_array42 = i18n3.getStrings(str_array38, "GMCz");
    java.util.Locale locale43 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array44 = i18n0.getStrings(str_array42, locale43);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test328"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender4 = null;
    org.bukkit.command.Command command5 = null;
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char8 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n7.getBundleCache$spigot_1_8();
    char char10 = i18n7.getColorChar();
    char char11 = i18n7.getColorChar();
    char char12 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n14.getBundleCache$spigot_1_8();
    char char17 = i18n14.getColorChar();
    char char18 = i18n14.getColorChar();
    char char19 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    char char24 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n22.getBundleCache$spigot_1_8();
    char char26 = i18n22.getColorChar();
    char char27 = i18n22.getColorChar();
    char char28 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char30 = i18n29.getColorChar();
    char char31 = i18n29.getColorChar();
    char char32 = i18n29.getColorChar();
    char char33 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n34 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n34.getBundleCache$spigot_1_8();
    java.lang.String[] str_array36 = new java.lang.String[] {  };
    java.lang.String[] str_array38 = i18n34.getStrings(str_array36, "hi!");
    java.lang.String[] str_array40 = i18n29.getStrings(str_array38, "GMCrx");
    java.lang.String[] str_array42 = i18n22.getStrings(str_array38, "friends");
    java.lang.String[] str_array44 = i18n14.getStrings(str_array42, "GMCt");
    java.lang.String[] str_array46 = i18n7.getStrings(str_array42, "friend");
    gtlp.groundmc.lobby.util.I18n i18n47 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char48 = i18n47.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache49 = i18n47.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache50 = i18n47.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n47.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache52 = i18n47.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n53 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char54 = i18n53.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache55 = i18n53.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache56 = i18n53.getBundleCache$spigot_1_8();
    char char57 = i18n53.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n58 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char59 = i18n58.getColorChar();
    char char60 = i18n58.getColorChar();
    char char61 = i18n58.getColorChar();
    char char62 = i18n58.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n63 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache64 = i18n63.getBundleCache$spigot_1_8();
    java.lang.String[] str_array65 = new java.lang.String[] {  };
    java.lang.String[] str_array67 = i18n63.getStrings(str_array65, "hi!");
    java.lang.String[] str_array69 = i18n58.getStrings(str_array67, "GMCrx");
    java.lang.String[] str_array71 = i18n53.getStrings(str_array67, "GMC");
    java.lang.String[] str_array73 = i18n47.getStrings(str_array67, "GMCw");
    java.lang.String[] str_array75 = i18n7.getStrings(str_array73, "groundmc.lobby.admin");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str76 = commandVanish0.getTabCompletion(commandSender4, command5, "GMCrx", str_array73);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char62 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test329"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender5 = null;
    org.bukkit.command.Command command6 = null;
    java.lang.String[] str_array8 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b9 = commandLobby0.execute(commandSender5, command6, "friend", str_array8);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test330"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    char char4 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    java.lang.String str6 = resourceBundleCache5.getName();
    java.util.concurrent.ConcurrentHashMap<java.util.Locale,java.util.ResourceBundle> concurrenthashmap_locale_resourceBundle7 = resourceBundleCache5.getBackingMap$spigot_1_8();
    java.lang.String str8 = resourceBundleCache5.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lang.lobby"+ "'", str6.equals("lang.lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(concurrenthashmap_locale_resourceBundle7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lang.lobby"+ "'", str8.equals("lang.lobby"));

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test331"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender2 = null;
    org.bukkit.command.Command command3 = null;
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n5.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n5.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n9.getBundleCache$spigot_1_8();
    java.lang.String[] str_array11 = new java.lang.String[] {  };
    java.lang.String[] str_array13 = i18n9.getStrings(str_array11, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n9.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n15.getBundleCache$spigot_1_8();
    char char18 = i18n15.getColorChar();
    char char19 = i18n15.getColorChar();
    char char20 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n22.getBundleCache$spigot_1_8();
    char char25 = i18n22.getColorChar();
    char char26 = i18n22.getColorChar();
    char char27 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n22.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n22.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char31 = i18n30.getColorChar();
    char char32 = i18n30.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n30.getBundleCache$spigot_1_8();
    char char34 = i18n30.getColorChar();
    char char35 = i18n30.getColorChar();
    char char36 = i18n30.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n37 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char38 = i18n37.getColorChar();
    char char39 = i18n37.getColorChar();
    char char40 = i18n37.getColorChar();
    char char41 = i18n37.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n42 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache43 = i18n42.getBundleCache$spigot_1_8();
    java.lang.String[] str_array44 = new java.lang.String[] {  };
    java.lang.String[] str_array46 = i18n42.getStrings(str_array44, "hi!");
    java.lang.String[] str_array48 = i18n37.getStrings(str_array46, "GMCrx");
    java.lang.String[] str_array50 = i18n30.getStrings(str_array46, "friends");
    java.lang.String[] str_array52 = i18n22.getStrings(str_array50, "GMCt");
    java.lang.String[] str_array54 = i18n15.getStrings(str_array50, "friend");
    java.lang.String[] str_array56 = i18n9.getStrings(str_array50, "GMCt");
    java.lang.String[] str_array58 = i18n5.getStrings(str_array50, "groundmc.lobby.admin");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str59 = commandFriends0.getTabCompletion(commandSender2, command3, "friend", str_array50);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test332"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender2 = null;
    org.bukkit.command.Command command3 = null;
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    char char7 = i18n5.getColorChar();
    char char8 = i18n5.getColorChar();
    char char9 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n10.getBundleCache$spigot_1_8();
    java.lang.String[] str_array12 = new java.lang.String[] {  };
    java.lang.String[] str_array14 = i18n10.getStrings(str_array12, "hi!");
    java.lang.String[] str_array16 = i18n5.getStrings(str_array14, "GMCrx");
    char char17 = i18n5.getColorChar();
    char char18 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n19.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n19.getBundleCache$spigot_1_8();
    char char23 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    char char26 = i18n24.getColorChar();
    char char27 = i18n24.getColorChar();
    char char28 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n29.getBundleCache$spigot_1_8();
    java.lang.String[] str_array31 = new java.lang.String[] {  };
    java.lang.String[] str_array33 = i18n29.getStrings(str_array31, "hi!");
    java.lang.String[] str_array35 = i18n24.getStrings(str_array33, "GMCrx");
    java.lang.String[] str_array37 = i18n19.getStrings(str_array33, "GMC");
    java.lang.String[] str_array39 = i18n5.getStrings(str_array37, "GMCz");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str40 = commandLobby0.getTabCompletion(commandSender2, command3, "friend", str_array39);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test333"); }

    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = new gtlp.groundmc.lobby.util.I18n.ResourceBundleCache("");
    java.lang.String str2 = resourceBundleCache1.getName();
    java.util.concurrent.ConcurrentHashMap<java.util.Locale,java.util.ResourceBundle> concurrenthashmap_locale_resourceBundle3 = resourceBundleCache1.getBackingMap$spigot_1_8();
    java.util.concurrent.ConcurrentHashMap<java.util.Locale,java.util.ResourceBundle> concurrenthashmap_locale_resourceBundle4 = resourceBundleCache1.getBackingMap$spigot_1_8();
    java.util.concurrent.ConcurrentHashMap<java.util.Locale,java.util.ResourceBundle> concurrenthashmap_locale_resourceBundle5 = resourceBundleCache1.getBackingMap$spigot_1_8();
    java.lang.String str6 = resourceBundleCache1.getName();
    java.util.Locale locale8 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str9 = resourceBundleCache1.get("coins", locale8);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(concurrenthashmap_locale_resourceBundle3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(concurrenthashmap_locale_resourceBundle4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(concurrenthashmap_locale_resourceBundle5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test334"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender6 = null;
    org.bukkit.command.Command command7 = null;
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    char char11 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n9.getBundleCache$spigot_1_8();
    char char13 = i18n9.getColorChar();
    char char14 = i18n9.getColorChar();
    char char15 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    char char18 = i18n16.getColorChar();
    char char19 = i18n16.getColorChar();
    char char20 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n21.getBundleCache$spigot_1_8();
    java.lang.String[] str_array23 = new java.lang.String[] {  };
    java.lang.String[] str_array25 = i18n21.getStrings(str_array23, "hi!");
    java.lang.String[] str_array27 = i18n16.getStrings(str_array25, "GMCrx");
    java.lang.String[] str_array29 = i18n9.getStrings(str_array25, "friends");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str30 = commandVanish0.getTabCompletion(commandSender6, command7, "GMC", str_array29);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test335"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = i18n0.getBundleCache$spigot_1_8();
    char char2 = i18n0.getColorChar();
    char char3 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    java.util.Locale locale6 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str7 = resourceBundleCache4.get("friends", locale6);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test336"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender3 = null;
    org.bukkit.command.Command command4 = null;
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char7 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n6.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n6.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n6.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n6.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n12.getBundleCache$spigot_1_8();
    char char16 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    char char19 = i18n17.getColorChar();
    char char20 = i18n17.getColorChar();
    char char21 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n22.getBundleCache$spigot_1_8();
    java.lang.String[] str_array24 = new java.lang.String[] {  };
    java.lang.String[] str_array26 = i18n22.getStrings(str_array24, "hi!");
    java.lang.String[] str_array28 = i18n17.getStrings(str_array26, "GMCrx");
    java.lang.String[] str_array30 = i18n12.getStrings(str_array26, "GMC");
    java.lang.String[] str_array32 = i18n6.getStrings(str_array26, "GMCw");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str33 = commandFriend0.getTabCompletion(commandSender3, command4, "groundmc.lobby.admin", str_array32);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test337"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    java.lang.String str9 = commandCoins0.getName();
    java.lang.String str10 = commandCoins0.getName();
    java.lang.String str11 = commandCoins0.getName();
    java.lang.String str12 = commandCoins0.getName();
    java.lang.String str13 = commandCoins0.getName();
    java.lang.String str14 = commandCoins0.getName();
    java.lang.String str15 = commandCoins0.getName();
    java.lang.String str16 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender17 = null;
    org.bukkit.command.Command command18 = null;
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    char char22 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n20.getBundleCache$spigot_1_8();
    char char25 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n26.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n26.getBundleCache$spigot_1_8();
    char char30 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n26.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n26.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char34 = i18n33.getColorChar();
    char char35 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n33.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n33.getBundleCache$spigot_1_8();
    char char38 = i18n33.getColorChar();
    char char39 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char41 = i18n40.getColorChar();
    char char42 = i18n40.getColorChar();
    char char43 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache44 = i18n40.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char46 = i18n45.getColorChar();
    char char47 = i18n45.getColorChar();
    char char48 = i18n45.getColorChar();
    char char49 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n50 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n50.getBundleCache$spigot_1_8();
    java.lang.String[] str_array52 = new java.lang.String[] {  };
    java.lang.String[] str_array54 = i18n50.getStrings(str_array52, "hi!");
    java.lang.String[] str_array56 = i18n45.getStrings(str_array54, "GMCrx");
    java.lang.String[] str_array58 = i18n40.getStrings(str_array56, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n59 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache60 = i18n59.getBundleCache$spigot_1_8();
    java.lang.String[] str_array61 = new java.lang.String[] {  };
    java.lang.String[] str_array63 = i18n59.getStrings(str_array61, "hi!");
    java.lang.String[] str_array65 = i18n40.getStrings(str_array63, "groundmc.lobby.hide_players");
    java.lang.String[] str_array67 = i18n33.getStrings(str_array65, "lang.lobby");
    java.lang.String[] str_array69 = i18n26.getStrings(str_array67, "hi!");
    java.lang.String[] str_array71 = i18n20.getStrings(str_array69, "GMCw");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str72 = commandCoins0.getTabCompletion(commandSender17, command18, "GMCry", str_array69);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "coins"+ "'", str10.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "coins"+ "'", str11.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "coins"+ "'", str12.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "coins"+ "'", str13.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "coins"+ "'", str14.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "coins"+ "'", str15.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "coins"+ "'", str16.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test338"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender2 = null;
    org.bukkit.command.Command command3 = null;
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char8 = i18n7.getColorChar();
    char char9 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n7.getBundleCache$spigot_1_8();
    char char12 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n13.getBundleCache$spigot_1_8();
    char char17 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    char char22 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n20.getBundleCache$spigot_1_8();
    char char25 = i18n20.getColorChar();
    char char26 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    char char29 = i18n27.getColorChar();
    char char30 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n27.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char33 = i18n32.getColorChar();
    char char34 = i18n32.getColorChar();
    char char35 = i18n32.getColorChar();
    char char36 = i18n32.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n37 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache38 = i18n37.getBundleCache$spigot_1_8();
    java.lang.String[] str_array39 = new java.lang.String[] {  };
    java.lang.String[] str_array41 = i18n37.getStrings(str_array39, "hi!");
    java.lang.String[] str_array43 = i18n32.getStrings(str_array41, "GMCrx");
    java.lang.String[] str_array45 = i18n27.getStrings(str_array43, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n46 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache47 = i18n46.getBundleCache$spigot_1_8();
    java.lang.String[] str_array48 = new java.lang.String[] {  };
    java.lang.String[] str_array50 = i18n46.getStrings(str_array48, "hi!");
    java.lang.String[] str_array52 = i18n27.getStrings(str_array50, "groundmc.lobby.hide_players");
    java.lang.String[] str_array54 = i18n20.getStrings(str_array52, "lang.lobby");
    java.lang.String[] str_array56 = i18n13.getStrings(str_array54, "hi!");
    java.lang.String[] str_array58 = i18n7.getStrings(str_array56, "GMCw");
    java.lang.String[] str_array60 = i18n5.getStrings(str_array58, "GMCry");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str61 = commandFriends0.getTabCompletion(commandSender2, command3, "GMChide", str_array60);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test339"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    char char5 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n0.getBundleCache$spigot_1_8();
    char char8 = i18n0.getColorChar();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str11 = i18n0.getString("", "GMCt");
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test340"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    java.util.Locale locale5 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str6 = resourceBundleCache3.get("GMCx", locale5);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test341"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = i18n0.getBundleCache$spigot_1_8();
    java.lang.String[] str_array2 = new java.lang.String[] {  };
    java.lang.String[] str_array4 = i18n0.getStrings(str_array2, "hi!");
    char char5 = i18n0.getColorChar();
    java.util.Locale locale7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = i18n0.getString("GMCt", locale7);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test342"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    java.lang.String str6 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender7 = null;
    org.bukkit.command.Command command8 = null;
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    char char12 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n10.getBundleCache$spigot_1_8();
    char char15 = i18n10.getColorChar();
    char char16 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    char char19 = i18n17.getColorChar();
    char char20 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    char char24 = i18n22.getColorChar();
    char char25 = i18n22.getColorChar();
    char char26 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n27.getBundleCache$spigot_1_8();
    java.lang.String[] str_array29 = new java.lang.String[] {  };
    java.lang.String[] str_array31 = i18n27.getStrings(str_array29, "hi!");
    java.lang.String[] str_array33 = i18n22.getStrings(str_array31, "GMCrx");
    java.lang.String[] str_array35 = i18n17.getStrings(str_array33, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n36.getBundleCache$spigot_1_8();
    java.lang.String[] str_array38 = new java.lang.String[] {  };
    java.lang.String[] str_array40 = i18n36.getStrings(str_array38, "hi!");
    java.lang.String[] str_array42 = i18n17.getStrings(str_array40, "groundmc.lobby.hide_players");
    java.lang.String[] str_array44 = i18n10.getStrings(str_array42, "lang.lobby");
    // The following exception was thrown during execution in test generation
    try {
    boolean b45 = commandFriends0.execute(commandSender7, command8, "hi!", str_array42);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test343"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    java.lang.String str8 = commandFriend0.getName();
    java.lang.String str9 = commandFriend0.getName();
    java.lang.String str10 = commandFriend0.getName();
    java.lang.String str11 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender12 = null;
    org.bukkit.command.Command command13 = null;
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    char char17 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n15.getBundleCache$spigot_1_8();
    char char20 = i18n15.getColorChar();
    char char21 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    char char24 = i18n22.getColorChar();
    char char25 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n22.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    char char29 = i18n27.getColorChar();
    char char30 = i18n27.getColorChar();
    char char31 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n32.getBundleCache$spigot_1_8();
    java.lang.String[] str_array34 = new java.lang.String[] {  };
    java.lang.String[] str_array36 = i18n32.getStrings(str_array34, "hi!");
    java.lang.String[] str_array38 = i18n27.getStrings(str_array36, "GMCrx");
    java.lang.String[] str_array40 = i18n22.getStrings(str_array38, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n41 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n41.getBundleCache$spigot_1_8();
    java.lang.String[] str_array43 = new java.lang.String[] {  };
    java.lang.String[] str_array45 = i18n41.getStrings(str_array43, "hi!");
    java.lang.String[] str_array47 = i18n22.getStrings(str_array45, "groundmc.lobby.hide_players");
    java.lang.String[] str_array49 = i18n15.getStrings(str_array47, "lang.lobby");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str50 = commandFriend0.getTabCompletion(commandSender12, command13, "", str_array47);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friend"+ "'", str8.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "friend"+ "'", str9.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "friend"+ "'", str10.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "friend"+ "'", str11.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test344"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    char char4 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    char char7 = i18n5.getColorChar();
    char char8 = i18n5.getColorChar();
    char char9 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n10.getBundleCache$spigot_1_8();
    java.lang.String[] str_array12 = new java.lang.String[] {  };
    java.lang.String[] str_array14 = i18n10.getStrings(str_array12, "hi!");
    java.lang.String[] str_array16 = i18n5.getStrings(str_array14, "GMCrx");
    java.lang.String[] str_array18 = i18n0.getStrings(str_array14, "GMC");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n0.getBundleCache$spigot_1_8();
    char char21 = i18n0.getColorChar();
    char char22 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n23.getBundleCache$spigot_1_8();
    char char26 = i18n23.getColorChar();
    char char27 = i18n23.getColorChar();
    char char28 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n23.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char31 = i18n30.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n30.getBundleCache$spigot_1_8();
    char char33 = i18n30.getColorChar();
    char char34 = i18n30.getColorChar();
    char char35 = i18n30.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n30.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n30.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n38 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char39 = i18n38.getColorChar();
    char char40 = i18n38.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache41 = i18n38.getBundleCache$spigot_1_8();
    char char42 = i18n38.getColorChar();
    char char43 = i18n38.getColorChar();
    char char44 = i18n38.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char46 = i18n45.getColorChar();
    char char47 = i18n45.getColorChar();
    char char48 = i18n45.getColorChar();
    char char49 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n50 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n50.getBundleCache$spigot_1_8();
    java.lang.String[] str_array52 = new java.lang.String[] {  };
    java.lang.String[] str_array54 = i18n50.getStrings(str_array52, "hi!");
    java.lang.String[] str_array56 = i18n45.getStrings(str_array54, "GMCrx");
    java.lang.String[] str_array58 = i18n38.getStrings(str_array54, "friends");
    java.lang.String[] str_array60 = i18n30.getStrings(str_array58, "GMCt");
    java.lang.String[] str_array62 = i18n23.getStrings(str_array58, "friend");
    gtlp.groundmc.lobby.util.I18n i18n63 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache64 = i18n63.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n65 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char66 = i18n65.getColorChar();
    char char67 = i18n65.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache68 = i18n65.getBundleCache$spigot_1_8();
    char char69 = i18n65.getColorChar();
    char char70 = i18n65.getColorChar();
    char char71 = i18n65.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n72 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char73 = i18n72.getColorChar();
    char char74 = i18n72.getColorChar();
    char char75 = i18n72.getColorChar();
    char char76 = i18n72.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n77 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache78 = i18n77.getBundleCache$spigot_1_8();
    java.lang.String[] str_array79 = new java.lang.String[] {  };
    java.lang.String[] str_array81 = i18n77.getStrings(str_array79, "hi!");
    java.lang.String[] str_array83 = i18n72.getStrings(str_array81, "GMCrx");
    java.lang.String[] str_array85 = i18n65.getStrings(str_array81, "friends");
    java.lang.String[] str_array87 = i18n63.getStrings(str_array85, "vanish");
    java.lang.String[] str_array89 = i18n23.getStrings(str_array87, "hi!");
    java.util.Locale locale90 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array91 = i18n0.getStrings(str_array87, locale90);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char67 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char69 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char70 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char71 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char73 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char74 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char75 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char76 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array89);

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test345"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    java.lang.String str9 = commandCoins0.getName();
    java.lang.String str10 = commandCoins0.getName();
    java.lang.String str11 = commandCoins0.getName();
    java.lang.String str12 = commandCoins0.getName();
    java.lang.String str13 = commandCoins0.getName();
    java.lang.String str14 = commandCoins0.getName();
    java.lang.String str15 = commandCoins0.getName();
    java.lang.String str16 = commandCoins0.getName();
    java.lang.String str17 = commandCoins0.getName();
    java.lang.String str18 = commandCoins0.getName();
    java.lang.String str19 = commandCoins0.getName();
    java.util.Locale locale20 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array21 = commandCoins0.getCommandHelp(locale20);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "coins"+ "'", str10.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "coins"+ "'", str11.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "coins"+ "'", str12.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "coins"+ "'", str13.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "coins"+ "'", str14.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "coins"+ "'", str15.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "coins"+ "'", str16.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "coins"+ "'", str17.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "coins"+ "'", str18.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "coins"+ "'", str19.equals("coins"));

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test346"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender6 = null;
    org.bukkit.command.Command command7 = null;
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n9.getBundleCache$spigot_1_8();
    char char12 = i18n9.getColorChar();
    char char13 = i18n9.getColorChar();
    char char14 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n15.getBundleCache$spigot_1_8();
    java.lang.String[] str_array17 = new java.lang.String[] {  };
    java.lang.String[] str_array19 = i18n15.getStrings(str_array17, "hi!");
    java.lang.String[] str_array21 = i18n9.getStrings(str_array19, "GMCy");
    char char22 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n23.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n23.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n27.getBundleCache$spigot_1_8();
    java.lang.String[] str_array29 = new java.lang.String[] {  };
    java.lang.String[] str_array31 = i18n27.getStrings(str_array29, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n27.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char34 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n33.getBundleCache$spigot_1_8();
    char char36 = i18n33.getColorChar();
    char char37 = i18n33.getColorChar();
    char char38 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache39 = i18n33.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char41 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n40.getBundleCache$spigot_1_8();
    char char43 = i18n40.getColorChar();
    char char44 = i18n40.getColorChar();
    char char45 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache46 = i18n40.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache47 = i18n40.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n48 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char49 = i18n48.getColorChar();
    char char50 = i18n48.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n48.getBundleCache$spigot_1_8();
    char char52 = i18n48.getColorChar();
    char char53 = i18n48.getColorChar();
    char char54 = i18n48.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n55 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char56 = i18n55.getColorChar();
    char char57 = i18n55.getColorChar();
    char char58 = i18n55.getColorChar();
    char char59 = i18n55.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n60 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache61 = i18n60.getBundleCache$spigot_1_8();
    java.lang.String[] str_array62 = new java.lang.String[] {  };
    java.lang.String[] str_array64 = i18n60.getStrings(str_array62, "hi!");
    java.lang.String[] str_array66 = i18n55.getStrings(str_array64, "GMCrx");
    java.lang.String[] str_array68 = i18n48.getStrings(str_array64, "friends");
    java.lang.String[] str_array70 = i18n40.getStrings(str_array68, "GMCt");
    java.lang.String[] str_array72 = i18n33.getStrings(str_array68, "friend");
    java.lang.String[] str_array74 = i18n27.getStrings(str_array68, "GMCt");
    java.lang.String[] str_array76 = i18n23.getStrings(str_array68, "groundmc.lobby.admin");
    java.lang.String[] str_array78 = i18n9.getStrings(str_array68, "GMCz");
    // The following exception was thrown during execution in test generation
    try {
    boolean b79 = commandFriend0.execute(commandSender6, command7, "GMCw", str_array68);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char56 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test347"); }

    org.joda.time.DateTime dateTime2 = null;
    // The following exception was thrown during execution in test generation
    try {
    gtlp.groundmc.lobby.Relationship relationship3 = new gtlp.groundmc.lobby.Relationship("groundmc.lobby.vanish", "groundmc.lobby.vanish", dateTime2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test348"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    java.lang.String str8 = commandLobby0.getName();
    java.lang.String str9 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender10 = null;
    org.bukkit.command.Command command11 = null;
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n13.getBundleCache$spigot_1_8();
    char char16 = i18n13.getColorChar();
    char char17 = i18n13.getColorChar();
    char char18 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char22 = i18n21.getColorChar();
    char char23 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n21.getBundleCache$spigot_1_8();
    char char25 = i18n21.getColorChar();
    char char26 = i18n21.getColorChar();
    char char27 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char29 = i18n28.getColorChar();
    char char30 = i18n28.getColorChar();
    char char31 = i18n28.getColorChar();
    char char32 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n33.getBundleCache$spigot_1_8();
    java.lang.String[] str_array35 = new java.lang.String[] {  };
    java.lang.String[] str_array37 = i18n33.getStrings(str_array35, "hi!");
    java.lang.String[] str_array39 = i18n28.getStrings(str_array37, "GMCrx");
    java.lang.String[] str_array41 = i18n21.getStrings(str_array37, "friends");
    java.lang.String[] str_array43 = i18n13.getStrings(str_array41, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n44 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char45 = i18n44.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache46 = i18n44.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache47 = i18n44.getBundleCache$spigot_1_8();
    char char48 = i18n44.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n49 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char50 = i18n49.getColorChar();
    char char51 = i18n49.getColorChar();
    char char52 = i18n49.getColorChar();
    char char53 = i18n49.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n54 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache55 = i18n54.getBundleCache$spigot_1_8();
    java.lang.String[] str_array56 = new java.lang.String[] {  };
    java.lang.String[] str_array58 = i18n54.getStrings(str_array56, "hi!");
    java.lang.String[] str_array60 = i18n49.getStrings(str_array58, "GMCrx");
    java.lang.String[] str_array62 = i18n44.getStrings(str_array58, "GMC");
    java.lang.String[] str_array64 = i18n13.getStrings(str_array62, "groundmc.lobby.vanish");
    gtlp.groundmc.lobby.util.I18n i18n65 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char66 = i18n65.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache67 = i18n65.getBundleCache$spigot_1_8();
    char char68 = i18n65.getColorChar();
    char char69 = i18n65.getColorChar();
    char char70 = i18n65.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n71 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache72 = i18n71.getBundleCache$spigot_1_8();
    java.lang.String[] str_array73 = new java.lang.String[] {  };
    java.lang.String[] str_array75 = i18n71.getStrings(str_array73, "hi!");
    java.lang.String[] str_array77 = i18n65.getStrings(str_array75, "GMCy");
    java.lang.String[] str_array79 = i18n13.getStrings(str_array75, "");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str80 = commandLobby0.getTabCompletion(commandSender10, command11, "GMCt", str_array79);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lobby"+ "'", str8.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "lobby"+ "'", str9.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char69 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char70 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test349"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender6 = null;
    org.bukkit.command.Command command7 = null;
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    char char11 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n9.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n9.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n14.getBundleCache$spigot_1_8();
    char char17 = i18n14.getColorChar();
    char char18 = i18n14.getColorChar();
    char char19 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char22 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n21.getBundleCache$spigot_1_8();
    char char24 = i18n21.getColorChar();
    char char25 = i18n21.getColorChar();
    char char26 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n21.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n21.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char30 = i18n29.getColorChar();
    char char31 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n29.getBundleCache$spigot_1_8();
    char char33 = i18n29.getColorChar();
    char char34 = i18n29.getColorChar();
    char char35 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char37 = i18n36.getColorChar();
    char char38 = i18n36.getColorChar();
    char char39 = i18n36.getColorChar();
    char char40 = i18n36.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n41 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n41.getBundleCache$spigot_1_8();
    java.lang.String[] str_array43 = new java.lang.String[] {  };
    java.lang.String[] str_array45 = i18n41.getStrings(str_array43, "hi!");
    java.lang.String[] str_array47 = i18n36.getStrings(str_array45, "GMCrx");
    java.lang.String[] str_array49 = i18n29.getStrings(str_array45, "friends");
    java.lang.String[] str_array51 = i18n21.getStrings(str_array49, "GMCt");
    java.lang.String[] str_array53 = i18n14.getStrings(str_array49, "friend");
    gtlp.groundmc.lobby.util.I18n i18n54 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char55 = i18n54.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache56 = i18n54.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache57 = i18n54.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache58 = i18n54.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache59 = i18n54.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n60 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char61 = i18n60.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache62 = i18n60.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache63 = i18n60.getBundleCache$spigot_1_8();
    char char64 = i18n60.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n65 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char66 = i18n65.getColorChar();
    char char67 = i18n65.getColorChar();
    char char68 = i18n65.getColorChar();
    char char69 = i18n65.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n70 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache71 = i18n70.getBundleCache$spigot_1_8();
    java.lang.String[] str_array72 = new java.lang.String[] {  };
    java.lang.String[] str_array74 = i18n70.getStrings(str_array72, "hi!");
    java.lang.String[] str_array76 = i18n65.getStrings(str_array74, "GMCrx");
    java.lang.String[] str_array78 = i18n60.getStrings(str_array74, "GMC");
    java.lang.String[] str_array80 = i18n54.getStrings(str_array74, "GMCw");
    java.lang.String[] str_array82 = i18n14.getStrings(str_array80, "groundmc.lobby.admin");
    java.lang.String[] str_array84 = i18n9.getStrings(str_array80, "GMCry");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str85 = commandFriends0.getTabCompletion(commandSender6, command7, "GMCx", str_array84);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char67 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char69 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test350"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    org.bukkit.command.CommandSender commandSender1 = null;
    org.bukkit.command.Command command2 = null;
    gtlp.groundmc.lobby.util.I18n i18n4 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char5 = i18n4.getColorChar();
    char char6 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n4.getBundleCache$spigot_1_8();
    char char9 = i18n4.getColorChar();
    char char10 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    char char13 = i18n11.getColorChar();
    char char14 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    char char18 = i18n16.getColorChar();
    char char19 = i18n16.getColorChar();
    char char20 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n21.getBundleCache$spigot_1_8();
    java.lang.String[] str_array23 = new java.lang.String[] {  };
    java.lang.String[] str_array25 = i18n21.getStrings(str_array23, "hi!");
    java.lang.String[] str_array27 = i18n16.getStrings(str_array25, "GMCrx");
    java.lang.String[] str_array29 = i18n11.getStrings(str_array27, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n30.getBundleCache$spigot_1_8();
    java.lang.String[] str_array32 = new java.lang.String[] {  };
    java.lang.String[] str_array34 = i18n30.getStrings(str_array32, "hi!");
    java.lang.String[] str_array36 = i18n11.getStrings(str_array34, "groundmc.lobby.hide_players");
    java.lang.String[] str_array38 = i18n4.getStrings(str_array36, "lang.lobby");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str39 = commandFriend0.getTabCompletion(commandSender1, command2, "", str_array38);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test351"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender3 = null;
    org.bukkit.command.Command command4 = null;
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char7 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n6.getBundleCache$spigot_1_8();
    char char9 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n6.getBundleCache$spigot_1_8();
    char char11 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    char char14 = i18n12.getColorChar();
    char char15 = i18n12.getColorChar();
    char char16 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n17.getBundleCache$spigot_1_8();
    java.lang.String[] str_array19 = new java.lang.String[] {  };
    java.lang.String[] str_array21 = i18n17.getStrings(str_array19, "hi!");
    java.lang.String[] str_array23 = i18n12.getStrings(str_array21, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    char char26 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n24.getBundleCache$spigot_1_8();
    char char28 = i18n24.getColorChar();
    char char29 = i18n24.getColorChar();
    char char30 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    char char33 = i18n31.getColorChar();
    char char34 = i18n31.getColorChar();
    char char35 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n36.getBundleCache$spigot_1_8();
    java.lang.String[] str_array38 = new java.lang.String[] {  };
    java.lang.String[] str_array40 = i18n36.getStrings(str_array38, "hi!");
    java.lang.String[] str_array42 = i18n31.getStrings(str_array40, "GMCrx");
    java.lang.String[] str_array44 = i18n24.getStrings(str_array40, "friends");
    java.lang.String[] str_array46 = i18n12.getStrings(str_array44, "");
    java.lang.String[] str_array48 = i18n6.getStrings(str_array44, "GMCw");
    char char49 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache50 = i18n6.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n51 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char52 = i18n51.getColorChar();
    char char53 = i18n51.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache54 = i18n51.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache55 = i18n51.getBundleCache$spigot_1_8();
    char char56 = i18n51.getColorChar();
    char char57 = i18n51.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n58 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char59 = i18n58.getColorChar();
    char char60 = i18n58.getColorChar();
    char char61 = i18n58.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache62 = i18n58.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n63 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char64 = i18n63.getColorChar();
    char char65 = i18n63.getColorChar();
    char char66 = i18n63.getColorChar();
    char char67 = i18n63.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n68 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache69 = i18n68.getBundleCache$spigot_1_8();
    java.lang.String[] str_array70 = new java.lang.String[] {  };
    java.lang.String[] str_array72 = i18n68.getStrings(str_array70, "hi!");
    java.lang.String[] str_array74 = i18n63.getStrings(str_array72, "GMCrx");
    java.lang.String[] str_array76 = i18n58.getStrings(str_array74, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n77 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache78 = i18n77.getBundleCache$spigot_1_8();
    java.lang.String[] str_array79 = new java.lang.String[] {  };
    java.lang.String[] str_array81 = i18n77.getStrings(str_array79, "hi!");
    java.lang.String[] str_array83 = i18n58.getStrings(str_array81, "groundmc.lobby.hide_players");
    java.lang.String[] str_array85 = i18n51.getStrings(str_array83, "lang.lobby");
    java.lang.String[] str_array87 = i18n6.getStrings(str_array83, "lobby");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str88 = commandVanish0.getTabCompletion(commandSender3, command4, "lang.lobby", str_array87);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char56 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char67 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test352"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    java.lang.String str8 = commandVanish0.getName();
    java.lang.String str9 = commandVanish0.getName();
    java.lang.String str10 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender11 = null;
    org.bukkit.command.Command command12 = null;
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n14.getBundleCache$spigot_1_8();
    char char17 = i18n14.getColorChar();
    char char18 = i18n14.getColorChar();
    char char19 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n14.getBundleCache$spigot_1_8();
    char char21 = i18n14.getColorChar();
    char char22 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n23.getBundleCache$spigot_1_8();
    char char26 = i18n23.getColorChar();
    char char27 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n23.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char30 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n29.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n29.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n29.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n29.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n35 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char36 = i18n35.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n35.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache38 = i18n35.getBundleCache$spigot_1_8();
    char char39 = i18n35.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char41 = i18n40.getColorChar();
    char char42 = i18n40.getColorChar();
    char char43 = i18n40.getColorChar();
    char char44 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache46 = i18n45.getBundleCache$spigot_1_8();
    java.lang.String[] str_array47 = new java.lang.String[] {  };
    java.lang.String[] str_array49 = i18n45.getStrings(str_array47, "hi!");
    java.lang.String[] str_array51 = i18n40.getStrings(str_array49, "GMCrx");
    java.lang.String[] str_array53 = i18n35.getStrings(str_array49, "GMC");
    java.lang.String[] str_array55 = i18n29.getStrings(str_array49, "GMCw");
    java.lang.String[] str_array57 = i18n23.getStrings(str_array55, "GMCy");
    gtlp.groundmc.lobby.util.I18n i18n58 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char59 = i18n58.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache60 = i18n58.getBundleCache$spigot_1_8();
    char char61 = i18n58.getColorChar();
    char char62 = i18n58.getColorChar();
    char char63 = i18n58.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache64 = i18n58.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache65 = i18n58.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n66 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char67 = i18n66.getColorChar();
    char char68 = i18n66.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache69 = i18n66.getBundleCache$spigot_1_8();
    char char70 = i18n66.getColorChar();
    char char71 = i18n66.getColorChar();
    char char72 = i18n66.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n73 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char74 = i18n73.getColorChar();
    char char75 = i18n73.getColorChar();
    char char76 = i18n73.getColorChar();
    char char77 = i18n73.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n78 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache79 = i18n78.getBundleCache$spigot_1_8();
    java.lang.String[] str_array80 = new java.lang.String[] {  };
    java.lang.String[] str_array82 = i18n78.getStrings(str_array80, "hi!");
    java.lang.String[] str_array84 = i18n73.getStrings(str_array82, "GMCrx");
    java.lang.String[] str_array86 = i18n66.getStrings(str_array82, "friends");
    java.lang.String[] str_array88 = i18n58.getStrings(str_array86, "GMCt");
    java.lang.String[] str_array90 = i18n23.getStrings(str_array88, "coins");
    java.lang.String[] str_array92 = i18n14.getStrings(str_array88, "GMCw");
    // The following exception was thrown during execution in test generation
    try {
    boolean b93 = commandVanish0.execute(commandSender11, command12, "GMCz", str_array88);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "vanish"+ "'", str9.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "vanish"+ "'", str10.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char62 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char67 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char70 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char71 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char72 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char74 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char75 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char76 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char77 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array92);

  }

  @Test
  public void test353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test353"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender3 = null;
    org.bukkit.command.Command command4 = null;
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n6.getBundleCache$spigot_1_8();
    java.lang.String[] str_array8 = new java.lang.String[] {  };
    java.lang.String[] str_array10 = i18n6.getStrings(str_array8, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n6.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n6.getBundleCache$spigot_1_8();
    char char13 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n18.getBundleCache$spigot_1_8();
    java.lang.String[] str_array20 = new java.lang.String[] {  };
    java.lang.String[] str_array22 = i18n18.getStrings(str_array20, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n24.getBundleCache$spigot_1_8();
    char char27 = i18n24.getColorChar();
    char char28 = i18n24.getColorChar();
    char char29 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n24.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n31.getBundleCache$spigot_1_8();
    char char34 = i18n31.getColorChar();
    char char35 = i18n31.getColorChar();
    char char36 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n31.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache38 = i18n31.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n39 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char40 = i18n39.getColorChar();
    char char41 = i18n39.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n39.getBundleCache$spigot_1_8();
    char char43 = i18n39.getColorChar();
    char char44 = i18n39.getColorChar();
    char char45 = i18n39.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n46 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char47 = i18n46.getColorChar();
    char char48 = i18n46.getColorChar();
    char char49 = i18n46.getColorChar();
    char char50 = i18n46.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n51 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache52 = i18n51.getBundleCache$spigot_1_8();
    java.lang.String[] str_array53 = new java.lang.String[] {  };
    java.lang.String[] str_array55 = i18n51.getStrings(str_array53, "hi!");
    java.lang.String[] str_array57 = i18n46.getStrings(str_array55, "GMCrx");
    java.lang.String[] str_array59 = i18n39.getStrings(str_array55, "friends");
    java.lang.String[] str_array61 = i18n31.getStrings(str_array59, "GMCt");
    java.lang.String[] str_array63 = i18n24.getStrings(str_array59, "friend");
    java.lang.String[] str_array65 = i18n18.getStrings(str_array59, "GMCt");
    java.lang.String[] str_array67 = i18n14.getStrings(str_array59, "groundmc.lobby.admin");
    java.lang.String[] str_array69 = i18n6.getStrings(str_array67, "lang.lobby");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str70 = commandCoins0.getTabCompletion(commandSender3, command4, "GMC", str_array69);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test354"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = i18n0.getBundleCache$spigot_1_8();
    java.lang.String[] str_array2 = new java.lang.String[] {  };
    java.lang.String[] str_array4 = i18n0.getStrings(str_array2, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n0.getBundleCache$spigot_1_8();
    char char7 = i18n0.getColorChar();
    char char8 = i18n0.getColorChar();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str11 = i18n0.getString("GMChide", "friend");
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test355"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender4 = null;
    org.bukkit.command.Command command5 = null;
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char8 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n7.getBundleCache$spigot_1_8();
    char char10 = i18n7.getColorChar();
    char char11 = i18n7.getColorChar();
    char char12 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    char char17 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n15.getBundleCache$spigot_1_8();
    char char19 = i18n15.getColorChar();
    char char20 = i18n15.getColorChar();
    char char21 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    char char24 = i18n22.getColorChar();
    char char25 = i18n22.getColorChar();
    char char26 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n27.getBundleCache$spigot_1_8();
    java.lang.String[] str_array29 = new java.lang.String[] {  };
    java.lang.String[] str_array31 = i18n27.getStrings(str_array29, "hi!");
    java.lang.String[] str_array33 = i18n22.getStrings(str_array31, "GMCrx");
    java.lang.String[] str_array35 = i18n15.getStrings(str_array31, "friends");
    java.lang.String[] str_array37 = i18n7.getStrings(str_array35, "GMCt");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str38 = commandFriends0.getTabCompletion(commandSender4, command5, "lobby", str_array35);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test356"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender3 = null;
    org.bukkit.command.Command command4 = null;
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char7 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n6.getBundleCache$spigot_1_8();
    char char9 = i18n6.getColorChar();
    char char10 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n6.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n18.getBundleCache$spigot_1_8();
    char char22 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    char char25 = i18n23.getColorChar();
    char char26 = i18n23.getColorChar();
    char char27 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n28.getBundleCache$spigot_1_8();
    java.lang.String[] str_array30 = new java.lang.String[] {  };
    java.lang.String[] str_array32 = i18n28.getStrings(str_array30, "hi!");
    java.lang.String[] str_array34 = i18n23.getStrings(str_array32, "GMCrx");
    java.lang.String[] str_array36 = i18n18.getStrings(str_array32, "GMC");
    java.lang.String[] str_array38 = i18n12.getStrings(str_array32, "GMCw");
    java.lang.String[] str_array40 = i18n6.getStrings(str_array38, "GMCy");
    gtlp.groundmc.lobby.util.I18n i18n41 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char42 = i18n41.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache43 = i18n41.getBundleCache$spigot_1_8();
    char char44 = i18n41.getColorChar();
    char char45 = i18n41.getColorChar();
    char char46 = i18n41.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache47 = i18n41.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache48 = i18n41.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n49 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char50 = i18n49.getColorChar();
    char char51 = i18n49.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache52 = i18n49.getBundleCache$spigot_1_8();
    char char53 = i18n49.getColorChar();
    char char54 = i18n49.getColorChar();
    char char55 = i18n49.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n56 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char57 = i18n56.getColorChar();
    char char58 = i18n56.getColorChar();
    char char59 = i18n56.getColorChar();
    char char60 = i18n56.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n61 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache62 = i18n61.getBundleCache$spigot_1_8();
    java.lang.String[] str_array63 = new java.lang.String[] {  };
    java.lang.String[] str_array65 = i18n61.getStrings(str_array63, "hi!");
    java.lang.String[] str_array67 = i18n56.getStrings(str_array65, "GMCrx");
    java.lang.String[] str_array69 = i18n49.getStrings(str_array65, "friends");
    java.lang.String[] str_array71 = i18n41.getStrings(str_array69, "GMCt");
    java.lang.String[] str_array73 = i18n6.getStrings(str_array71, "coins");
    // The following exception was thrown during execution in test generation
    try {
    boolean b74 = commandFriends0.execute(commandSender3, command4, "GMCy", str_array71);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test357"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    char char5 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n0.getBundleCache$spigot_1_8();
    char char7 = i18n0.getColorChar();
    char char8 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n9.getBundleCache$spigot_1_8();
    char char12 = i18n9.getColorChar();
    char char13 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n9.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char22 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n21.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n21.getBundleCache$spigot_1_8();
    char char25 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    char char28 = i18n26.getColorChar();
    char char29 = i18n26.getColorChar();
    char char30 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n31.getBundleCache$spigot_1_8();
    java.lang.String[] str_array33 = new java.lang.String[] {  };
    java.lang.String[] str_array35 = i18n31.getStrings(str_array33, "hi!");
    java.lang.String[] str_array37 = i18n26.getStrings(str_array35, "GMCrx");
    java.lang.String[] str_array39 = i18n21.getStrings(str_array35, "GMC");
    java.lang.String[] str_array41 = i18n15.getStrings(str_array35, "GMCw");
    java.lang.String[] str_array43 = i18n9.getStrings(str_array41, "GMCy");
    java.util.Locale locale44 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array45 = i18n0.getStrings(str_array41, locale44);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test358"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    org.bukkit.command.CommandSender commandSender1 = null;
    org.bukkit.command.Command command2 = null;
    gtlp.groundmc.lobby.util.I18n i18n4 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char5 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n4.getBundleCache$spigot_1_8();
    char char7 = i18n4.getColorChar();
    char char8 = i18n4.getColorChar();
    char char9 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n11.getBundleCache$spigot_1_8();
    char char14 = i18n11.getColorChar();
    char char15 = i18n11.getColorChar();
    char char16 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    char char21 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n19.getBundleCache$spigot_1_8();
    char char23 = i18n19.getColorChar();
    char char24 = i18n19.getColorChar();
    char char25 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    char char28 = i18n26.getColorChar();
    char char29 = i18n26.getColorChar();
    char char30 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n31.getBundleCache$spigot_1_8();
    java.lang.String[] str_array33 = new java.lang.String[] {  };
    java.lang.String[] str_array35 = i18n31.getStrings(str_array33, "hi!");
    java.lang.String[] str_array37 = i18n26.getStrings(str_array35, "GMCrx");
    java.lang.String[] str_array39 = i18n19.getStrings(str_array35, "friends");
    java.lang.String[] str_array41 = i18n11.getStrings(str_array39, "GMCt");
    java.lang.String[] str_array43 = i18n4.getStrings(str_array39, "friend");
    // The following exception was thrown during execution in test generation
    try {
    boolean b44 = commandFriends0.execute(commandSender1, command2, "GMChide", str_array39);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test359"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender8 = null;
    org.bukkit.command.Command command9 = null;
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    char char13 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n11.getBundleCache$spigot_1_8();
    char char15 = i18n11.getColorChar();
    char char16 = i18n11.getColorChar();
    char char17 = i18n11.getColorChar();
    char char18 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    char char21 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n19.getBundleCache$spigot_1_8();
    char char23 = i18n19.getColorChar();
    char char24 = i18n19.getColorChar();
    char char25 = i18n19.getColorChar();
    char char26 = i18n19.getColorChar();
    char char27 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char29 = i18n28.getColorChar();
    char char30 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n28.getBundleCache$spigot_1_8();
    char char32 = i18n28.getColorChar();
    char char33 = i18n28.getColorChar();
    char char34 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n35 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char36 = i18n35.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n35.getBundleCache$spigot_1_8();
    char char38 = i18n35.getColorChar();
    char char39 = i18n35.getColorChar();
    char char40 = i18n35.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache41 = i18n35.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n35.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n43 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char44 = i18n43.getColorChar();
    char char45 = i18n43.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache46 = i18n43.getBundleCache$spigot_1_8();
    char char47 = i18n43.getColorChar();
    char char48 = i18n43.getColorChar();
    char char49 = i18n43.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n50 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char51 = i18n50.getColorChar();
    char char52 = i18n50.getColorChar();
    char char53 = i18n50.getColorChar();
    char char54 = i18n50.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n55 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache56 = i18n55.getBundleCache$spigot_1_8();
    java.lang.String[] str_array57 = new java.lang.String[] {  };
    java.lang.String[] str_array59 = i18n55.getStrings(str_array57, "hi!");
    java.lang.String[] str_array61 = i18n50.getStrings(str_array59, "GMCrx");
    java.lang.String[] str_array63 = i18n43.getStrings(str_array59, "friends");
    java.lang.String[] str_array65 = i18n35.getStrings(str_array63, "GMCt");
    java.lang.String[] str_array67 = i18n28.getStrings(str_array63, "groundmc.lobby.admin");
    java.lang.String[] str_array69 = i18n19.getStrings(str_array67, "coins");
    java.lang.String[] str_array71 = i18n11.getStrings(str_array69, "groundmc.lobby.vanish");
    // The following exception was thrown during execution in test generation
    try {
    boolean b72 = commandVanish0.execute(commandSender8, command9, "groundmc.lobby.hide_players", str_array69);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test360"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    char char5 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char8 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n7.getBundleCache$spigot_1_8();
    char char10 = i18n7.getColorChar();
    char char11 = i18n7.getColorChar();
    char char12 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    char char17 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n15.getBundleCache$spigot_1_8();
    char char19 = i18n15.getColorChar();
    char char20 = i18n15.getColorChar();
    char char21 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    char char24 = i18n22.getColorChar();
    char char25 = i18n22.getColorChar();
    char char26 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n27.getBundleCache$spigot_1_8();
    java.lang.String[] str_array29 = new java.lang.String[] {  };
    java.lang.String[] str_array31 = i18n27.getStrings(str_array29, "hi!");
    java.lang.String[] str_array33 = i18n22.getStrings(str_array31, "GMCrx");
    java.lang.String[] str_array35 = i18n15.getStrings(str_array31, "friends");
    java.lang.String[] str_array37 = i18n7.getStrings(str_array35, "GMCt");
    java.lang.String[] str_array39 = i18n0.getStrings(str_array35, "friend");
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str42 = i18n0.getString("vanish", "");
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test361"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    java.lang.String str6 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender7 = null;
    org.bukkit.command.Command command8 = null;
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n10.getBundleCache$spigot_1_8();
    char char13 = i18n10.getColorChar();
    char char14 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n22.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n22.getBundleCache$spigot_1_8();
    char char26 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    char char29 = i18n27.getColorChar();
    char char30 = i18n27.getColorChar();
    char char31 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n32.getBundleCache$spigot_1_8();
    java.lang.String[] str_array34 = new java.lang.String[] {  };
    java.lang.String[] str_array36 = i18n32.getStrings(str_array34, "hi!");
    java.lang.String[] str_array38 = i18n27.getStrings(str_array36, "GMCrx");
    java.lang.String[] str_array40 = i18n22.getStrings(str_array36, "GMC");
    java.lang.String[] str_array42 = i18n16.getStrings(str_array36, "GMCw");
    java.lang.String[] str_array44 = i18n10.getStrings(str_array42, "GMCy");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str45 = commandFriends0.getTabCompletion(commandSender7, command8, "groundmc.lobby.vanish", str_array44);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test362"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    java.util.Locale locale7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = i18n0.getString("", locale7);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test363"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender7 = null;
    org.bukkit.command.Command command8 = null;
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    char char12 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n14.getBundleCache$spigot_1_8();
    char char18 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    char char21 = i18n19.getColorChar();
    char char22 = i18n19.getColorChar();
    char char23 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n24.getBundleCache$spigot_1_8();
    java.lang.String[] str_array26 = new java.lang.String[] {  };
    java.lang.String[] str_array28 = i18n24.getStrings(str_array26, "hi!");
    java.lang.String[] str_array30 = i18n19.getStrings(str_array28, "GMCrx");
    java.lang.String[] str_array32 = i18n14.getStrings(str_array28, "GMC");
    java.lang.String[] str_array34 = i18n10.getStrings(str_array28, "GMCx");
    // The following exception was thrown during execution in test generation
    try {
    boolean b35 = commandLobby0.execute(commandSender7, command8, "", str_array34);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);

  }

  @Test
  public void test364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test364"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    org.bukkit.command.CommandSender commandSender1 = null;
    org.bukkit.command.Command command2 = null;
    gtlp.groundmc.lobby.util.I18n i18n4 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char5 = i18n4.getColorChar();
    char char6 = i18n4.getColorChar();
    char char7 = i18n4.getColorChar();
    char char8 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n9.getBundleCache$spigot_1_8();
    java.lang.String[] str_array11 = new java.lang.String[] {  };
    java.lang.String[] str_array13 = i18n9.getStrings(str_array11, "hi!");
    java.lang.String[] str_array15 = i18n4.getStrings(str_array13, "GMCrx");
    char char16 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    char char19 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char22 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n21.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n21.getBundleCache$spigot_1_8();
    char char25 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    char char28 = i18n26.getColorChar();
    char char29 = i18n26.getColorChar();
    char char30 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n31.getBundleCache$spigot_1_8();
    java.lang.String[] str_array33 = new java.lang.String[] {  };
    java.lang.String[] str_array35 = i18n31.getStrings(str_array33, "hi!");
    java.lang.String[] str_array37 = i18n26.getStrings(str_array35, "GMCrx");
    java.lang.String[] str_array39 = i18n21.getStrings(str_array35, "GMC");
    java.lang.String[] str_array41 = i18n17.getStrings(str_array35, "GMCx");
    java.lang.String[] str_array43 = i18n4.getStrings(str_array41, "hi!");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str44 = commandLobby0.getTabCompletion(commandSender1, command2, "groundmc.lobby.vanish", str_array43);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);

  }

  @Test
  public void test365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test365"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender2 = null;
    org.bukkit.command.Command command3 = null;
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    char char7 = i18n5.getColorChar();
    char char8 = i18n5.getColorChar();
    char char9 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n10.getBundleCache$spigot_1_8();
    java.lang.String[] str_array12 = new java.lang.String[] {  };
    java.lang.String[] str_array14 = i18n10.getStrings(str_array12, "hi!");
    java.lang.String[] str_array16 = i18n5.getStrings(str_array14, "GMCrx");
    char char17 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n22.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n22.getBundleCache$spigot_1_8();
    char char26 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    char char29 = i18n27.getColorChar();
    char char30 = i18n27.getColorChar();
    char char31 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n32.getBundleCache$spigot_1_8();
    java.lang.String[] str_array34 = new java.lang.String[] {  };
    java.lang.String[] str_array36 = i18n32.getStrings(str_array34, "hi!");
    java.lang.String[] str_array38 = i18n27.getStrings(str_array36, "GMCrx");
    java.lang.String[] str_array40 = i18n22.getStrings(str_array36, "GMC");
    java.lang.String[] str_array42 = i18n18.getStrings(str_array36, "GMCx");
    java.lang.String[] str_array44 = i18n5.getStrings(str_array42, "hi!");
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char46 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache47 = i18n45.getBundleCache$spigot_1_8();
    char char48 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n49 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char50 = i18n49.getColorChar();
    char char51 = i18n49.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache52 = i18n49.getBundleCache$spigot_1_8();
    char char53 = i18n49.getColorChar();
    char char54 = i18n49.getColorChar();
    char char55 = i18n49.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n56 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char57 = i18n56.getColorChar();
    char char58 = i18n56.getColorChar();
    char char59 = i18n56.getColorChar();
    char char60 = i18n56.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n61 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache62 = i18n61.getBundleCache$spigot_1_8();
    java.lang.String[] str_array63 = new java.lang.String[] {  };
    java.lang.String[] str_array65 = i18n61.getStrings(str_array63, "hi!");
    java.lang.String[] str_array67 = i18n56.getStrings(str_array65, "GMCrx");
    java.lang.String[] str_array69 = i18n49.getStrings(str_array65, "friends");
    java.lang.String[] str_array71 = i18n45.getStrings(str_array69, "GMCsilent");
    java.lang.String[] str_array73 = i18n5.getStrings(str_array69, "");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str74 = commandFriends0.getTabCompletion(commandSender2, command3, "GMCy", str_array73);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);

  }

  @Test
  public void test366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test366"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    java.lang.String str9 = commandCoins0.getName();
    java.lang.String str10 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender11 = null;
    org.bukkit.command.Command command12 = null;
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    char char16 = i18n14.getColorChar();
    char char17 = i18n14.getColorChar();
    char char18 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n19.getBundleCache$spigot_1_8();
    java.lang.String[] str_array21 = new java.lang.String[] {  };
    java.lang.String[] str_array23 = i18n19.getStrings(str_array21, "hi!");
    java.lang.String[] str_array25 = i18n14.getStrings(str_array23, "GMCrx");
    char char26 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    char char29 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n27.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n31.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n31.getBundleCache$spigot_1_8();
    char char35 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char37 = i18n36.getColorChar();
    char char38 = i18n36.getColorChar();
    char char39 = i18n36.getColorChar();
    char char40 = i18n36.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n41 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n41.getBundleCache$spigot_1_8();
    java.lang.String[] str_array43 = new java.lang.String[] {  };
    java.lang.String[] str_array45 = i18n41.getStrings(str_array43, "hi!");
    java.lang.String[] str_array47 = i18n36.getStrings(str_array45, "GMCrx");
    java.lang.String[] str_array49 = i18n31.getStrings(str_array45, "GMC");
    java.lang.String[] str_array51 = i18n27.getStrings(str_array45, "GMCx");
    java.lang.String[] str_array53 = i18n14.getStrings(str_array51, "hi!");
    gtlp.groundmc.lobby.util.I18n i18n54 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char55 = i18n54.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache56 = i18n54.getBundleCache$spigot_1_8();
    char char57 = i18n54.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n58 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char59 = i18n58.getColorChar();
    char char60 = i18n58.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache61 = i18n58.getBundleCache$spigot_1_8();
    char char62 = i18n58.getColorChar();
    char char63 = i18n58.getColorChar();
    char char64 = i18n58.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n65 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char66 = i18n65.getColorChar();
    char char67 = i18n65.getColorChar();
    char char68 = i18n65.getColorChar();
    char char69 = i18n65.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n70 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache71 = i18n70.getBundleCache$spigot_1_8();
    java.lang.String[] str_array72 = new java.lang.String[] {  };
    java.lang.String[] str_array74 = i18n70.getStrings(str_array72, "hi!");
    java.lang.String[] str_array76 = i18n65.getStrings(str_array74, "GMCrx");
    java.lang.String[] str_array78 = i18n58.getStrings(str_array74, "friends");
    java.lang.String[] str_array80 = i18n54.getStrings(str_array78, "GMCsilent");
    java.lang.String[] str_array82 = i18n14.getStrings(str_array78, "");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str83 = commandCoins0.getTabCompletion(commandSender11, command12, "friends", str_array82);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "coins"+ "'", str10.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char62 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char67 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char69 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);

  }

  @Test
  public void test367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test367"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender6 = null;
    org.bukkit.command.Command command7 = null;
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    char char11 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n9.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n13.getBundleCache$spigot_1_8();
    char char17 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    char char21 = i18n18.getColorChar();
    char char22 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n23.getBundleCache$spigot_1_8();
    java.lang.String[] str_array25 = new java.lang.String[] {  };
    java.lang.String[] str_array27 = i18n23.getStrings(str_array25, "hi!");
    java.lang.String[] str_array29 = i18n18.getStrings(str_array27, "GMCrx");
    java.lang.String[] str_array31 = i18n13.getStrings(str_array27, "GMC");
    java.lang.String[] str_array33 = i18n9.getStrings(str_array27, "GMCx");
    // The following exception was thrown during execution in test generation
    try {
    boolean b34 = commandFriend0.execute(commandSender6, command7, "GMChide", str_array27);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);

  }

  @Test
  public void test368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test368"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    java.lang.String str8 = commandLobby0.getName();
    java.lang.String str9 = commandLobby0.getName();
    java.lang.String str10 = commandLobby0.getName();
    java.lang.String str11 = commandLobby0.getName();
    java.lang.String str12 = commandLobby0.getName();
    java.lang.String str13 = commandLobby0.getName();
    java.lang.String str14 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender15 = null;
    org.bukkit.command.Command command16 = null;
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n18.getBundleCache$spigot_1_8();
    char char21 = i18n18.getColorChar();
    char char22 = i18n18.getColorChar();
    char char23 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n25.getBundleCache$spigot_1_8();
    char char28 = i18n25.getColorChar();
    char char29 = i18n25.getColorChar();
    char char30 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n25.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n25.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char34 = i18n33.getColorChar();
    char char35 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n33.getBundleCache$spigot_1_8();
    char char37 = i18n33.getColorChar();
    char char38 = i18n33.getColorChar();
    char char39 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char41 = i18n40.getColorChar();
    char char42 = i18n40.getColorChar();
    char char43 = i18n40.getColorChar();
    char char44 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache46 = i18n45.getBundleCache$spigot_1_8();
    java.lang.String[] str_array47 = new java.lang.String[] {  };
    java.lang.String[] str_array49 = i18n45.getStrings(str_array47, "hi!");
    java.lang.String[] str_array51 = i18n40.getStrings(str_array49, "GMCrx");
    java.lang.String[] str_array53 = i18n33.getStrings(str_array49, "friends");
    java.lang.String[] str_array55 = i18n25.getStrings(str_array53, "GMCt");
    java.lang.String[] str_array57 = i18n18.getStrings(str_array53, "friend");
    gtlp.groundmc.lobby.util.I18n i18n58 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char59 = i18n58.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache60 = i18n58.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache61 = i18n58.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache62 = i18n58.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache63 = i18n58.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n64 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char65 = i18n64.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache66 = i18n64.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache67 = i18n64.getBundleCache$spigot_1_8();
    char char68 = i18n64.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n69 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char70 = i18n69.getColorChar();
    char char71 = i18n69.getColorChar();
    char char72 = i18n69.getColorChar();
    char char73 = i18n69.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n74 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache75 = i18n74.getBundleCache$spigot_1_8();
    java.lang.String[] str_array76 = new java.lang.String[] {  };
    java.lang.String[] str_array78 = i18n74.getStrings(str_array76, "hi!");
    java.lang.String[] str_array80 = i18n69.getStrings(str_array78, "GMCrx");
    java.lang.String[] str_array82 = i18n64.getStrings(str_array78, "GMC");
    java.lang.String[] str_array84 = i18n58.getStrings(str_array78, "GMCw");
    java.lang.String[] str_array86 = i18n18.getStrings(str_array84, "groundmc.lobby.admin");
    // The following exception was thrown during execution in test generation
    try {
    boolean b87 = commandLobby0.execute(commandSender15, command16, "GMCry", str_array84);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lobby"+ "'", str8.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "lobby"+ "'", str9.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "lobby"+ "'", str10.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "lobby"+ "'", str11.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "lobby"+ "'", str12.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "lobby"+ "'", str13.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "lobby"+ "'", str14.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char70 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char71 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char72 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char73 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);

  }

  @Test
  public void test369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test369"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender3 = null;
    org.bukkit.command.Command command4 = null;
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char7 = i18n6.getColorChar();
    char char8 = i18n6.getColorChar();
    char char9 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n6.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    char char13 = i18n11.getColorChar();
    char char14 = i18n11.getColorChar();
    char char15 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n16.getBundleCache$spigot_1_8();
    java.lang.String[] str_array18 = new java.lang.String[] {  };
    java.lang.String[] str_array20 = i18n16.getStrings(str_array18, "hi!");
    java.lang.String[] str_array22 = i18n11.getStrings(str_array20, "GMCrx");
    java.lang.String[] str_array24 = i18n6.getStrings(str_array22, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n25.getBundleCache$spigot_1_8();
    java.lang.String[] str_array27 = new java.lang.String[] {  };
    java.lang.String[] str_array29 = i18n25.getStrings(str_array27, "hi!");
    java.lang.String[] str_array31 = i18n6.getStrings(str_array29, "groundmc.lobby.hide_players");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str32 = commandCoins0.getTabCompletion(commandSender3, command4, "GMC", str_array29);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);

  }

  @Test
  public void test370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test370"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    java.lang.String str6 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender7 = null;
    org.bukkit.command.Command command8 = null;
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n10.getBundleCache$spigot_1_8();
    char char14 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    char char17 = i18n15.getColorChar();
    char char18 = i18n15.getColorChar();
    char char19 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n20.getBundleCache$spigot_1_8();
    java.lang.String[] str_array22 = new java.lang.String[] {  };
    java.lang.String[] str_array24 = i18n20.getStrings(str_array22, "hi!");
    java.lang.String[] str_array26 = i18n15.getStrings(str_array24, "GMCrx");
    java.lang.String[] str_array28 = i18n10.getStrings(str_array24, "GMC");
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char30 = i18n29.getColorChar();
    char char31 = i18n29.getColorChar();
    char char32 = i18n29.getColorChar();
    char char33 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n34 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n34.getBundleCache$spigot_1_8();
    java.lang.String[] str_array36 = new java.lang.String[] {  };
    java.lang.String[] str_array38 = i18n34.getStrings(str_array36, "hi!");
    java.lang.String[] str_array40 = i18n29.getStrings(str_array38, "GMCrx");
    java.lang.String[] str_array42 = i18n10.getStrings(str_array38, "GMCz");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str43 = commandFriends0.getTabCompletion(commandSender7, command8, "groundmc.lobby.vanish", str_array42);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);

  }

  @Test
  public void test371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test371"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    java.lang.String str8 = commandVanish0.getName();
    java.lang.String str9 = commandVanish0.getName();
    java.lang.String str10 = commandVanish0.getName();
    java.lang.String str11 = commandVanish0.getName();
    java.lang.String str12 = commandVanish0.getName();
    java.lang.String str13 = commandVanish0.getName();
    java.lang.String str14 = commandVanish0.getName();
    java.lang.String str15 = commandVanish0.getName();
    java.util.Locale locale16 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array17 = commandVanish0.getCommandHelp(locale16);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "vanish"+ "'", str9.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "vanish"+ "'", str10.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "vanish"+ "'", str11.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "vanish"+ "'", str12.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "vanish"+ "'", str13.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "vanish"+ "'", str14.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "vanish"+ "'", str15.equals("vanish"));

  }

  @Test
  public void test372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test372"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender2 = null;
    org.bukkit.command.Command command3 = null;
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n5.getBundleCache$spigot_1_8();
    java.lang.String[] str_array7 = new java.lang.String[] {  };
    java.lang.String[] str_array9 = i18n5.getStrings(str_array7, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n5.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n5.getBundleCache$spigot_1_8();
    char char12 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n17.getBundleCache$spigot_1_8();
    java.lang.String[] str_array19 = new java.lang.String[] {  };
    java.lang.String[] str_array21 = i18n17.getStrings(str_array19, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n23.getBundleCache$spigot_1_8();
    char char26 = i18n23.getColorChar();
    char char27 = i18n23.getColorChar();
    char char28 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n23.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char31 = i18n30.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n30.getBundleCache$spigot_1_8();
    char char33 = i18n30.getColorChar();
    char char34 = i18n30.getColorChar();
    char char35 = i18n30.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n30.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n30.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n38 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char39 = i18n38.getColorChar();
    char char40 = i18n38.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache41 = i18n38.getBundleCache$spigot_1_8();
    char char42 = i18n38.getColorChar();
    char char43 = i18n38.getColorChar();
    char char44 = i18n38.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char46 = i18n45.getColorChar();
    char char47 = i18n45.getColorChar();
    char char48 = i18n45.getColorChar();
    char char49 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n50 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n50.getBundleCache$spigot_1_8();
    java.lang.String[] str_array52 = new java.lang.String[] {  };
    java.lang.String[] str_array54 = i18n50.getStrings(str_array52, "hi!");
    java.lang.String[] str_array56 = i18n45.getStrings(str_array54, "GMCrx");
    java.lang.String[] str_array58 = i18n38.getStrings(str_array54, "friends");
    java.lang.String[] str_array60 = i18n30.getStrings(str_array58, "GMCt");
    java.lang.String[] str_array62 = i18n23.getStrings(str_array58, "friend");
    java.lang.String[] str_array64 = i18n17.getStrings(str_array58, "GMCt");
    java.lang.String[] str_array66 = i18n13.getStrings(str_array58, "groundmc.lobby.admin");
    java.lang.String[] str_array68 = i18n5.getStrings(str_array66, "lang.lobby");
    // The following exception was thrown during execution in test generation
    try {
    boolean b69 = commandFriends0.execute(commandSender2, command3, "GMCx", str_array66);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);

  }

  @Test
  public void test373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test373"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    java.lang.String str8 = commandFriend0.getName();
    java.lang.String str9 = commandFriend0.getName();
    java.lang.String str10 = commandFriend0.getName();
    java.lang.String str11 = commandFriend0.getName();
    java.lang.String str12 = commandFriend0.getName();
    java.lang.String str13 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender14 = null;
    org.bukkit.command.Command command15 = null;
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n23.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n23.getBundleCache$spigot_1_8();
    char char27 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char29 = i18n28.getColorChar();
    char char30 = i18n28.getColorChar();
    char char31 = i18n28.getColorChar();
    char char32 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n33.getBundleCache$spigot_1_8();
    java.lang.String[] str_array35 = new java.lang.String[] {  };
    java.lang.String[] str_array37 = i18n33.getStrings(str_array35, "hi!");
    java.lang.String[] str_array39 = i18n28.getStrings(str_array37, "GMCrx");
    java.lang.String[] str_array41 = i18n23.getStrings(str_array37, "GMC");
    java.lang.String[] str_array43 = i18n17.getStrings(str_array37, "GMCw");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache44 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache45 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n46 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char47 = i18n46.getColorChar();
    char char48 = i18n46.getColorChar();
    char char49 = i18n46.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache50 = i18n46.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n51 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char52 = i18n51.getColorChar();
    char char53 = i18n51.getColorChar();
    char char54 = i18n51.getColorChar();
    char char55 = i18n51.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n56 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache57 = i18n56.getBundleCache$spigot_1_8();
    java.lang.String[] str_array58 = new java.lang.String[] {  };
    java.lang.String[] str_array60 = i18n56.getStrings(str_array58, "hi!");
    java.lang.String[] str_array62 = i18n51.getStrings(str_array60, "GMCrx");
    java.lang.String[] str_array64 = i18n46.getStrings(str_array62, "GMCt");
    java.lang.String[] str_array66 = i18n17.getStrings(str_array64, "hi!");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str67 = commandFriend0.getTabCompletion(commandSender14, command15, "GMChide", str_array66);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friend"+ "'", str8.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "friend"+ "'", str9.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "friend"+ "'", str10.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "friend"+ "'", str11.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "friend"+ "'", str12.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "friend"+ "'", str13.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);

  }

  @Test
  public void test374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test374"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender2 = null;
    org.bukkit.command.Command command3 = null;
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    char char7 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n5.getBundleCache$spigot_1_8();
    char char9 = i18n5.getColorChar();
    char char10 = i18n5.getColorChar();
    char char11 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n12.getBundleCache$spigot_1_8();
    char char15 = i18n12.getColorChar();
    char char16 = i18n12.getColorChar();
    char char17 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    char char22 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n20.getBundleCache$spigot_1_8();
    char char24 = i18n20.getColorChar();
    char char25 = i18n20.getColorChar();
    char char26 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    char char29 = i18n27.getColorChar();
    char char30 = i18n27.getColorChar();
    char char31 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n32.getBundleCache$spigot_1_8();
    java.lang.String[] str_array34 = new java.lang.String[] {  };
    java.lang.String[] str_array36 = i18n32.getStrings(str_array34, "hi!");
    java.lang.String[] str_array38 = i18n27.getStrings(str_array36, "GMCrx");
    java.lang.String[] str_array40 = i18n20.getStrings(str_array36, "friends");
    java.lang.String[] str_array42 = i18n12.getStrings(str_array40, "GMCt");
    java.lang.String[] str_array44 = i18n5.getStrings(str_array40, "groundmc.lobby.admin");
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char46 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache47 = i18n45.getBundleCache$spigot_1_8();
    char char48 = i18n45.getColorChar();
    char char49 = i18n45.getColorChar();
    char char50 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n45.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache52 = i18n45.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n53 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char54 = i18n53.getColorChar();
    char char55 = i18n53.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache56 = i18n53.getBundleCache$spigot_1_8();
    char char57 = i18n53.getColorChar();
    char char58 = i18n53.getColorChar();
    char char59 = i18n53.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n60 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char61 = i18n60.getColorChar();
    char char62 = i18n60.getColorChar();
    char char63 = i18n60.getColorChar();
    char char64 = i18n60.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n65 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache66 = i18n65.getBundleCache$spigot_1_8();
    java.lang.String[] str_array67 = new java.lang.String[] {  };
    java.lang.String[] str_array69 = i18n65.getStrings(str_array67, "hi!");
    java.lang.String[] str_array71 = i18n60.getStrings(str_array69, "GMCrx");
    java.lang.String[] str_array73 = i18n53.getStrings(str_array69, "friends");
    java.lang.String[] str_array75 = i18n45.getStrings(str_array73, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n76 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char77 = i18n76.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache78 = i18n76.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache79 = i18n76.getBundleCache$spigot_1_8();
    char char80 = i18n76.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n81 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char82 = i18n81.getColorChar();
    char char83 = i18n81.getColorChar();
    char char84 = i18n81.getColorChar();
    char char85 = i18n81.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n86 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache87 = i18n86.getBundleCache$spigot_1_8();
    java.lang.String[] str_array88 = new java.lang.String[] {  };
    java.lang.String[] str_array90 = i18n86.getStrings(str_array88, "hi!");
    java.lang.String[] str_array92 = i18n81.getStrings(str_array90, "GMCrx");
    java.lang.String[] str_array94 = i18n76.getStrings(str_array90, "GMC");
    java.lang.String[] str_array96 = i18n45.getStrings(str_array94, "groundmc.lobby.vanish");
    java.lang.String[] str_array98 = i18n5.getStrings(str_array94, "GMChide");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str99 = commandVanish0.getTabCompletion(commandSender2, command3, "hi!", str_array98);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char62 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char77 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char80 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char82 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char83 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char84 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char85 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array98);

  }

  @Test
  public void test375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test375"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    java.lang.String str8 = commandFriend0.getName();
    java.lang.String str9 = commandFriend0.getName();
    java.lang.String str10 = commandFriend0.getName();
    java.lang.String str11 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender12 = null;
    org.bukkit.command.Command command13 = null;
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n15.getBundleCache$spigot_1_8();
    java.lang.String[] str_array17 = new java.lang.String[] {  };
    java.lang.String[] str_array19 = i18n15.getStrings(str_array17, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char22 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n21.getBundleCache$spigot_1_8();
    char char24 = i18n21.getColorChar();
    char char25 = i18n21.getColorChar();
    char char26 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n21.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char29 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n28.getBundleCache$spigot_1_8();
    char char31 = i18n28.getColorChar();
    char char32 = i18n28.getColorChar();
    char char33 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n28.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n28.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char37 = i18n36.getColorChar();
    char char38 = i18n36.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache39 = i18n36.getBundleCache$spigot_1_8();
    char char40 = i18n36.getColorChar();
    char char41 = i18n36.getColorChar();
    char char42 = i18n36.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n43 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char44 = i18n43.getColorChar();
    char char45 = i18n43.getColorChar();
    char char46 = i18n43.getColorChar();
    char char47 = i18n43.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n48 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache49 = i18n48.getBundleCache$spigot_1_8();
    java.lang.String[] str_array50 = new java.lang.String[] {  };
    java.lang.String[] str_array52 = i18n48.getStrings(str_array50, "hi!");
    java.lang.String[] str_array54 = i18n43.getStrings(str_array52, "GMCrx");
    java.lang.String[] str_array56 = i18n36.getStrings(str_array52, "friends");
    java.lang.String[] str_array58 = i18n28.getStrings(str_array56, "GMCt");
    java.lang.String[] str_array60 = i18n21.getStrings(str_array56, "friend");
    java.lang.String[] str_array62 = i18n15.getStrings(str_array56, "GMCt");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str63 = commandFriend0.getTabCompletion(commandSender12, command13, "vanish", str_array62);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friend"+ "'", str8.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "friend"+ "'", str9.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "friend"+ "'", str10.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "friend"+ "'", str11.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);

  }

  @Test
  public void test376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test376"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender6 = null;
    org.bukkit.command.Command command7 = null;
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n9.getBundleCache$spigot_1_8();
    char char12 = i18n9.getColorChar();
    char char13 = i18n9.getColorChar();
    char char14 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n9.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n16.getBundleCache$spigot_1_8();
    char char19 = i18n16.getColorChar();
    char char20 = i18n16.getColorChar();
    char char21 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    char char26 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n24.getBundleCache$spigot_1_8();
    char char28 = i18n24.getColorChar();
    char char29 = i18n24.getColorChar();
    char char30 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    char char33 = i18n31.getColorChar();
    char char34 = i18n31.getColorChar();
    char char35 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n36.getBundleCache$spigot_1_8();
    java.lang.String[] str_array38 = new java.lang.String[] {  };
    java.lang.String[] str_array40 = i18n36.getStrings(str_array38, "hi!");
    java.lang.String[] str_array42 = i18n31.getStrings(str_array40, "GMCrx");
    java.lang.String[] str_array44 = i18n24.getStrings(str_array40, "friends");
    java.lang.String[] str_array46 = i18n16.getStrings(str_array44, "GMCt");
    java.lang.String[] str_array48 = i18n9.getStrings(str_array44, "friend");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str49 = commandFriend0.getTabCompletion(commandSender6, command7, "", str_array44);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);

  }

  @Test
  public void test377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test377"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender7 = null;
    org.bukkit.command.Command command8 = null;
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n16.getBundleCache$spigot_1_8();
    char char20 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char22 = i18n21.getColorChar();
    char char23 = i18n21.getColorChar();
    char char24 = i18n21.getColorChar();
    char char25 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n26.getBundleCache$spigot_1_8();
    java.lang.String[] str_array28 = new java.lang.String[] {  };
    java.lang.String[] str_array30 = i18n26.getStrings(str_array28, "hi!");
    java.lang.String[] str_array32 = i18n21.getStrings(str_array30, "GMCrx");
    java.lang.String[] str_array34 = i18n16.getStrings(str_array30, "GMC");
    java.lang.String[] str_array36 = i18n10.getStrings(str_array30, "GMCw");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache38 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n39 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char40 = i18n39.getColorChar();
    char char41 = i18n39.getColorChar();
    char char42 = i18n39.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache43 = i18n39.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n44 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char45 = i18n44.getColorChar();
    char char46 = i18n44.getColorChar();
    char char47 = i18n44.getColorChar();
    char char48 = i18n44.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n49 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache50 = i18n49.getBundleCache$spigot_1_8();
    java.lang.String[] str_array51 = new java.lang.String[] {  };
    java.lang.String[] str_array53 = i18n49.getStrings(str_array51, "hi!");
    java.lang.String[] str_array55 = i18n44.getStrings(str_array53, "GMCrx");
    java.lang.String[] str_array57 = i18n39.getStrings(str_array55, "GMCt");
    java.lang.String[] str_array59 = i18n10.getStrings(str_array57, "hi!");
    // The following exception was thrown during execution in test generation
    try {
    boolean b60 = commandLobby0.execute(commandSender7, command8, "", str_array59);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);

  }

  @Test
  public void test378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test378"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    char char4 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    java.lang.String str6 = resourceBundleCache5.getName();
    java.util.Locale locale8 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str9 = resourceBundleCache5.get("vanish", locale8);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lang.lobby"+ "'", str6.equals("lang.lobby"));

  }

  @Test
  public void test379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test379"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender5 = null;
    org.bukkit.command.Command command6 = null;
    gtlp.groundmc.lobby.util.I18n i18n8 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char9 = i18n8.getColorChar();
    char char10 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n8.getBundleCache$spigot_1_8();
    char char12 = i18n8.getColorChar();
    char char13 = i18n8.getColorChar();
    char char14 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n15.getBundleCache$spigot_1_8();
    char char18 = i18n15.getColorChar();
    char char19 = i18n15.getColorChar();
    char char20 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    char char25 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n23.getBundleCache$spigot_1_8();
    char char27 = i18n23.getColorChar();
    char char28 = i18n23.getColorChar();
    char char29 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char31 = i18n30.getColorChar();
    char char32 = i18n30.getColorChar();
    char char33 = i18n30.getColorChar();
    char char34 = i18n30.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n35 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n35.getBundleCache$spigot_1_8();
    java.lang.String[] str_array37 = new java.lang.String[] {  };
    java.lang.String[] str_array39 = i18n35.getStrings(str_array37, "hi!");
    java.lang.String[] str_array41 = i18n30.getStrings(str_array39, "GMCrx");
    java.lang.String[] str_array43 = i18n23.getStrings(str_array39, "friends");
    java.lang.String[] str_array45 = i18n15.getStrings(str_array43, "GMCt");
    java.lang.String[] str_array47 = i18n8.getStrings(str_array43, "groundmc.lobby.admin");
    // The following exception was thrown during execution in test generation
    try {
    boolean b48 = commandVanish0.execute(commandSender5, command6, "", str_array43);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);

  }

  @Test
  public void test380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test380"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    java.lang.String str8 = commandFriend0.getName();
    java.lang.String str9 = commandFriend0.getName();
    java.lang.String str10 = commandFriend0.getName();
    java.lang.String str11 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender12 = null;
    org.bukkit.command.Command command13 = null;
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n15.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    char char19 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n17.getBundleCache$spigot_1_8();
    char char21 = i18n17.getColorChar();
    char char22 = i18n17.getColorChar();
    char char23 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    char char26 = i18n24.getColorChar();
    char char27 = i18n24.getColorChar();
    char char28 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n29.getBundleCache$spigot_1_8();
    java.lang.String[] str_array31 = new java.lang.String[] {  };
    java.lang.String[] str_array33 = i18n29.getStrings(str_array31, "hi!");
    java.lang.String[] str_array35 = i18n24.getStrings(str_array33, "GMCrx");
    java.lang.String[] str_array37 = i18n17.getStrings(str_array33, "friends");
    java.lang.String[] str_array39 = i18n15.getStrings(str_array37, "vanish");
    // The following exception was thrown during execution in test generation
    try {
    boolean b40 = commandFriend0.execute(commandSender12, command13, "friend", str_array39);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friend"+ "'", str8.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "friend"+ "'", str9.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "friend"+ "'", str10.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "friend"+ "'", str11.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);

  }

  @Test
  public void test381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test381"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender7 = null;
    org.bukkit.command.Command command8 = null;
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n10.getBundleCache$spigot_1_8();
    char char13 = i18n10.getColorChar();
    char char14 = i18n10.getColorChar();
    char char15 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n17.getBundleCache$spigot_1_8();
    char char20 = i18n17.getColorChar();
    char char21 = i18n17.getColorChar();
    char char22 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    char char27 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n25.getBundleCache$spigot_1_8();
    char char29 = i18n25.getColorChar();
    char char30 = i18n25.getColorChar();
    char char31 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char33 = i18n32.getColorChar();
    char char34 = i18n32.getColorChar();
    char char35 = i18n32.getColorChar();
    char char36 = i18n32.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n37 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache38 = i18n37.getBundleCache$spigot_1_8();
    java.lang.String[] str_array39 = new java.lang.String[] {  };
    java.lang.String[] str_array41 = i18n37.getStrings(str_array39, "hi!");
    java.lang.String[] str_array43 = i18n32.getStrings(str_array41, "GMCrx");
    java.lang.String[] str_array45 = i18n25.getStrings(str_array41, "friends");
    java.lang.String[] str_array47 = i18n17.getStrings(str_array45, "GMCt");
    java.lang.String[] str_array49 = i18n10.getStrings(str_array45, "friend");
    gtlp.groundmc.lobby.util.I18n i18n50 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n50.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n52 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char53 = i18n52.getColorChar();
    char char54 = i18n52.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache55 = i18n52.getBundleCache$spigot_1_8();
    char char56 = i18n52.getColorChar();
    char char57 = i18n52.getColorChar();
    char char58 = i18n52.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n59 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char60 = i18n59.getColorChar();
    char char61 = i18n59.getColorChar();
    char char62 = i18n59.getColorChar();
    char char63 = i18n59.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n64 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache65 = i18n64.getBundleCache$spigot_1_8();
    java.lang.String[] str_array66 = new java.lang.String[] {  };
    java.lang.String[] str_array68 = i18n64.getStrings(str_array66, "hi!");
    java.lang.String[] str_array70 = i18n59.getStrings(str_array68, "GMCrx");
    java.lang.String[] str_array72 = i18n52.getStrings(str_array68, "friends");
    java.lang.String[] str_array74 = i18n50.getStrings(str_array72, "vanish");
    java.lang.String[] str_array76 = i18n10.getStrings(str_array74, "hi!");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str77 = commandFriend0.getTabCompletion(commandSender7, command8, "GMCx", str_array76);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char56 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char62 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);

  }

  @Test
  public void test382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test382"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    java.lang.String str8 = commandFriend0.getName();
    java.lang.String str9 = commandFriend0.getName();
    java.lang.String str10 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender11 = null;
    org.bukkit.command.Command command12 = null;
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    char char16 = i18n14.getColorChar();
    char char17 = i18n14.getColorChar();
    char char18 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n19.getBundleCache$spigot_1_8();
    java.lang.String[] str_array21 = new java.lang.String[] {  };
    java.lang.String[] str_array23 = i18n19.getStrings(str_array21, "hi!");
    java.lang.String[] str_array25 = i18n14.getStrings(str_array23, "GMCrx");
    char char26 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    char char29 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n27.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n31.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n31.getBundleCache$spigot_1_8();
    char char35 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char37 = i18n36.getColorChar();
    char char38 = i18n36.getColorChar();
    char char39 = i18n36.getColorChar();
    char char40 = i18n36.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n41 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n41.getBundleCache$spigot_1_8();
    java.lang.String[] str_array43 = new java.lang.String[] {  };
    java.lang.String[] str_array45 = i18n41.getStrings(str_array43, "hi!");
    java.lang.String[] str_array47 = i18n36.getStrings(str_array45, "GMCrx");
    java.lang.String[] str_array49 = i18n31.getStrings(str_array45, "GMC");
    java.lang.String[] str_array51 = i18n27.getStrings(str_array45, "GMCx");
    java.lang.String[] str_array53 = i18n14.getStrings(str_array51, "hi!");
    gtlp.groundmc.lobby.util.I18n i18n54 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char55 = i18n54.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache56 = i18n54.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache57 = i18n54.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache58 = i18n54.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache59 = i18n54.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache60 = i18n54.getBundleCache$spigot_1_8();
    char char61 = i18n54.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n62 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache63 = i18n62.getBundleCache$spigot_1_8();
    char char64 = i18n62.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n65 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache66 = i18n65.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n67 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char68 = i18n67.getColorChar();
    char char69 = i18n67.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache70 = i18n67.getBundleCache$spigot_1_8();
    char char71 = i18n67.getColorChar();
    char char72 = i18n67.getColorChar();
    char char73 = i18n67.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n74 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char75 = i18n74.getColorChar();
    char char76 = i18n74.getColorChar();
    char char77 = i18n74.getColorChar();
    char char78 = i18n74.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n79 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache80 = i18n79.getBundleCache$spigot_1_8();
    java.lang.String[] str_array81 = new java.lang.String[] {  };
    java.lang.String[] str_array83 = i18n79.getStrings(str_array81, "hi!");
    java.lang.String[] str_array85 = i18n74.getStrings(str_array83, "GMCrx");
    java.lang.String[] str_array87 = i18n67.getStrings(str_array83, "friends");
    java.lang.String[] str_array89 = i18n65.getStrings(str_array87, "vanish");
    java.lang.String[] str_array91 = i18n62.getStrings(str_array89, "GMCt");
    java.lang.String[] str_array93 = i18n54.getStrings(str_array89, "GMCz");
    java.lang.String[] str_array95 = i18n14.getStrings(str_array93, "GMCy");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str96 = commandFriend0.getTabCompletion(commandSender11, command12, "friends", str_array93);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friend"+ "'", str8.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "friend"+ "'", str9.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "friend"+ "'", str10.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char69 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char71 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char72 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char73 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char75 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char76 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char77 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char78 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array95);

  }

  @Test
  public void test383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test383"); }

    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = new gtlp.groundmc.lobby.util.I18n.ResourceBundleCache("GMCz");
    java.lang.String str2 = resourceBundleCache1.getName();
    java.util.Locale locale4 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str5 = resourceBundleCache1.get("GMCry", locale4);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "GMCz"+ "'", str2.equals("GMCz"));

  }

  @Test
  public void test384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test384"); }

    org.joda.time.DateTime dateTime2 = null;
    // The following exception was thrown during execution in test generation
    try {
    gtlp.groundmc.lobby.Relationship relationship3 = new gtlp.groundmc.lobby.Relationship("GMC", "groundmc.lobby.vanish", dateTime2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test385"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    java.lang.String str6 = commandFriends0.getName();
    java.lang.String str7 = commandFriends0.getName();
    java.lang.String str8 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender9 = null;
    org.bukkit.command.Command command10 = null;
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n12.getBundleCache$spigot_1_8();
    char char16 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    char char19 = i18n17.getColorChar();
    char char20 = i18n17.getColorChar();
    char char21 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n22.getBundleCache$spigot_1_8();
    java.lang.String[] str_array24 = new java.lang.String[] {  };
    java.lang.String[] str_array26 = i18n22.getStrings(str_array24, "hi!");
    java.lang.String[] str_array28 = i18n17.getStrings(str_array26, "GMCrx");
    java.lang.String[] str_array30 = i18n12.getStrings(str_array26, "GMC");
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    char char33 = i18n31.getColorChar();
    char char34 = i18n31.getColorChar();
    char char35 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n36.getBundleCache$spigot_1_8();
    java.lang.String[] str_array38 = new java.lang.String[] {  };
    java.lang.String[] str_array40 = i18n36.getStrings(str_array38, "hi!");
    java.lang.String[] str_array42 = i18n31.getStrings(str_array40, "GMCrx");
    java.lang.String[] str_array44 = i18n12.getStrings(str_array40, "GMCz");
    // The following exception was thrown during execution in test generation
    try {
    boolean b45 = commandFriends0.execute(commandSender9, command10, "GMCry", str_array44);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friends"+ "'", str7.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friends"+ "'", str8.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);

  }

  @Test
  public void test386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test386"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender5 = null;
    org.bukkit.command.Command command6 = null;
    gtlp.groundmc.lobby.util.I18n i18n8 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char9 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n8.getBundleCache$spigot_1_8();
    char char11 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n8.getBundleCache$spigot_1_8();
    char char13 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    char char16 = i18n14.getColorChar();
    char char17 = i18n14.getColorChar();
    char char18 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n19.getBundleCache$spigot_1_8();
    java.lang.String[] str_array21 = new java.lang.String[] {  };
    java.lang.String[] str_array23 = i18n19.getStrings(str_array21, "hi!");
    java.lang.String[] str_array25 = i18n14.getStrings(str_array23, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    char char28 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n26.getBundleCache$spigot_1_8();
    char char30 = i18n26.getColorChar();
    char char31 = i18n26.getColorChar();
    char char32 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char34 = i18n33.getColorChar();
    char char35 = i18n33.getColorChar();
    char char36 = i18n33.getColorChar();
    char char37 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n38 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache39 = i18n38.getBundleCache$spigot_1_8();
    java.lang.String[] str_array40 = new java.lang.String[] {  };
    java.lang.String[] str_array42 = i18n38.getStrings(str_array40, "hi!");
    java.lang.String[] str_array44 = i18n33.getStrings(str_array42, "GMCrx");
    java.lang.String[] str_array46 = i18n26.getStrings(str_array42, "friends");
    java.lang.String[] str_array48 = i18n14.getStrings(str_array46, "");
    java.lang.String[] str_array50 = i18n8.getStrings(str_array46, "GMCw");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str51 = commandLobby0.getTabCompletion(commandSender5, command6, "GMCrx", str_array46);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);

  }

  @Test
  public void test387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test387"); }

    int i1 = gtlp.groundmc.lobby.util.ExtensionsKt.getKilobytes(39845888);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == (-2147483648));

  }

  @Test
  public void test388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test388"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender6 = null;
    org.bukkit.command.Command command7 = null;
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n9.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    char char13 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n11.getBundleCache$spigot_1_8();
    char char15 = i18n11.getColorChar();
    char char16 = i18n11.getColorChar();
    char char17 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    char char21 = i18n18.getColorChar();
    char char22 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n23.getBundleCache$spigot_1_8();
    java.lang.String[] str_array25 = new java.lang.String[] {  };
    java.lang.String[] str_array27 = i18n23.getStrings(str_array25, "hi!");
    java.lang.String[] str_array29 = i18n18.getStrings(str_array27, "GMCrx");
    java.lang.String[] str_array31 = i18n11.getStrings(str_array27, "friends");
    java.lang.String[] str_array33 = i18n9.getStrings(str_array31, "vanish");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str34 = commandFriends0.getTabCompletion(commandSender6, command7, "GMCsilent", str_array33);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);

  }

  @Test
  public void test389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test389"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender3 = null;
    org.bukkit.command.Command command4 = null;
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n6.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n8 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char9 = i18n8.getColorChar();
    char char10 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n8.getBundleCache$spigot_1_8();
    char char12 = i18n8.getColorChar();
    char char13 = i18n8.getColorChar();
    char char14 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    char char17 = i18n15.getColorChar();
    char char18 = i18n15.getColorChar();
    char char19 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n20.getBundleCache$spigot_1_8();
    java.lang.String[] str_array22 = new java.lang.String[] {  };
    java.lang.String[] str_array24 = i18n20.getStrings(str_array22, "hi!");
    java.lang.String[] str_array26 = i18n15.getStrings(str_array24, "GMCrx");
    java.lang.String[] str_array28 = i18n8.getStrings(str_array24, "friends");
    java.lang.String[] str_array30 = i18n6.getStrings(str_array28, "vanish");
    // The following exception was thrown during execution in test generation
    try {
    boolean b31 = commandVanish0.execute(commandSender3, command4, "GMCry", str_array30);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);

  }

  @Test
  public void test390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test390"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    java.lang.String str9 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender10 = null;
    org.bukkit.command.Command command11 = null;
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n13.getBundleCache$spigot_1_8();
    char char16 = i18n13.getColorChar();
    char char17 = i18n13.getColorChar();
    char char18 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n20.getBundleCache$spigot_1_8();
    char char23 = i18n20.getColorChar();
    char char24 = i18n20.getColorChar();
    char char25 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char29 = i18n28.getColorChar();
    char char30 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n28.getBundleCache$spigot_1_8();
    char char32 = i18n28.getColorChar();
    char char33 = i18n28.getColorChar();
    char char34 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n35 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char36 = i18n35.getColorChar();
    char char37 = i18n35.getColorChar();
    char char38 = i18n35.getColorChar();
    char char39 = i18n35.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache41 = i18n40.getBundleCache$spigot_1_8();
    java.lang.String[] str_array42 = new java.lang.String[] {  };
    java.lang.String[] str_array44 = i18n40.getStrings(str_array42, "hi!");
    java.lang.String[] str_array46 = i18n35.getStrings(str_array44, "GMCrx");
    java.lang.String[] str_array48 = i18n28.getStrings(str_array44, "friends");
    java.lang.String[] str_array50 = i18n20.getStrings(str_array48, "GMCt");
    java.lang.String[] str_array52 = i18n13.getStrings(str_array48, "friend");
    gtlp.groundmc.lobby.util.I18n i18n53 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char54 = i18n53.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache55 = i18n53.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache56 = i18n53.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache57 = i18n53.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache58 = i18n53.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n59 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char60 = i18n59.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache61 = i18n59.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache62 = i18n59.getBundleCache$spigot_1_8();
    char char63 = i18n59.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n64 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char65 = i18n64.getColorChar();
    char char66 = i18n64.getColorChar();
    char char67 = i18n64.getColorChar();
    char char68 = i18n64.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n69 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache70 = i18n69.getBundleCache$spigot_1_8();
    java.lang.String[] str_array71 = new java.lang.String[] {  };
    java.lang.String[] str_array73 = i18n69.getStrings(str_array71, "hi!");
    java.lang.String[] str_array75 = i18n64.getStrings(str_array73, "GMCrx");
    java.lang.String[] str_array77 = i18n59.getStrings(str_array73, "GMC");
    java.lang.String[] str_array79 = i18n53.getStrings(str_array73, "GMCw");
    java.lang.String[] str_array81 = i18n13.getStrings(str_array79, "groundmc.lobby.admin");
    // The following exception was thrown during execution in test generation
    try {
    boolean b82 = commandCoins0.execute(commandSender10, command11, "groundmc.lobby.vanish", str_array81);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char67 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);

  }

  @Test
  public void test391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test391"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender3 = null;
    org.bukkit.command.Command command4 = null;
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char7 = i18n6.getColorChar();
    char char8 = i18n6.getColorChar();
    char char9 = i18n6.getColorChar();
    char char10 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n11.getBundleCache$spigot_1_8();
    java.lang.String[] str_array13 = new java.lang.String[] {  };
    java.lang.String[] str_array15 = i18n11.getStrings(str_array13, "hi!");
    java.lang.String[] str_array17 = i18n6.getStrings(str_array15, "GMCrx");
    char char18 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    char char21 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n19.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n23.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n23.getBundleCache$spigot_1_8();
    char char27 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char29 = i18n28.getColorChar();
    char char30 = i18n28.getColorChar();
    char char31 = i18n28.getColorChar();
    char char32 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n33.getBundleCache$spigot_1_8();
    java.lang.String[] str_array35 = new java.lang.String[] {  };
    java.lang.String[] str_array37 = i18n33.getStrings(str_array35, "hi!");
    java.lang.String[] str_array39 = i18n28.getStrings(str_array37, "GMCrx");
    java.lang.String[] str_array41 = i18n23.getStrings(str_array37, "GMC");
    java.lang.String[] str_array43 = i18n19.getStrings(str_array37, "GMCx");
    java.lang.String[] str_array45 = i18n6.getStrings(str_array43, "hi!");
    gtlp.groundmc.lobby.util.I18n i18n46 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char47 = i18n46.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache48 = i18n46.getBundleCache$spigot_1_8();
    char char49 = i18n46.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n50 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char51 = i18n50.getColorChar();
    char char52 = i18n50.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache53 = i18n50.getBundleCache$spigot_1_8();
    char char54 = i18n50.getColorChar();
    char char55 = i18n50.getColorChar();
    char char56 = i18n50.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n57 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char58 = i18n57.getColorChar();
    char char59 = i18n57.getColorChar();
    char char60 = i18n57.getColorChar();
    char char61 = i18n57.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n62 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache63 = i18n62.getBundleCache$spigot_1_8();
    java.lang.String[] str_array64 = new java.lang.String[] {  };
    java.lang.String[] str_array66 = i18n62.getStrings(str_array64, "hi!");
    java.lang.String[] str_array68 = i18n57.getStrings(str_array66, "GMCrx");
    java.lang.String[] str_array70 = i18n50.getStrings(str_array66, "friends");
    java.lang.String[] str_array72 = i18n46.getStrings(str_array70, "GMCsilent");
    java.lang.String[] str_array74 = i18n6.getStrings(str_array70, "");
    // The following exception was thrown during execution in test generation
    try {
    boolean b75 = commandFriend0.execute(commandSender3, command4, "GMCz", str_array70);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char56 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);

  }

  @Test
  public void test392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test392"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    java.lang.String str8 = commandLobby0.getName();
    java.lang.String str9 = commandLobby0.getName();
    java.lang.String str10 = commandLobby0.getName();
    java.lang.String str11 = commandLobby0.getName();
    java.lang.String str12 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender13 = null;
    org.bukkit.command.Command command14 = null;
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n16.getBundleCache$spigot_1_8();
    char char19 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n16.getBundleCache$spigot_1_8();
    char char21 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    char char24 = i18n22.getColorChar();
    char char25 = i18n22.getColorChar();
    char char26 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n27.getBundleCache$spigot_1_8();
    java.lang.String[] str_array29 = new java.lang.String[] {  };
    java.lang.String[] str_array31 = i18n27.getStrings(str_array29, "hi!");
    java.lang.String[] str_array33 = i18n22.getStrings(str_array31, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n34 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char35 = i18n34.getColorChar();
    char char36 = i18n34.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n34.getBundleCache$spigot_1_8();
    char char38 = i18n34.getColorChar();
    char char39 = i18n34.getColorChar();
    char char40 = i18n34.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n41 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char42 = i18n41.getColorChar();
    char char43 = i18n41.getColorChar();
    char char44 = i18n41.getColorChar();
    char char45 = i18n41.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n46 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache47 = i18n46.getBundleCache$spigot_1_8();
    java.lang.String[] str_array48 = new java.lang.String[] {  };
    java.lang.String[] str_array50 = i18n46.getStrings(str_array48, "hi!");
    java.lang.String[] str_array52 = i18n41.getStrings(str_array50, "GMCrx");
    java.lang.String[] str_array54 = i18n34.getStrings(str_array50, "friends");
    java.lang.String[] str_array56 = i18n22.getStrings(str_array54, "");
    java.lang.String[] str_array58 = i18n16.getStrings(str_array54, "GMCw");
    char char59 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache60 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n61 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char62 = i18n61.getColorChar();
    char char63 = i18n61.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache64 = i18n61.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache65 = i18n61.getBundleCache$spigot_1_8();
    char char66 = i18n61.getColorChar();
    char char67 = i18n61.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n68 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char69 = i18n68.getColorChar();
    char char70 = i18n68.getColorChar();
    char char71 = i18n68.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache72 = i18n68.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n73 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char74 = i18n73.getColorChar();
    char char75 = i18n73.getColorChar();
    char char76 = i18n73.getColorChar();
    char char77 = i18n73.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n78 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache79 = i18n78.getBundleCache$spigot_1_8();
    java.lang.String[] str_array80 = new java.lang.String[] {  };
    java.lang.String[] str_array82 = i18n78.getStrings(str_array80, "hi!");
    java.lang.String[] str_array84 = i18n73.getStrings(str_array82, "GMCrx");
    java.lang.String[] str_array86 = i18n68.getStrings(str_array84, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n87 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache88 = i18n87.getBundleCache$spigot_1_8();
    java.lang.String[] str_array89 = new java.lang.String[] {  };
    java.lang.String[] str_array91 = i18n87.getStrings(str_array89, "hi!");
    java.lang.String[] str_array93 = i18n68.getStrings(str_array91, "groundmc.lobby.hide_players");
    java.lang.String[] str_array95 = i18n61.getStrings(str_array93, "lang.lobby");
    java.lang.String[] str_array97 = i18n16.getStrings(str_array93, "lobby");
    // The following exception was thrown during execution in test generation
    try {
    boolean b98 = commandLobby0.execute(commandSender13, command14, "GMCsilent", str_array93);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "lobby"+ "'", str8.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "lobby"+ "'", str9.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "lobby"+ "'", str10.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "lobby"+ "'", str11.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "lobby"+ "'", str12.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char62 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char67 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char69 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char70 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char71 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char74 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char75 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char76 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char77 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array97);

  }

  @Test
  public void test393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test393"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    char char5 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n6.getBundleCache$spigot_1_8();
    java.lang.String[] str_array8 = new java.lang.String[] {  };
    java.lang.String[] str_array10 = i18n6.getStrings(str_array8, "hi!");
    java.lang.String[] str_array12 = i18n0.getStrings(str_array10, "GMCy");
    char char13 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n14.getBundleCache$spigot_1_8();
    char char17 = i18n14.getColorChar();
    char char18 = i18n14.getColorChar();
    char char19 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n20.getBundleCache$spigot_1_8();
    java.lang.String[] str_array22 = new java.lang.String[] {  };
    java.lang.String[] str_array24 = i18n20.getStrings(str_array22, "hi!");
    java.lang.String[] str_array26 = i18n14.getStrings(str_array24, "GMCy");
    char char27 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char29 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n28.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n28.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n32.getBundleCache$spigot_1_8();
    java.lang.String[] str_array34 = new java.lang.String[] {  };
    java.lang.String[] str_array36 = i18n32.getStrings(str_array34, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n32.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n38 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char39 = i18n38.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache40 = i18n38.getBundleCache$spigot_1_8();
    char char41 = i18n38.getColorChar();
    char char42 = i18n38.getColorChar();
    char char43 = i18n38.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache44 = i18n38.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char46 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache47 = i18n45.getBundleCache$spigot_1_8();
    char char48 = i18n45.getColorChar();
    char char49 = i18n45.getColorChar();
    char char50 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n45.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache52 = i18n45.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n53 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char54 = i18n53.getColorChar();
    char char55 = i18n53.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache56 = i18n53.getBundleCache$spigot_1_8();
    char char57 = i18n53.getColorChar();
    char char58 = i18n53.getColorChar();
    char char59 = i18n53.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n60 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char61 = i18n60.getColorChar();
    char char62 = i18n60.getColorChar();
    char char63 = i18n60.getColorChar();
    char char64 = i18n60.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n65 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache66 = i18n65.getBundleCache$spigot_1_8();
    java.lang.String[] str_array67 = new java.lang.String[] {  };
    java.lang.String[] str_array69 = i18n65.getStrings(str_array67, "hi!");
    java.lang.String[] str_array71 = i18n60.getStrings(str_array69, "GMCrx");
    java.lang.String[] str_array73 = i18n53.getStrings(str_array69, "friends");
    java.lang.String[] str_array75 = i18n45.getStrings(str_array73, "GMCt");
    java.lang.String[] str_array77 = i18n38.getStrings(str_array73, "friend");
    java.lang.String[] str_array79 = i18n32.getStrings(str_array73, "GMCt");
    java.lang.String[] str_array81 = i18n28.getStrings(str_array73, "groundmc.lobby.admin");
    java.lang.String[] str_array83 = i18n14.getStrings(str_array73, "GMCz");
    java.util.Locale locale84 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array85 = i18n0.getStrings(str_array73, locale84);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char62 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);

  }

  @Test
  public void test394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test394"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    java.lang.String str8 = commandVanish0.getName();
    java.lang.String str9 = commandVanish0.getName();
    java.lang.String str10 = commandVanish0.getName();
    java.lang.String str11 = commandVanish0.getName();
    java.lang.String str12 = commandVanish0.getName();
    java.lang.String str13 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender14 = null;
    org.bukkit.command.Command command15 = null;
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    char char19 = i18n17.getColorChar();
    char char20 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    char char24 = i18n22.getColorChar();
    char char25 = i18n22.getColorChar();
    char char26 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n27.getBundleCache$spigot_1_8();
    java.lang.String[] str_array29 = new java.lang.String[] {  };
    java.lang.String[] str_array31 = i18n27.getStrings(str_array29, "hi!");
    java.lang.String[] str_array33 = i18n22.getStrings(str_array31, "GMCrx");
    java.lang.String[] str_array35 = i18n17.getStrings(str_array33, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n36.getBundleCache$spigot_1_8();
    java.lang.String[] str_array38 = new java.lang.String[] {  };
    java.lang.String[] str_array40 = i18n36.getStrings(str_array38, "hi!");
    java.lang.String[] str_array42 = i18n17.getStrings(str_array40, "groundmc.lobby.hide_players");
    // The following exception was thrown during execution in test generation
    try {
    boolean b43 = commandVanish0.execute(commandSender14, command15, "GMCw", str_array40);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "vanish"+ "'", str9.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "vanish"+ "'", str10.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "vanish"+ "'", str11.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "vanish"+ "'", str12.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "vanish"+ "'", str13.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);

  }

  @Test
  public void test395() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test395"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    char char5 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char7 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n6.getBundleCache$spigot_1_8();
    char char9 = i18n6.getColorChar();
    char char10 = i18n6.getColorChar();
    char char11 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n12.getBundleCache$spigot_1_8();
    java.lang.String[] str_array14 = new java.lang.String[] {  };
    java.lang.String[] str_array16 = i18n12.getStrings(str_array14, "hi!");
    java.lang.String[] str_array18 = i18n6.getStrings(str_array16, "GMCy");
    java.util.Locale locale19 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array20 = i18n0.getStrings(str_array18, locale19);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);

  }

  @Test
  public void test396() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test396"); }

    int i1 = gtlp.groundmc.lobby.util.ExtensionsKt.getKilobytes(1073741824);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);

  }

  @Test
  public void test397() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test397"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    java.lang.String str8 = commandFriend0.getName();
    java.lang.String str9 = commandFriend0.getName();
    java.lang.String str10 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender11 = null;
    org.bukkit.command.Command command12 = null;
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n14.getBundleCache$spigot_1_8();
    char char17 = i18n14.getColorChar();
    char char18 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n26.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n26.getBundleCache$spigot_1_8();
    char char30 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    char char33 = i18n31.getColorChar();
    char char34 = i18n31.getColorChar();
    char char35 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n36.getBundleCache$spigot_1_8();
    java.lang.String[] str_array38 = new java.lang.String[] {  };
    java.lang.String[] str_array40 = i18n36.getStrings(str_array38, "hi!");
    java.lang.String[] str_array42 = i18n31.getStrings(str_array40, "GMCrx");
    java.lang.String[] str_array44 = i18n26.getStrings(str_array40, "GMC");
    java.lang.String[] str_array46 = i18n20.getStrings(str_array40, "GMCw");
    java.lang.String[] str_array48 = i18n14.getStrings(str_array46, "GMCy");
    gtlp.groundmc.lobby.util.I18n i18n49 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char50 = i18n49.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n49.getBundleCache$spigot_1_8();
    char char52 = i18n49.getColorChar();
    char char53 = i18n49.getColorChar();
    char char54 = i18n49.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache55 = i18n49.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache56 = i18n49.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n57 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char58 = i18n57.getColorChar();
    char char59 = i18n57.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache60 = i18n57.getBundleCache$spigot_1_8();
    char char61 = i18n57.getColorChar();
    char char62 = i18n57.getColorChar();
    char char63 = i18n57.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n64 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char65 = i18n64.getColorChar();
    char char66 = i18n64.getColorChar();
    char char67 = i18n64.getColorChar();
    char char68 = i18n64.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n69 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache70 = i18n69.getBundleCache$spigot_1_8();
    java.lang.String[] str_array71 = new java.lang.String[] {  };
    java.lang.String[] str_array73 = i18n69.getStrings(str_array71, "hi!");
    java.lang.String[] str_array75 = i18n64.getStrings(str_array73, "GMCrx");
    java.lang.String[] str_array77 = i18n57.getStrings(str_array73, "friends");
    java.lang.String[] str_array79 = i18n49.getStrings(str_array77, "GMCt");
    java.lang.String[] str_array81 = i18n14.getStrings(str_array79, "coins");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str82 = commandFriend0.getTabCompletion(commandSender11, command12, "GMCry", str_array81);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friend"+ "'", str8.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "friend"+ "'", str9.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "friend"+ "'", str10.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char62 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char67 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);

  }

  @Test
  public void test398() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test398"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender3 = null;
    org.bukkit.command.Command command4 = null;
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n6.getBundleCache$spigot_1_8();
    java.lang.String[] str_array8 = new java.lang.String[] {  };
    java.lang.String[] str_array10 = i18n6.getStrings(str_array8, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n6.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n6.getBundleCache$spigot_1_8();
    char char13 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    char char16 = i18n14.getColorChar();
    char char17 = i18n14.getColorChar();
    char char18 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n19.getBundleCache$spigot_1_8();
    java.lang.String[] str_array21 = new java.lang.String[] {  };
    java.lang.String[] str_array23 = i18n19.getStrings(str_array21, "hi!");
    java.lang.String[] str_array25 = i18n14.getStrings(str_array23, "GMCrx");
    char char26 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char28 = i18n27.getColorChar();
    char char29 = i18n27.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n27.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n31.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n31.getBundleCache$spigot_1_8();
    char char35 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char37 = i18n36.getColorChar();
    char char38 = i18n36.getColorChar();
    char char39 = i18n36.getColorChar();
    char char40 = i18n36.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n41 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n41.getBundleCache$spigot_1_8();
    java.lang.String[] str_array43 = new java.lang.String[] {  };
    java.lang.String[] str_array45 = i18n41.getStrings(str_array43, "hi!");
    java.lang.String[] str_array47 = i18n36.getStrings(str_array45, "GMCrx");
    java.lang.String[] str_array49 = i18n31.getStrings(str_array45, "GMC");
    java.lang.String[] str_array51 = i18n27.getStrings(str_array45, "GMCx");
    java.lang.String[] str_array53 = i18n14.getStrings(str_array51, "hi!");
    gtlp.groundmc.lobby.util.I18n i18n54 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char55 = i18n54.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache56 = i18n54.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache57 = i18n54.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache58 = i18n54.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache59 = i18n54.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache60 = i18n54.getBundleCache$spigot_1_8();
    char char61 = i18n54.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n62 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache63 = i18n62.getBundleCache$spigot_1_8();
    char char64 = i18n62.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n65 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache66 = i18n65.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n67 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char68 = i18n67.getColorChar();
    char char69 = i18n67.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache70 = i18n67.getBundleCache$spigot_1_8();
    char char71 = i18n67.getColorChar();
    char char72 = i18n67.getColorChar();
    char char73 = i18n67.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n74 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char75 = i18n74.getColorChar();
    char char76 = i18n74.getColorChar();
    char char77 = i18n74.getColorChar();
    char char78 = i18n74.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n79 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache80 = i18n79.getBundleCache$spigot_1_8();
    java.lang.String[] str_array81 = new java.lang.String[] {  };
    java.lang.String[] str_array83 = i18n79.getStrings(str_array81, "hi!");
    java.lang.String[] str_array85 = i18n74.getStrings(str_array83, "GMCrx");
    java.lang.String[] str_array87 = i18n67.getStrings(str_array83, "friends");
    java.lang.String[] str_array89 = i18n65.getStrings(str_array87, "vanish");
    java.lang.String[] str_array91 = i18n62.getStrings(str_array89, "GMCt");
    java.lang.String[] str_array93 = i18n54.getStrings(str_array89, "GMCz");
    java.lang.String[] str_array95 = i18n14.getStrings(str_array93, "GMCy");
    java.lang.String[] str_array97 = i18n6.getStrings(str_array93, "GMCrx");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str98 = commandLobby0.getTabCompletion(commandSender3, command4, "vanish", str_array97);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char69 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char71 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char72 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char73 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char75 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char76 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char77 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char78 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array97);

  }

  @Test
  public void test399() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test399"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender9 = null;
    org.bukkit.command.Command command10 = null;
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n12.getBundleCache$spigot_1_8();
    char char15 = i18n12.getColorChar();
    char char16 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n24.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n24.getBundleCache$spigot_1_8();
    char char28 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char30 = i18n29.getColorChar();
    char char31 = i18n29.getColorChar();
    char char32 = i18n29.getColorChar();
    char char33 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n34 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n34.getBundleCache$spigot_1_8();
    java.lang.String[] str_array36 = new java.lang.String[] {  };
    java.lang.String[] str_array38 = i18n34.getStrings(str_array36, "hi!");
    java.lang.String[] str_array40 = i18n29.getStrings(str_array38, "GMCrx");
    java.lang.String[] str_array42 = i18n24.getStrings(str_array38, "GMC");
    java.lang.String[] str_array44 = i18n18.getStrings(str_array38, "GMCw");
    java.lang.String[] str_array46 = i18n12.getStrings(str_array44, "GMCy");
    gtlp.groundmc.lobby.util.I18n i18n47 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char48 = i18n47.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache49 = i18n47.getBundleCache$spigot_1_8();
    char char50 = i18n47.getColorChar();
    char char51 = i18n47.getColorChar();
    char char52 = i18n47.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache53 = i18n47.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache54 = i18n47.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n55 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char56 = i18n55.getColorChar();
    char char57 = i18n55.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache58 = i18n55.getBundleCache$spigot_1_8();
    char char59 = i18n55.getColorChar();
    char char60 = i18n55.getColorChar();
    char char61 = i18n55.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n62 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char63 = i18n62.getColorChar();
    char char64 = i18n62.getColorChar();
    char char65 = i18n62.getColorChar();
    char char66 = i18n62.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n67 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache68 = i18n67.getBundleCache$spigot_1_8();
    java.lang.String[] str_array69 = new java.lang.String[] {  };
    java.lang.String[] str_array71 = i18n67.getStrings(str_array69, "hi!");
    java.lang.String[] str_array73 = i18n62.getStrings(str_array71, "GMCrx");
    java.lang.String[] str_array75 = i18n55.getStrings(str_array71, "friends");
    java.lang.String[] str_array77 = i18n47.getStrings(str_array75, "GMCt");
    java.lang.String[] str_array79 = i18n12.getStrings(str_array77, "coins");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str80 = commandCoins0.getTabCompletion(commandSender9, command10, "lobby", str_array77);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char56 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);

  }

  @Test
  public void test400() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test400"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender5 = null;
    org.bukkit.command.Command command6 = null;
    gtlp.groundmc.lobby.util.I18n i18n8 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n8.getBundleCache$spigot_1_8();
    java.lang.String[] str_array10 = new java.lang.String[] {  };
    java.lang.String[] str_array12 = i18n8.getStrings(str_array10, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n8.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n14.getBundleCache$spigot_1_8();
    char char17 = i18n14.getColorChar();
    char char18 = i18n14.getColorChar();
    char char19 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char22 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n21.getBundleCache$spigot_1_8();
    char char24 = i18n21.getColorChar();
    char char25 = i18n21.getColorChar();
    char char26 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n21.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n21.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char30 = i18n29.getColorChar();
    char char31 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n29.getBundleCache$spigot_1_8();
    char char33 = i18n29.getColorChar();
    char char34 = i18n29.getColorChar();
    char char35 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char37 = i18n36.getColorChar();
    char char38 = i18n36.getColorChar();
    char char39 = i18n36.getColorChar();
    char char40 = i18n36.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n41 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n41.getBundleCache$spigot_1_8();
    java.lang.String[] str_array43 = new java.lang.String[] {  };
    java.lang.String[] str_array45 = i18n41.getStrings(str_array43, "hi!");
    java.lang.String[] str_array47 = i18n36.getStrings(str_array45, "GMCrx");
    java.lang.String[] str_array49 = i18n29.getStrings(str_array45, "friends");
    java.lang.String[] str_array51 = i18n21.getStrings(str_array49, "GMCt");
    java.lang.String[] str_array53 = i18n14.getStrings(str_array49, "friend");
    java.lang.String[] str_array55 = i18n8.getStrings(str_array49, "GMCt");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str56 = commandFriends0.getTabCompletion(commandSender5, command6, "GMCrx", str_array49);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);

  }

  @Test
  public void test401() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test401"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    java.lang.String str6 = commandFriends0.getName();
    java.lang.String str7 = commandFriends0.getName();
    java.lang.String str8 = commandFriends0.getName();
    java.lang.String str9 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender10 = null;
    org.bukkit.command.Command command11 = null;
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    char char15 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n18.getBundleCache$spigot_1_8();
    char char21 = i18n18.getColorChar();
    char char22 = i18n18.getColorChar();
    char char23 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n25.getBundleCache$spigot_1_8();
    char char28 = i18n25.getColorChar();
    char char29 = i18n25.getColorChar();
    char char30 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n25.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n25.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char34 = i18n33.getColorChar();
    char char35 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n33.getBundleCache$spigot_1_8();
    char char37 = i18n33.getColorChar();
    char char38 = i18n33.getColorChar();
    char char39 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char41 = i18n40.getColorChar();
    char char42 = i18n40.getColorChar();
    char char43 = i18n40.getColorChar();
    char char44 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache46 = i18n45.getBundleCache$spigot_1_8();
    java.lang.String[] str_array47 = new java.lang.String[] {  };
    java.lang.String[] str_array49 = i18n45.getStrings(str_array47, "hi!");
    java.lang.String[] str_array51 = i18n40.getStrings(str_array49, "GMCrx");
    java.lang.String[] str_array53 = i18n33.getStrings(str_array49, "friends");
    java.lang.String[] str_array55 = i18n25.getStrings(str_array53, "GMCt");
    java.lang.String[] str_array57 = i18n18.getStrings(str_array53, "friend");
    gtlp.groundmc.lobby.util.I18n i18n58 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char59 = i18n58.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache60 = i18n58.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache61 = i18n58.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache62 = i18n58.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache63 = i18n58.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n64 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char65 = i18n64.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache66 = i18n64.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache67 = i18n64.getBundleCache$spigot_1_8();
    char char68 = i18n64.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n69 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char70 = i18n69.getColorChar();
    char char71 = i18n69.getColorChar();
    char char72 = i18n69.getColorChar();
    char char73 = i18n69.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n74 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache75 = i18n74.getBundleCache$spigot_1_8();
    java.lang.String[] str_array76 = new java.lang.String[] {  };
    java.lang.String[] str_array78 = i18n74.getStrings(str_array76, "hi!");
    java.lang.String[] str_array80 = i18n69.getStrings(str_array78, "GMCrx");
    java.lang.String[] str_array82 = i18n64.getStrings(str_array78, "GMC");
    java.lang.String[] str_array84 = i18n58.getStrings(str_array78, "GMCw");
    java.lang.String[] str_array86 = i18n18.getStrings(str_array84, "groundmc.lobby.admin");
    java.lang.String[] str_array88 = i18n13.getStrings(str_array84, "GMCry");
    // The following exception was thrown during execution in test generation
    try {
    boolean b89 = commandFriends0.execute(commandSender10, command11, "GMCw", str_array88);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friends"+ "'", str7.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friends"+ "'", str8.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "friends"+ "'", str9.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char70 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char71 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char72 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char73 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);

  }

  @Test
  public void test402() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test402"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    java.lang.String str8 = commandFriend0.getName();
    java.lang.String str9 = commandFriend0.getName();
    java.lang.String str10 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender11 = null;
    org.bukkit.command.Command command12 = null;
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n14.getBundleCache$spigot_1_8();
    char char17 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n18.getBundleCache$spigot_1_8();
    char char22 = i18n18.getColorChar();
    char char23 = i18n18.getColorChar();
    char char24 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    char char27 = i18n25.getColorChar();
    char char28 = i18n25.getColorChar();
    char char29 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n30.getBundleCache$spigot_1_8();
    java.lang.String[] str_array32 = new java.lang.String[] {  };
    java.lang.String[] str_array34 = i18n30.getStrings(str_array32, "hi!");
    java.lang.String[] str_array36 = i18n25.getStrings(str_array34, "GMCrx");
    java.lang.String[] str_array38 = i18n18.getStrings(str_array34, "friends");
    java.lang.String[] str_array40 = i18n14.getStrings(str_array38, "GMCsilent");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str41 = commandFriend0.getTabCompletion(commandSender11, command12, "", str_array40);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friend"+ "'", str8.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "friend"+ "'", str9.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "friend"+ "'", str10.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);

  }

  @Test
  public void test403() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test403"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    char char3 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    char char5 = i18n0.getColorChar();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = i18n0.getString("groundmc.lobby.hide_players", "GMC");
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');

  }

  @Test
  public void test404() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test404"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender6 = null;
    org.bukkit.command.Command command7 = null;
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    char char11 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n9.getBundleCache$spigot_1_8();
    char char13 = i18n9.getColorChar();
    char char14 = i18n9.getColorChar();
    char char15 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n16.getBundleCache$spigot_1_8();
    char char19 = i18n16.getColorChar();
    char char20 = i18n16.getColorChar();
    char char21 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    char char26 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n24.getBundleCache$spigot_1_8();
    char char28 = i18n24.getColorChar();
    char char29 = i18n24.getColorChar();
    char char30 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    char char33 = i18n31.getColorChar();
    char char34 = i18n31.getColorChar();
    char char35 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n36.getBundleCache$spigot_1_8();
    java.lang.String[] str_array38 = new java.lang.String[] {  };
    java.lang.String[] str_array40 = i18n36.getStrings(str_array38, "hi!");
    java.lang.String[] str_array42 = i18n31.getStrings(str_array40, "GMCrx");
    java.lang.String[] str_array44 = i18n24.getStrings(str_array40, "friends");
    java.lang.String[] str_array46 = i18n16.getStrings(str_array44, "GMCt");
    java.lang.String[] str_array48 = i18n9.getStrings(str_array44, "groundmc.lobby.admin");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str49 = commandFriends0.getTabCompletion(commandSender6, command7, "GMCw", str_array48);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);

  }

  @Test
  public void test405() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test405"); }

    gtlp.groundmc.lobby.registry.LobbyCommandRegistry.Companion companion0 = gtlp.groundmc.lobby.registry.LobbyCommandRegistry.Companion;
    gtlp.groundmc.lobby.commands.CommandFriend commandFriend1 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str2 = commandFriend1.getName();
    java.lang.String str3 = commandFriend1.getName();
    java.lang.String str4 = commandFriend1.getName();
    java.lang.String str5 = commandFriend1.getName();
    // The following exception was thrown during execution in test generation
    try {
    companion0.registerCommand((gtlp.groundmc.lobby.commands.ILobbyCommand)commandFriend1);
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(companion0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));

  }

  @Test
  public void test406() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test406"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char7 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n6.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n6.getBundleCache$spigot_1_8();
    char char10 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    char char13 = i18n11.getColorChar();
    char char14 = i18n11.getColorChar();
    char char15 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n16.getBundleCache$spigot_1_8();
    java.lang.String[] str_array18 = new java.lang.String[] {  };
    java.lang.String[] str_array20 = i18n16.getStrings(str_array18, "hi!");
    java.lang.String[] str_array22 = i18n11.getStrings(str_array20, "GMCrx");
    java.lang.String[] str_array24 = i18n6.getStrings(str_array20, "GMC");
    java.lang.String[] str_array26 = i18n0.getStrings(str_array20, "GMCw");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n0.getBundleCache$spigot_1_8();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str30 = i18n0.getString("GMCz", "GMCw");
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);

  }

  @Test
  public void test407() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test407"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    char char4 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    char char6 = i18n0.getColorChar();
    java.util.Locale locale8 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str9 = i18n0.getString("lang.lobby", locale8);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');

  }

  @Test
  public void test408() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test408"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender3 = null;
    org.bukkit.command.Command command4 = null;
    java.lang.String[] str_array6 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str7 = commandCoins0.getTabCompletion(commandSender3, command4, "lobby", str_array6);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));

  }

  @Test
  public void test409() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test409"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender2 = null;
    org.bukkit.command.Command command3 = null;
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n5.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n5.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n5.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n5.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n5.getBundleCache$spigot_1_8();
    char char12 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n13.getBundleCache$spigot_1_8();
    char char15 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n18.getBundleCache$spigot_1_8();
    char char22 = i18n18.getColorChar();
    char char23 = i18n18.getColorChar();
    char char24 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    char char27 = i18n25.getColorChar();
    char char28 = i18n25.getColorChar();
    char char29 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n30.getBundleCache$spigot_1_8();
    java.lang.String[] str_array32 = new java.lang.String[] {  };
    java.lang.String[] str_array34 = i18n30.getStrings(str_array32, "hi!");
    java.lang.String[] str_array36 = i18n25.getStrings(str_array34, "GMCrx");
    java.lang.String[] str_array38 = i18n18.getStrings(str_array34, "friends");
    java.lang.String[] str_array40 = i18n16.getStrings(str_array38, "vanish");
    java.lang.String[] str_array42 = i18n13.getStrings(str_array40, "GMCt");
    java.lang.String[] str_array44 = i18n5.getStrings(str_array40, "GMCz");
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char46 = i18n45.getColorChar();
    char char47 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache48 = i18n45.getBundleCache$spigot_1_8();
    char char49 = i18n45.getColorChar();
    char char50 = i18n45.getColorChar();
    char char51 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n52 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char53 = i18n52.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache54 = i18n52.getBundleCache$spigot_1_8();
    char char55 = i18n52.getColorChar();
    char char56 = i18n52.getColorChar();
    char char57 = i18n52.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache58 = i18n52.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache59 = i18n52.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n60 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char61 = i18n60.getColorChar();
    char char62 = i18n60.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache63 = i18n60.getBundleCache$spigot_1_8();
    char char64 = i18n60.getColorChar();
    char char65 = i18n60.getColorChar();
    char char66 = i18n60.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n67 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char68 = i18n67.getColorChar();
    char char69 = i18n67.getColorChar();
    char char70 = i18n67.getColorChar();
    char char71 = i18n67.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n72 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache73 = i18n72.getBundleCache$spigot_1_8();
    java.lang.String[] str_array74 = new java.lang.String[] {  };
    java.lang.String[] str_array76 = i18n72.getStrings(str_array74, "hi!");
    java.lang.String[] str_array78 = i18n67.getStrings(str_array76, "GMCrx");
    java.lang.String[] str_array80 = i18n60.getStrings(str_array76, "friends");
    java.lang.String[] str_array82 = i18n52.getStrings(str_array80, "GMCt");
    java.lang.String[] str_array84 = i18n45.getStrings(str_array80, "groundmc.lobby.admin");
    java.lang.String[] str_array86 = i18n5.getStrings(str_array80, "GMCrx");
    // The following exception was thrown during execution in test generation
    try {
    boolean b87 = commandFriend0.execute(commandSender2, command3, "", str_array86);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char56 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char62 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char69 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char70 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char71 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);

  }

  @Test
  public void test410() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test410"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    java.lang.String str8 = commandFriend0.getName();
    java.lang.String str9 = commandFriend0.getName();
    java.lang.String str10 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender11 = null;
    org.bukkit.command.Command command12 = null;
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    char char16 = i18n14.getColorChar();
    char char17 = i18n14.getColorChar();
    char char18 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n19.getBundleCache$spigot_1_8();
    java.lang.String[] str_array21 = new java.lang.String[] {  };
    java.lang.String[] str_array23 = i18n19.getStrings(str_array21, "hi!");
    java.lang.String[] str_array25 = i18n14.getStrings(str_array23, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    char char28 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n26.getBundleCache$spigot_1_8();
    char char30 = i18n26.getColorChar();
    char char31 = i18n26.getColorChar();
    char char32 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char34 = i18n33.getColorChar();
    char char35 = i18n33.getColorChar();
    char char36 = i18n33.getColorChar();
    char char37 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n38 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache39 = i18n38.getBundleCache$spigot_1_8();
    java.lang.String[] str_array40 = new java.lang.String[] {  };
    java.lang.String[] str_array42 = i18n38.getStrings(str_array40, "hi!");
    java.lang.String[] str_array44 = i18n33.getStrings(str_array42, "GMCrx");
    java.lang.String[] str_array46 = i18n26.getStrings(str_array42, "friends");
    java.lang.String[] str_array48 = i18n14.getStrings(str_array46, "");
    // The following exception was thrown during execution in test generation
    try {
    boolean b49 = commandFriend0.execute(commandSender11, command12, "lang.lobby", str_array46);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friend"+ "'", str8.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "friend"+ "'", str9.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "friend"+ "'", str10.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);

  }

  @Test
  public void test411() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test411"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender3 = null;
    org.bukkit.command.Command command4 = null;
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char7 = i18n6.getColorChar();
    char char8 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n6.getBundleCache$spigot_1_8();
    char char10 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n11.getBundleCache$spigot_1_8();
    char char14 = i18n11.getColorChar();
    char char15 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n23.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n23.getBundleCache$spigot_1_8();
    char char27 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char29 = i18n28.getColorChar();
    char char30 = i18n28.getColorChar();
    char char31 = i18n28.getColorChar();
    char char32 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n33.getBundleCache$spigot_1_8();
    java.lang.String[] str_array35 = new java.lang.String[] {  };
    java.lang.String[] str_array37 = i18n33.getStrings(str_array35, "hi!");
    java.lang.String[] str_array39 = i18n28.getStrings(str_array37, "GMCrx");
    java.lang.String[] str_array41 = i18n23.getStrings(str_array37, "GMC");
    java.lang.String[] str_array43 = i18n17.getStrings(str_array37, "GMCw");
    java.lang.String[] str_array45 = i18n11.getStrings(str_array43, "GMCy");
    java.lang.String[] str_array47 = i18n6.getStrings(str_array43, "GMCy");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str48 = commandCoins0.getTabCompletion(commandSender3, command4, "coins", str_array43);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);

  }

  @Test
  public void test412() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test412"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    char char4 = i18n0.getColorChar();
    char char5 = i18n0.getColorChar();
    char char6 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n0.getBundleCache$spigot_1_8();
    java.util.Locale locale9 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str10 = i18n0.getString("groundmc.lobby.hide_players", locale9);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);

  }

  @Test
  public void test413() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test413"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender6 = null;
    org.bukkit.command.Command command7 = null;
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    char char11 = i18n9.getColorChar();
    char char12 = i18n9.getColorChar();
    char char13 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n14.getBundleCache$spigot_1_8();
    java.lang.String[] str_array16 = new java.lang.String[] {  };
    java.lang.String[] str_array18 = i18n14.getStrings(str_array16, "hi!");
    java.lang.String[] str_array20 = i18n9.getStrings(str_array18, "GMCrx");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str21 = commandFriend0.getTabCompletion(commandSender6, command7, "GMCy", str_array20);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);

  }

  @Test
  public void test414() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test414"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender6 = null;
    org.bukkit.command.Command command7 = null;
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    char char11 = i18n9.getColorChar();
    char char12 = i18n9.getColorChar();
    char char13 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n14.getBundleCache$spigot_1_8();
    java.lang.String[] str_array16 = new java.lang.String[] {  };
    java.lang.String[] str_array18 = i18n14.getStrings(str_array16, "hi!");
    java.lang.String[] str_array20 = i18n9.getStrings(str_array18, "GMCrx");
    char char21 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    char char24 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n22.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n26.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n26.getBundleCache$spigot_1_8();
    char char30 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    char char33 = i18n31.getColorChar();
    char char34 = i18n31.getColorChar();
    char char35 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n36.getBundleCache$spigot_1_8();
    java.lang.String[] str_array38 = new java.lang.String[] {  };
    java.lang.String[] str_array40 = i18n36.getStrings(str_array38, "hi!");
    java.lang.String[] str_array42 = i18n31.getStrings(str_array40, "GMCrx");
    java.lang.String[] str_array44 = i18n26.getStrings(str_array40, "GMC");
    java.lang.String[] str_array46 = i18n22.getStrings(str_array40, "GMCx");
    java.lang.String[] str_array48 = i18n9.getStrings(str_array46, "hi!");
    gtlp.groundmc.lobby.util.I18n i18n49 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char50 = i18n49.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n49.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache52 = i18n49.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache53 = i18n49.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache54 = i18n49.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache55 = i18n49.getBundleCache$spigot_1_8();
    char char56 = i18n49.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n57 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache58 = i18n57.getBundleCache$spigot_1_8();
    char char59 = i18n57.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n60 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache61 = i18n60.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n62 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char63 = i18n62.getColorChar();
    char char64 = i18n62.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache65 = i18n62.getBundleCache$spigot_1_8();
    char char66 = i18n62.getColorChar();
    char char67 = i18n62.getColorChar();
    char char68 = i18n62.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n69 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char70 = i18n69.getColorChar();
    char char71 = i18n69.getColorChar();
    char char72 = i18n69.getColorChar();
    char char73 = i18n69.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n74 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache75 = i18n74.getBundleCache$spigot_1_8();
    java.lang.String[] str_array76 = new java.lang.String[] {  };
    java.lang.String[] str_array78 = i18n74.getStrings(str_array76, "hi!");
    java.lang.String[] str_array80 = i18n69.getStrings(str_array78, "GMCrx");
    java.lang.String[] str_array82 = i18n62.getStrings(str_array78, "friends");
    java.lang.String[] str_array84 = i18n60.getStrings(str_array82, "vanish");
    java.lang.String[] str_array86 = i18n57.getStrings(str_array84, "GMCt");
    java.lang.String[] str_array88 = i18n49.getStrings(str_array84, "GMCz");
    java.lang.String[] str_array90 = i18n9.getStrings(str_array88, "GMCy");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str91 = commandFriends0.getTabCompletion(commandSender6, command7, "vanish", str_array90);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char56 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char67 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char70 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char71 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char72 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char73 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array90);

  }

  @Test
  public void test415() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test415"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    java.lang.String str8 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender9 = null;
    org.bukkit.command.Command command10 = null;
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n12.getBundleCache$spigot_1_8();
    java.lang.String[] str_array14 = new java.lang.String[] {  };
    java.lang.String[] str_array16 = i18n12.getStrings(str_array14, "hi!");
    // The following exception was thrown during execution in test generation
    try {
    boolean b17 = commandVanish0.execute(commandSender9, command10, "GMC", str_array16);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);

  }

  @Test
  public void test416() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test416"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    java.lang.String str8 = commandFriend0.getName();
    java.lang.String str9 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender10 = null;
    org.bukkit.command.Command command11 = null;
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n13.getBundleCache$spigot_1_8();
    char char16 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n13.getBundleCache$spigot_1_8();
    char char18 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    char char21 = i18n19.getColorChar();
    char char22 = i18n19.getColorChar();
    char char23 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n24.getBundleCache$spigot_1_8();
    java.lang.String[] str_array26 = new java.lang.String[] {  };
    java.lang.String[] str_array28 = i18n24.getStrings(str_array26, "hi!");
    java.lang.String[] str_array30 = i18n19.getStrings(str_array28, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    char char33 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n31.getBundleCache$spigot_1_8();
    char char35 = i18n31.getColorChar();
    char char36 = i18n31.getColorChar();
    char char37 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n38 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char39 = i18n38.getColorChar();
    char char40 = i18n38.getColorChar();
    char char41 = i18n38.getColorChar();
    char char42 = i18n38.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n43 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache44 = i18n43.getBundleCache$spigot_1_8();
    java.lang.String[] str_array45 = new java.lang.String[] {  };
    java.lang.String[] str_array47 = i18n43.getStrings(str_array45, "hi!");
    java.lang.String[] str_array49 = i18n38.getStrings(str_array47, "GMCrx");
    java.lang.String[] str_array51 = i18n31.getStrings(str_array47, "friends");
    java.lang.String[] str_array53 = i18n19.getStrings(str_array51, "");
    java.lang.String[] str_array55 = i18n13.getStrings(str_array51, "GMCw");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str56 = commandFriend0.getTabCompletion(commandSender10, command11, "lobby", str_array55);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friend"+ "'", str8.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "friend"+ "'", str9.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);

  }

  @Test
  public void test417() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test417"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    org.bukkit.command.CommandSender commandSender1 = null;
    org.bukkit.command.Command command2 = null;
    gtlp.groundmc.lobby.util.I18n i18n4 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n4.getBundleCache$spigot_1_8();
    char char6 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    char char11 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n9.getBundleCache$spigot_1_8();
    char char13 = i18n9.getColorChar();
    char char14 = i18n9.getColorChar();
    char char15 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    char char18 = i18n16.getColorChar();
    char char19 = i18n16.getColorChar();
    char char20 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n21.getBundleCache$spigot_1_8();
    java.lang.String[] str_array23 = new java.lang.String[] {  };
    java.lang.String[] str_array25 = i18n21.getStrings(str_array23, "hi!");
    java.lang.String[] str_array27 = i18n16.getStrings(str_array25, "GMCrx");
    java.lang.String[] str_array29 = i18n9.getStrings(str_array25, "friends");
    java.lang.String[] str_array31 = i18n7.getStrings(str_array29, "vanish");
    java.lang.String[] str_array33 = i18n4.getStrings(str_array31, "GMCt");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str34 = commandFriends0.getTabCompletion(commandSender1, command2, "groundmc.lobby.admin", str_array31);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);

  }

  @Test
  public void test418() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test418"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    java.lang.String str3 = resourceBundleCache2.getName();
    java.lang.String str4 = resourceBundleCache2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lang.lobby"+ "'", str3.equals("lang.lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lang.lobby"+ "'", str4.equals("lang.lobby"));

  }

  @Test
  public void test419() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test419"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    java.lang.String str6 = commandFriends0.getName();
    java.lang.String str7 = commandFriends0.getName();
    java.lang.String str8 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender9 = null;
    org.bukkit.command.Command command10 = null;
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n12.getBundleCache$spigot_1_8();
    char char15 = i18n12.getColorChar();
    char char16 = i18n12.getColorChar();
    char char17 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n18.getBundleCache$spigot_1_8();
    java.lang.String[] str_array20 = new java.lang.String[] {  };
    java.lang.String[] str_array22 = i18n18.getStrings(str_array20, "hi!");
    java.lang.String[] str_array24 = i18n12.getStrings(str_array22, "GMCy");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str25 = commandFriends0.getTabCompletion(commandSender9, command10, "hi!", str_array22);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friends"+ "'", str7.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friends"+ "'", str8.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);

  }

  @Test
  public void test420() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test420"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender6 = null;
    org.bukkit.command.Command command7 = null;
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    char char11 = i18n9.getColorChar();
    char char12 = i18n9.getColorChar();
    char char13 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n14.getBundleCache$spigot_1_8();
    java.lang.String[] str_array16 = new java.lang.String[] {  };
    java.lang.String[] str_array18 = i18n14.getStrings(str_array16, "hi!");
    java.lang.String[] str_array20 = i18n9.getStrings(str_array18, "GMCrx");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str21 = commandLobby0.getTabCompletion(commandSender6, command7, "hi!", str_array18);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);

  }

  @Test
  public void test421() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test421"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    char char4 = i18n0.getColorChar();
    char char5 = i18n0.getColorChar();
    char char6 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char8 = i18n7.getColorChar();
    char char9 = i18n7.getColorChar();
    char char10 = i18n7.getColorChar();
    char char11 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n12.getBundleCache$spigot_1_8();
    java.lang.String[] str_array14 = new java.lang.String[] {  };
    java.lang.String[] str_array16 = i18n12.getStrings(str_array14, "hi!");
    java.lang.String[] str_array18 = i18n7.getStrings(str_array16, "GMCrx");
    java.lang.String[] str_array20 = i18n0.getStrings(str_array16, "friends");
    char char21 = i18n0.getColorChar();
    char char22 = i18n0.getColorChar();
    java.util.Locale locale24 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str25 = i18n0.getString("", locale24);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');

  }

  @Test
  public void test422() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test422"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    java.lang.String str8 = commandFriend0.getName();
    java.lang.String str9 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender10 = null;
    org.bukkit.command.Command command11 = null;
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n13.getBundleCache$spigot_1_8();
    char char16 = i18n13.getColorChar();
    char char17 = i18n13.getColorChar();
    char char18 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char22 = i18n21.getColorChar();
    char char23 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n21.getBundleCache$spigot_1_8();
    char char25 = i18n21.getColorChar();
    char char26 = i18n21.getColorChar();
    char char27 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char29 = i18n28.getColorChar();
    char char30 = i18n28.getColorChar();
    char char31 = i18n28.getColorChar();
    char char32 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n33.getBundleCache$spigot_1_8();
    java.lang.String[] str_array35 = new java.lang.String[] {  };
    java.lang.String[] str_array37 = i18n33.getStrings(str_array35, "hi!");
    java.lang.String[] str_array39 = i18n28.getStrings(str_array37, "GMCrx");
    java.lang.String[] str_array41 = i18n21.getStrings(str_array37, "friends");
    java.lang.String[] str_array43 = i18n13.getStrings(str_array41, "GMCt");
    // The following exception was thrown during execution in test generation
    try {
    boolean b44 = commandFriend0.execute(commandSender10, command11, "groundmc.lobby.silent", str_array43);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friend"+ "'", str8.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "friend"+ "'", str9.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);

  }

  @Test
  public void test423() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test423"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    java.lang.String str9 = commandCoins0.getName();
    java.lang.String str10 = commandCoins0.getName();
    java.lang.String str11 = commandCoins0.getName();
    java.lang.String str12 = commandCoins0.getName();
    java.lang.String str13 = commandCoins0.getName();
    java.lang.String str14 = commandCoins0.getName();
    java.lang.String str15 = commandCoins0.getName();
    java.lang.String str16 = commandCoins0.getName();
    java.lang.String str17 = commandCoins0.getName();
    java.lang.String str18 = commandCoins0.getName();
    java.lang.String str19 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender20 = null;
    org.bukkit.command.Command command21 = null;
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    char char25 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n23.getBundleCache$spigot_1_8();
    char char27 = i18n23.getColorChar();
    char char28 = i18n23.getColorChar();
    char char29 = i18n23.getColorChar();
    char char30 = i18n23.getColorChar();
    char char31 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char33 = i18n32.getColorChar();
    char char34 = i18n32.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n32.getBundleCache$spigot_1_8();
    char char36 = i18n32.getColorChar();
    char char37 = i18n32.getColorChar();
    char char38 = i18n32.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n39 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char40 = i18n39.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache41 = i18n39.getBundleCache$spigot_1_8();
    char char42 = i18n39.getColorChar();
    char char43 = i18n39.getColorChar();
    char char44 = i18n39.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache45 = i18n39.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache46 = i18n39.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n47 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char48 = i18n47.getColorChar();
    char char49 = i18n47.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache50 = i18n47.getBundleCache$spigot_1_8();
    char char51 = i18n47.getColorChar();
    char char52 = i18n47.getColorChar();
    char char53 = i18n47.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n54 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char55 = i18n54.getColorChar();
    char char56 = i18n54.getColorChar();
    char char57 = i18n54.getColorChar();
    char char58 = i18n54.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n59 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache60 = i18n59.getBundleCache$spigot_1_8();
    java.lang.String[] str_array61 = new java.lang.String[] {  };
    java.lang.String[] str_array63 = i18n59.getStrings(str_array61, "hi!");
    java.lang.String[] str_array65 = i18n54.getStrings(str_array63, "GMCrx");
    java.lang.String[] str_array67 = i18n47.getStrings(str_array63, "friends");
    java.lang.String[] str_array69 = i18n39.getStrings(str_array67, "GMCt");
    java.lang.String[] str_array71 = i18n32.getStrings(str_array67, "groundmc.lobby.admin");
    java.lang.String[] str_array73 = i18n23.getStrings(str_array71, "coins");
    // The following exception was thrown during execution in test generation
    try {
    boolean b74 = commandCoins0.execute(commandSender20, command21, "GMCy", str_array71);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "coins"+ "'", str10.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "coins"+ "'", str11.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "coins"+ "'", str12.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "coins"+ "'", str13.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "coins"+ "'", str14.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "coins"+ "'", str15.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "coins"+ "'", str16.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "coins"+ "'", str17.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "coins"+ "'", str18.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "coins"+ "'", str19.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char56 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);

  }

  @Test
  public void test424() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test424"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    org.bukkit.command.CommandSender commandSender1 = null;
    org.bukkit.command.Command command2 = null;
    gtlp.groundmc.lobby.util.I18n i18n4 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char5 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n4.getBundleCache$spigot_1_8();
    char char7 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n4.getBundleCache$spigot_1_8();
    char char9 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    char char12 = i18n10.getColorChar();
    char char13 = i18n10.getColorChar();
    char char14 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n15.getBundleCache$spigot_1_8();
    java.lang.String[] str_array17 = new java.lang.String[] {  };
    java.lang.String[] str_array19 = i18n15.getStrings(str_array17, "hi!");
    java.lang.String[] str_array21 = i18n10.getStrings(str_array19, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    char char24 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n22.getBundleCache$spigot_1_8();
    char char26 = i18n22.getColorChar();
    char char27 = i18n22.getColorChar();
    char char28 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char30 = i18n29.getColorChar();
    char char31 = i18n29.getColorChar();
    char char32 = i18n29.getColorChar();
    char char33 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n34 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n34.getBundleCache$spigot_1_8();
    java.lang.String[] str_array36 = new java.lang.String[] {  };
    java.lang.String[] str_array38 = i18n34.getStrings(str_array36, "hi!");
    java.lang.String[] str_array40 = i18n29.getStrings(str_array38, "GMCrx");
    java.lang.String[] str_array42 = i18n22.getStrings(str_array38, "friends");
    java.lang.String[] str_array44 = i18n10.getStrings(str_array42, "");
    java.lang.String[] str_array46 = i18n4.getStrings(str_array42, "GMCw");
    // The following exception was thrown during execution in test generation
    try {
    boolean b47 = commandFriends0.execute(commandSender1, command2, "hi!", str_array46);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);

  }

  @Test
  public void test425() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test425"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    org.bukkit.command.CommandSender commandSender1 = null;
    org.bukkit.command.Command command2 = null;
    gtlp.groundmc.lobby.util.I18n i18n4 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char5 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n10.getBundleCache$spigot_1_8();
    char char14 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    char char17 = i18n15.getColorChar();
    char char18 = i18n15.getColorChar();
    char char19 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n20.getBundleCache$spigot_1_8();
    java.lang.String[] str_array22 = new java.lang.String[] {  };
    java.lang.String[] str_array24 = i18n20.getStrings(str_array22, "hi!");
    java.lang.String[] str_array26 = i18n15.getStrings(str_array24, "GMCrx");
    java.lang.String[] str_array28 = i18n10.getStrings(str_array24, "GMC");
    java.lang.String[] str_array30 = i18n4.getStrings(str_array24, "GMCw");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char34 = i18n33.getColorChar();
    char char35 = i18n33.getColorChar();
    char char36 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n33.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n38 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char39 = i18n38.getColorChar();
    char char40 = i18n38.getColorChar();
    char char41 = i18n38.getColorChar();
    char char42 = i18n38.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n43 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache44 = i18n43.getBundleCache$spigot_1_8();
    java.lang.String[] str_array45 = new java.lang.String[] {  };
    java.lang.String[] str_array47 = i18n43.getStrings(str_array45, "hi!");
    java.lang.String[] str_array49 = i18n38.getStrings(str_array47, "GMCrx");
    java.lang.String[] str_array51 = i18n33.getStrings(str_array49, "GMCt");
    java.lang.String[] str_array53 = i18n4.getStrings(str_array51, "hi!");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str54 = commandFriends0.getTabCompletion(commandSender1, command2, "GMCz", str_array51);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);

  }

  @Test
  public void test426() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test426"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    java.lang.String str9 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender10 = null;
    org.bukkit.command.Command command11 = null;
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    char char15 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n13.getBundleCache$spigot_1_8();
    char char18 = i18n13.getColorChar();
    char char19 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    char char22 = i18n20.getColorChar();
    char char23 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    char char27 = i18n25.getColorChar();
    char char28 = i18n25.getColorChar();
    char char29 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n30.getBundleCache$spigot_1_8();
    java.lang.String[] str_array32 = new java.lang.String[] {  };
    java.lang.String[] str_array34 = i18n30.getStrings(str_array32, "hi!");
    java.lang.String[] str_array36 = i18n25.getStrings(str_array34, "GMCrx");
    java.lang.String[] str_array38 = i18n20.getStrings(str_array36, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n39 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache40 = i18n39.getBundleCache$spigot_1_8();
    java.lang.String[] str_array41 = new java.lang.String[] {  };
    java.lang.String[] str_array43 = i18n39.getStrings(str_array41, "hi!");
    java.lang.String[] str_array45 = i18n20.getStrings(str_array43, "groundmc.lobby.hide_players");
    java.lang.String[] str_array47 = i18n13.getStrings(str_array45, "lang.lobby");
    // The following exception was thrown during execution in test generation
    try {
    boolean b48 = commandCoins0.execute(commandSender10, command11, "lang.lobby", str_array45);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);

  }

  @Test
  public void test427() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test427"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender4 = null;
    org.bukkit.command.Command command5 = null;
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char8 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n7.getBundleCache$spigot_1_8();
    char char10 = i18n7.getColorChar();
    char char11 = i18n7.getColorChar();
    char char12 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    char char17 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n15.getBundleCache$spigot_1_8();
    char char19 = i18n15.getColorChar();
    char char20 = i18n15.getColorChar();
    char char21 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    char char24 = i18n22.getColorChar();
    char char25 = i18n22.getColorChar();
    char char26 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n27.getBundleCache$spigot_1_8();
    java.lang.String[] str_array29 = new java.lang.String[] {  };
    java.lang.String[] str_array31 = i18n27.getStrings(str_array29, "hi!");
    java.lang.String[] str_array33 = i18n22.getStrings(str_array31, "GMCrx");
    java.lang.String[] str_array35 = i18n15.getStrings(str_array31, "friends");
    java.lang.String[] str_array37 = i18n7.getStrings(str_array35, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n38 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char39 = i18n38.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache40 = i18n38.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache41 = i18n38.getBundleCache$spigot_1_8();
    char char42 = i18n38.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n43 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char44 = i18n43.getColorChar();
    char char45 = i18n43.getColorChar();
    char char46 = i18n43.getColorChar();
    char char47 = i18n43.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n48 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache49 = i18n48.getBundleCache$spigot_1_8();
    java.lang.String[] str_array50 = new java.lang.String[] {  };
    java.lang.String[] str_array52 = i18n48.getStrings(str_array50, "hi!");
    java.lang.String[] str_array54 = i18n43.getStrings(str_array52, "GMCrx");
    java.lang.String[] str_array56 = i18n38.getStrings(str_array52, "GMC");
    java.lang.String[] str_array58 = i18n7.getStrings(str_array56, "groundmc.lobby.vanish");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str59 = commandFriend0.getTabCompletion(commandSender4, command5, "GMCz", str_array56);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);

  }

  @Test
  public void test428() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test428"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    java.lang.String str6 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender7 = null;
    org.bukkit.command.Command command8 = null;
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    char char12 = i18n10.getColorChar();
    char char13 = i18n10.getColorChar();
    char char14 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n15.getBundleCache$spigot_1_8();
    java.lang.String[] str_array17 = new java.lang.String[] {  };
    java.lang.String[] str_array19 = i18n15.getStrings(str_array17, "hi!");
    java.lang.String[] str_array21 = i18n10.getStrings(str_array19, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    char char24 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n22.getBundleCache$spigot_1_8();
    char char26 = i18n22.getColorChar();
    char char27 = i18n22.getColorChar();
    char char28 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char30 = i18n29.getColorChar();
    char char31 = i18n29.getColorChar();
    char char32 = i18n29.getColorChar();
    char char33 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n34 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n34.getBundleCache$spigot_1_8();
    java.lang.String[] str_array36 = new java.lang.String[] {  };
    java.lang.String[] str_array38 = i18n34.getStrings(str_array36, "hi!");
    java.lang.String[] str_array40 = i18n29.getStrings(str_array38, "GMCrx");
    java.lang.String[] str_array42 = i18n22.getStrings(str_array38, "friends");
    java.lang.String[] str_array44 = i18n10.getStrings(str_array42, "");
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char46 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache47 = i18n45.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache48 = i18n45.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache49 = i18n45.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache50 = i18n45.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n51 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char52 = i18n51.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache53 = i18n51.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache54 = i18n51.getBundleCache$spigot_1_8();
    char char55 = i18n51.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n56 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char57 = i18n56.getColorChar();
    char char58 = i18n56.getColorChar();
    char char59 = i18n56.getColorChar();
    char char60 = i18n56.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n61 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache62 = i18n61.getBundleCache$spigot_1_8();
    java.lang.String[] str_array63 = new java.lang.String[] {  };
    java.lang.String[] str_array65 = i18n61.getStrings(str_array63, "hi!");
    java.lang.String[] str_array67 = i18n56.getStrings(str_array65, "GMCrx");
    java.lang.String[] str_array69 = i18n51.getStrings(str_array65, "GMC");
    java.lang.String[] str_array71 = i18n45.getStrings(str_array65, "GMCw");
    java.lang.String[] str_array73 = i18n10.getStrings(str_array71, "GMCz");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str74 = commandFriends0.getTabCompletion(commandSender7, command8, "lang.lobby", str_array71);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);

  }

  @Test
  public void test429() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test429"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n5.getBundleCache$spigot_1_8();
    char char7 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n8 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n8.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    char char12 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n10.getBundleCache$spigot_1_8();
    char char14 = i18n10.getColorChar();
    char char15 = i18n10.getColorChar();
    char char16 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    char char19 = i18n17.getColorChar();
    char char20 = i18n17.getColorChar();
    char char21 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n22.getBundleCache$spigot_1_8();
    java.lang.String[] str_array24 = new java.lang.String[] {  };
    java.lang.String[] str_array26 = i18n22.getStrings(str_array24, "hi!");
    java.lang.String[] str_array28 = i18n17.getStrings(str_array26, "GMCrx");
    java.lang.String[] str_array30 = i18n10.getStrings(str_array26, "friends");
    java.lang.String[] str_array32 = i18n8.getStrings(str_array30, "vanish");
    java.lang.String[] str_array34 = i18n5.getStrings(str_array32, "GMCt");
    java.util.Locale locale35 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array36 = i18n0.getStrings(str_array32, locale35);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);

  }

  @Test
  public void test430() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test430"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender4 = null;
    org.bukkit.command.Command command5 = null;
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char8 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n13.getBundleCache$spigot_1_8();
    char char17 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    char char21 = i18n18.getColorChar();
    char char22 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n23.getBundleCache$spigot_1_8();
    java.lang.String[] str_array25 = new java.lang.String[] {  };
    java.lang.String[] str_array27 = i18n23.getStrings(str_array25, "hi!");
    java.lang.String[] str_array29 = i18n18.getStrings(str_array27, "GMCrx");
    java.lang.String[] str_array31 = i18n13.getStrings(str_array27, "GMC");
    java.lang.String[] str_array33 = i18n7.getStrings(str_array27, "GMCw");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char37 = i18n36.getColorChar();
    char char38 = i18n36.getColorChar();
    char char39 = i18n36.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache40 = i18n36.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n41 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char42 = i18n41.getColorChar();
    char char43 = i18n41.getColorChar();
    char char44 = i18n41.getColorChar();
    char char45 = i18n41.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n46 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache47 = i18n46.getBundleCache$spigot_1_8();
    java.lang.String[] str_array48 = new java.lang.String[] {  };
    java.lang.String[] str_array50 = i18n46.getStrings(str_array48, "hi!");
    java.lang.String[] str_array52 = i18n41.getStrings(str_array50, "GMCrx");
    java.lang.String[] str_array54 = i18n36.getStrings(str_array52, "GMCt");
    java.lang.String[] str_array56 = i18n7.getStrings(str_array54, "hi!");
    // The following exception was thrown during execution in test generation
    try {
    boolean b57 = commandFriends0.execute(commandSender4, command5, "friends", str_array56);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);

  }

  @Test
  public void test431() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test431"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n5.getBundleCache$spigot_1_8();
    java.lang.String[] str_array7 = new java.lang.String[] {  };
    java.lang.String[] str_array9 = i18n5.getStrings(str_array7, "hi!");
    java.lang.String[] str_array11 = i18n0.getStrings(str_array9, "GMCrx");
    char char12 = i18n0.getColorChar();
    java.util.Locale locale14 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str15 = i18n0.getString("coins", locale14);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');

  }

  @Test
  public void test432() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test432"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    java.lang.String str6 = commandFriends0.getName();
    java.lang.String str7 = commandFriends0.getName();
    java.lang.String str8 = commandFriends0.getName();
    java.lang.String str9 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender10 = null;
    org.bukkit.command.Command command11 = null;
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n13.getBundleCache$spigot_1_8();
    java.lang.String[] str_array15 = new java.lang.String[] {  };
    java.lang.String[] str_array17 = i18n13.getStrings(str_array15, "hi!");
    // The following exception was thrown during execution in test generation
    try {
    boolean b18 = commandFriends0.execute(commandSender10, command11, "GMCy", str_array15);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friends"+ "'", str7.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friends"+ "'", str8.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "friends"+ "'", str9.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);

  }

  @Test
  public void test433() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test433"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    java.lang.String str9 = commandCoins0.getName();
    java.lang.String str10 = commandCoins0.getName();
    java.lang.String str11 = commandCoins0.getName();
    java.lang.String str12 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender13 = null;
    org.bukkit.command.Command command14 = null;
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    char char18 = i18n16.getColorChar();
    char char19 = i18n16.getColorChar();
    char char20 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n21.getBundleCache$spigot_1_8();
    java.lang.String[] str_array23 = new java.lang.String[] {  };
    java.lang.String[] str_array25 = i18n21.getStrings(str_array23, "hi!");
    java.lang.String[] str_array27 = i18n16.getStrings(str_array25, "GMCrx");
    char char28 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char30 = i18n29.getColorChar();
    char char31 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n29.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char34 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n33.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n33.getBundleCache$spigot_1_8();
    char char37 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n38 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char39 = i18n38.getColorChar();
    char char40 = i18n38.getColorChar();
    char char41 = i18n38.getColorChar();
    char char42 = i18n38.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n43 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache44 = i18n43.getBundleCache$spigot_1_8();
    java.lang.String[] str_array45 = new java.lang.String[] {  };
    java.lang.String[] str_array47 = i18n43.getStrings(str_array45, "hi!");
    java.lang.String[] str_array49 = i18n38.getStrings(str_array47, "GMCrx");
    java.lang.String[] str_array51 = i18n33.getStrings(str_array47, "GMC");
    java.lang.String[] str_array53 = i18n29.getStrings(str_array47, "GMCx");
    java.lang.String[] str_array55 = i18n16.getStrings(str_array53, "hi!");
    gtlp.groundmc.lobby.util.I18n i18n56 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char57 = i18n56.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache58 = i18n56.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache59 = i18n56.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache60 = i18n56.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache61 = i18n56.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache62 = i18n56.getBundleCache$spigot_1_8();
    char char63 = i18n56.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n64 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache65 = i18n64.getBundleCache$spigot_1_8();
    char char66 = i18n64.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n67 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache68 = i18n67.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n69 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char70 = i18n69.getColorChar();
    char char71 = i18n69.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache72 = i18n69.getBundleCache$spigot_1_8();
    char char73 = i18n69.getColorChar();
    char char74 = i18n69.getColorChar();
    char char75 = i18n69.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n76 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char77 = i18n76.getColorChar();
    char char78 = i18n76.getColorChar();
    char char79 = i18n76.getColorChar();
    char char80 = i18n76.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n81 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache82 = i18n81.getBundleCache$spigot_1_8();
    java.lang.String[] str_array83 = new java.lang.String[] {  };
    java.lang.String[] str_array85 = i18n81.getStrings(str_array83, "hi!");
    java.lang.String[] str_array87 = i18n76.getStrings(str_array85, "GMCrx");
    java.lang.String[] str_array89 = i18n69.getStrings(str_array85, "friends");
    java.lang.String[] str_array91 = i18n67.getStrings(str_array89, "vanish");
    java.lang.String[] str_array93 = i18n64.getStrings(str_array91, "GMCt");
    java.lang.String[] str_array95 = i18n56.getStrings(str_array91, "GMCz");
    java.lang.String[] str_array97 = i18n16.getStrings(str_array95, "GMCy");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str98 = commandCoins0.getTabCompletion(commandSender13, command14, "GMCt", str_array95);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "coins"+ "'", str10.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "coins"+ "'", str11.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "coins"+ "'", str12.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char70 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char71 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char73 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char74 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char75 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char77 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char78 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char79 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char80 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array97);

  }

  @Test
  public void test434() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test434"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n4 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char5 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n4.getBundleCache$spigot_1_8();
    char char7 = i18n4.getColorChar();
    char char8 = i18n4.getColorChar();
    char char9 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    char char13 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n16.getBundleCache$spigot_1_8();
    char char19 = i18n16.getColorChar();
    char char20 = i18n16.getColorChar();
    char char21 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n23.getBundleCache$spigot_1_8();
    char char26 = i18n23.getColorChar();
    char char27 = i18n23.getColorChar();
    char char28 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n23.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n23.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    char char33 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n31.getBundleCache$spigot_1_8();
    char char35 = i18n31.getColorChar();
    char char36 = i18n31.getColorChar();
    char char37 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n38 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char39 = i18n38.getColorChar();
    char char40 = i18n38.getColorChar();
    char char41 = i18n38.getColorChar();
    char char42 = i18n38.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n43 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache44 = i18n43.getBundleCache$spigot_1_8();
    java.lang.String[] str_array45 = new java.lang.String[] {  };
    java.lang.String[] str_array47 = i18n43.getStrings(str_array45, "hi!");
    java.lang.String[] str_array49 = i18n38.getStrings(str_array47, "GMCrx");
    java.lang.String[] str_array51 = i18n31.getStrings(str_array47, "friends");
    java.lang.String[] str_array53 = i18n23.getStrings(str_array51, "GMCt");
    java.lang.String[] str_array55 = i18n16.getStrings(str_array51, "friend");
    gtlp.groundmc.lobby.util.I18n i18n56 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char57 = i18n56.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache58 = i18n56.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache59 = i18n56.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache60 = i18n56.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache61 = i18n56.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n62 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char63 = i18n62.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache64 = i18n62.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache65 = i18n62.getBundleCache$spigot_1_8();
    char char66 = i18n62.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n67 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char68 = i18n67.getColorChar();
    char char69 = i18n67.getColorChar();
    char char70 = i18n67.getColorChar();
    char char71 = i18n67.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n72 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache73 = i18n72.getBundleCache$spigot_1_8();
    java.lang.String[] str_array74 = new java.lang.String[] {  };
    java.lang.String[] str_array76 = i18n72.getStrings(str_array74, "hi!");
    java.lang.String[] str_array78 = i18n67.getStrings(str_array76, "GMCrx");
    java.lang.String[] str_array80 = i18n62.getStrings(str_array76, "GMC");
    java.lang.String[] str_array82 = i18n56.getStrings(str_array76, "GMCw");
    java.lang.String[] str_array84 = i18n16.getStrings(str_array82, "groundmc.lobby.admin");
    java.lang.String[] str_array86 = i18n11.getStrings(str_array82, "GMCry");
    java.lang.String[] str_array88 = i18n4.getStrings(str_array86, "groundmc.lobby.silent");
    java.util.Locale locale89 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array90 = i18n0.getStrings(str_array88, locale89);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char69 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char70 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char71 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);

  }

  @Test
  public void test435() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test435"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    java.lang.String str6 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender7 = null;
    org.bukkit.command.Command command8 = null;
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n10.getBundleCache$spigot_1_8();
    char char14 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    char char17 = i18n15.getColorChar();
    char char18 = i18n15.getColorChar();
    char char19 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n20.getBundleCache$spigot_1_8();
    java.lang.String[] str_array22 = new java.lang.String[] {  };
    java.lang.String[] str_array24 = i18n20.getStrings(str_array22, "hi!");
    java.lang.String[] str_array26 = i18n15.getStrings(str_array24, "GMCrx");
    java.lang.String[] str_array28 = i18n10.getStrings(str_array24, "GMC");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str29 = commandFriends0.getTabCompletion(commandSender7, command8, "friends", str_array24);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);

  }

  @Test
  public void test436() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test436"); }

    org.joda.time.DateTime dateTime2 = null;
    // The following exception was thrown during execution in test generation
    try {
    gtlp.groundmc.lobby.Relationship relationship3 = new gtlp.groundmc.lobby.Relationship("groundmc.lobby.vanish", "GMCz", dateTime2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test437() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test437"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    java.lang.String str8 = commandVanish0.getName();
    java.lang.String str9 = commandVanish0.getName();
    java.lang.String str10 = commandVanish0.getName();
    java.lang.String str11 = commandVanish0.getName();
    java.lang.String str12 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender13 = null;
    org.bukkit.command.Command command14 = null;
    java.lang.String[] str_array20 = new java.lang.String[] { "groundmc.lobby.admin", "GMCt", "groundmc.lobby.hide_players", "friends" };
    // The following exception was thrown during execution in test generation
    try {
    boolean b21 = commandVanish0.execute(commandSender13, command14, "vanish", str_array20);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "vanish"+ "'", str9.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "vanish"+ "'", str10.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "vanish"+ "'", str11.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "vanish"+ "'", str12.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);

  }

  @Test
  public void test438() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test438"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender4 = null;
    org.bukkit.command.Command command5 = null;
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char8 = i18n7.getColorChar();
    char char9 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n7.getBundleCache$spigot_1_8();
    char char12 = i18n7.getColorChar();
    char char13 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    char char16 = i18n14.getColorChar();
    char char17 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    char char21 = i18n19.getColorChar();
    char char22 = i18n19.getColorChar();
    char char23 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n24.getBundleCache$spigot_1_8();
    java.lang.String[] str_array26 = new java.lang.String[] {  };
    java.lang.String[] str_array28 = i18n24.getStrings(str_array26, "hi!");
    java.lang.String[] str_array30 = i18n19.getStrings(str_array28, "GMCrx");
    java.lang.String[] str_array32 = i18n14.getStrings(str_array30, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n33.getBundleCache$spigot_1_8();
    java.lang.String[] str_array35 = new java.lang.String[] {  };
    java.lang.String[] str_array37 = i18n33.getStrings(str_array35, "hi!");
    java.lang.String[] str_array39 = i18n14.getStrings(str_array37, "groundmc.lobby.hide_players");
    java.lang.String[] str_array41 = i18n7.getStrings(str_array39, "lang.lobby");
    // The following exception was thrown during execution in test generation
    try {
    boolean b42 = commandFriends0.execute(commandSender4, command5, "", str_array39);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);

  }

  @Test
  public void test439() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test439"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    java.lang.String str8 = commandFriend0.getName();
    java.lang.String str9 = commandFriend0.getName();
    java.lang.String str10 = commandFriend0.getName();
    java.lang.String str11 = commandFriend0.getName();
    java.lang.String str12 = commandFriend0.getName();
    java.lang.String str13 = commandFriend0.getName();
    java.lang.String str14 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender15 = null;
    org.bukkit.command.Command command16 = null;
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n18.getBundleCache$spigot_1_8();
    char char21 = i18n18.getColorChar();
    char char22 = i18n18.getColorChar();
    char char23 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    char char28 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n26.getBundleCache$spigot_1_8();
    char char30 = i18n26.getColorChar();
    char char31 = i18n26.getColorChar();
    char char32 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char34 = i18n33.getColorChar();
    char char35 = i18n33.getColorChar();
    char char36 = i18n33.getColorChar();
    char char37 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n38 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache39 = i18n38.getBundleCache$spigot_1_8();
    java.lang.String[] str_array40 = new java.lang.String[] {  };
    java.lang.String[] str_array42 = i18n38.getStrings(str_array40, "hi!");
    java.lang.String[] str_array44 = i18n33.getStrings(str_array42, "GMCrx");
    java.lang.String[] str_array46 = i18n26.getStrings(str_array42, "friends");
    java.lang.String[] str_array48 = i18n18.getStrings(str_array46, "GMCt");
    // The following exception was thrown during execution in test generation
    try {
    boolean b49 = commandFriend0.execute(commandSender15, command16, "GMCt", str_array46);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friend"+ "'", str8.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "friend"+ "'", str9.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "friend"+ "'", str10.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "friend"+ "'", str11.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "friend"+ "'", str12.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "friend"+ "'", str13.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "friend"+ "'", str14.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);

  }

  @Test
  public void test440() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test440"); }

    org.joda.time.DateTime dateTime2 = null;
    // The following exception was thrown during execution in test generation
    try {
    gtlp.groundmc.lobby.Relationship relationship3 = new gtlp.groundmc.lobby.Relationship("hi!", "", dateTime2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test441() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test441"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    java.lang.String str8 = commandVanish0.getName();
    java.lang.String str9 = commandVanish0.getName();
    java.lang.String str10 = commandVanish0.getName();
    java.lang.String str11 = commandVanish0.getName();
    java.lang.String str12 = commandVanish0.getName();
    java.lang.String str13 = commandVanish0.getName();
    java.lang.String str14 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender15 = null;
    org.bukkit.command.Command command16 = null;
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n18.getBundleCache$spigot_1_8();
    char char23 = i18n18.getColorChar();
    char char24 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    char char27 = i18n25.getColorChar();
    char char28 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n25.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char31 = i18n30.getColorChar();
    char char32 = i18n30.getColorChar();
    char char33 = i18n30.getColorChar();
    char char34 = i18n30.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n35 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n35.getBundleCache$spigot_1_8();
    java.lang.String[] str_array37 = new java.lang.String[] {  };
    java.lang.String[] str_array39 = i18n35.getStrings(str_array37, "hi!");
    java.lang.String[] str_array41 = i18n30.getStrings(str_array39, "GMCrx");
    java.lang.String[] str_array43 = i18n25.getStrings(str_array41, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n44 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache45 = i18n44.getBundleCache$spigot_1_8();
    java.lang.String[] str_array46 = new java.lang.String[] {  };
    java.lang.String[] str_array48 = i18n44.getStrings(str_array46, "hi!");
    java.lang.String[] str_array50 = i18n25.getStrings(str_array48, "groundmc.lobby.hide_players");
    java.lang.String[] str_array52 = i18n18.getStrings(str_array50, "lang.lobby");
    // The following exception was thrown during execution in test generation
    try {
    boolean b53 = commandVanish0.execute(commandSender15, command16, "GMCw", str_array52);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "vanish"+ "'", str9.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "vanish"+ "'", str10.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "vanish"+ "'", str11.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "vanish"+ "'", str12.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "vanish"+ "'", str13.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "vanish"+ "'", str14.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);

  }

  @Test
  public void test442() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test442"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender3 = null;
    org.bukkit.command.Command command4 = null;
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n6.getBundleCache$spigot_1_8();
    java.lang.String[] str_array8 = new java.lang.String[] {  };
    java.lang.String[] str_array10 = i18n6.getStrings(str_array8, "hi!");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str11 = commandLobby0.getTabCompletion(commandSender3, command4, "coins", str_array8);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);

  }

  @Test
  public void test443() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test443"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender6 = null;
    org.bukkit.command.Command command7 = null;
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    char char11 = i18n9.getColorChar();
    char char12 = i18n9.getColorChar();
    char char13 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n14.getBundleCache$spigot_1_8();
    java.lang.String[] str_array16 = new java.lang.String[] {  };
    java.lang.String[] str_array18 = i18n14.getStrings(str_array16, "hi!");
    java.lang.String[] str_array20 = i18n9.getStrings(str_array18, "GMCrx");
    char char21 = i18n9.getColorChar();
    char char22 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n23.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n23.getBundleCache$spigot_1_8();
    char char27 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char29 = i18n28.getColorChar();
    char char30 = i18n28.getColorChar();
    char char31 = i18n28.getColorChar();
    char char32 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n33.getBundleCache$spigot_1_8();
    java.lang.String[] str_array35 = new java.lang.String[] {  };
    java.lang.String[] str_array37 = i18n33.getStrings(str_array35, "hi!");
    java.lang.String[] str_array39 = i18n28.getStrings(str_array37, "GMCrx");
    java.lang.String[] str_array41 = i18n23.getStrings(str_array37, "GMC");
    java.lang.String[] str_array43 = i18n9.getStrings(str_array41, "GMCz");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str44 = commandFriend0.getTabCompletion(commandSender6, command7, "groundmc.lobby.silent", str_array41);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);

  }

  @Test
  public void test444() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test444"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender8 = null;
    org.bukkit.command.Command command9 = null;
    java.lang.String[] str_array11 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str12 = commandVanish0.getTabCompletion(commandSender8, command9, "GMCx", str_array11);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));

  }

  @Test
  public void test445() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test445"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    char char3 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    char char5 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char7 = i18n6.getColorChar();
    char char8 = i18n6.getColorChar();
    char char9 = i18n6.getColorChar();
    char char10 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n11.getBundleCache$spigot_1_8();
    java.lang.String[] str_array13 = new java.lang.String[] {  };
    java.lang.String[] str_array15 = i18n11.getStrings(str_array13, "hi!");
    java.lang.String[] str_array17 = i18n6.getStrings(str_array15, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n18.getBundleCache$spigot_1_8();
    char char22 = i18n18.getColorChar();
    char char23 = i18n18.getColorChar();
    char char24 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    char char27 = i18n25.getColorChar();
    char char28 = i18n25.getColorChar();
    char char29 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n30.getBundleCache$spigot_1_8();
    java.lang.String[] str_array32 = new java.lang.String[] {  };
    java.lang.String[] str_array34 = i18n30.getStrings(str_array32, "hi!");
    java.lang.String[] str_array36 = i18n25.getStrings(str_array34, "GMCrx");
    java.lang.String[] str_array38 = i18n18.getStrings(str_array34, "friends");
    java.lang.String[] str_array40 = i18n6.getStrings(str_array38, "");
    java.lang.String[] str_array42 = i18n0.getStrings(str_array38, "GMCw");
    char char43 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache44 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char46 = i18n45.getColorChar();
    char char47 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache48 = i18n45.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache49 = i18n45.getBundleCache$spigot_1_8();
    char char50 = i18n45.getColorChar();
    char char51 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n52 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char53 = i18n52.getColorChar();
    char char54 = i18n52.getColorChar();
    char char55 = i18n52.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache56 = i18n52.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n57 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char58 = i18n57.getColorChar();
    char char59 = i18n57.getColorChar();
    char char60 = i18n57.getColorChar();
    char char61 = i18n57.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n62 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache63 = i18n62.getBundleCache$spigot_1_8();
    java.lang.String[] str_array64 = new java.lang.String[] {  };
    java.lang.String[] str_array66 = i18n62.getStrings(str_array64, "hi!");
    java.lang.String[] str_array68 = i18n57.getStrings(str_array66, "GMCrx");
    java.lang.String[] str_array70 = i18n52.getStrings(str_array68, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n71 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache72 = i18n71.getBundleCache$spigot_1_8();
    java.lang.String[] str_array73 = new java.lang.String[] {  };
    java.lang.String[] str_array75 = i18n71.getStrings(str_array73, "hi!");
    java.lang.String[] str_array77 = i18n52.getStrings(str_array75, "groundmc.lobby.hide_players");
    java.lang.String[] str_array79 = i18n45.getStrings(str_array77, "lang.lobby");
    java.lang.String[] str_array81 = i18n0.getStrings(str_array77, "lobby");
    java.util.Locale locale83 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str84 = i18n0.getString("GMCry", locale83);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);

  }

  @Test
  public void test446() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test446"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender5 = null;
    org.bukkit.command.Command command6 = null;
    gtlp.groundmc.lobby.util.I18n i18n8 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char9 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n8.getBundleCache$spigot_1_8();
    char char11 = i18n8.getColorChar();
    char char12 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n8.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n20.getBundleCache$spigot_1_8();
    char char24 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    char char27 = i18n25.getColorChar();
    char char28 = i18n25.getColorChar();
    char char29 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n30.getBundleCache$spigot_1_8();
    java.lang.String[] str_array32 = new java.lang.String[] {  };
    java.lang.String[] str_array34 = i18n30.getStrings(str_array32, "hi!");
    java.lang.String[] str_array36 = i18n25.getStrings(str_array34, "GMCrx");
    java.lang.String[] str_array38 = i18n20.getStrings(str_array34, "GMC");
    java.lang.String[] str_array40 = i18n14.getStrings(str_array34, "GMCw");
    java.lang.String[] str_array42 = i18n8.getStrings(str_array40, "GMCy");
    // The following exception was thrown during execution in test generation
    try {
    boolean b43 = commandCoins0.execute(commandSender5, command6, "GMCw", str_array40);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);

  }

  @Test
  public void test447() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test447"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    char char4 = i18n0.getColorChar();
    char char5 = i18n0.getColorChar();
    char char6 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char8 = i18n7.getColorChar();
    char char9 = i18n7.getColorChar();
    char char10 = i18n7.getColorChar();
    char char11 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n12.getBundleCache$spigot_1_8();
    java.lang.String[] str_array14 = new java.lang.String[] {  };
    java.lang.String[] str_array16 = i18n12.getStrings(str_array14, "hi!");
    java.lang.String[] str_array18 = i18n7.getStrings(str_array16, "GMCrx");
    java.lang.String[] str_array20 = i18n0.getStrings(str_array16, "friends");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n0.getBundleCache$spigot_1_8();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str26 = i18n0.getString("GMCt", "groundmc.lobby.admin");
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);

  }

  @Test
  public void test448() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test448"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender4 = null;
    org.bukkit.command.Command command5 = null;
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char8 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n7.getBundleCache$spigot_1_8();
    char char10 = i18n7.getColorChar();
    char char11 = i18n7.getColorChar();
    char char12 = i18n7.getColorChar();
    char char13 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n14.getBundleCache$spigot_1_8();
    java.lang.String[] str_array16 = new java.lang.String[] {  };
    java.lang.String[] str_array18 = i18n14.getStrings(str_array16, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n14.getBundleCache$spigot_1_8();
    char char21 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n22.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n22.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n26.getBundleCache$spigot_1_8();
    java.lang.String[] str_array28 = new java.lang.String[] {  };
    java.lang.String[] str_array30 = i18n26.getStrings(str_array28, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n26.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char33 = i18n32.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n32.getBundleCache$spigot_1_8();
    char char35 = i18n32.getColorChar();
    char char36 = i18n32.getColorChar();
    char char37 = i18n32.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache38 = i18n32.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n39 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char40 = i18n39.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache41 = i18n39.getBundleCache$spigot_1_8();
    char char42 = i18n39.getColorChar();
    char char43 = i18n39.getColorChar();
    char char44 = i18n39.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache45 = i18n39.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache46 = i18n39.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n47 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char48 = i18n47.getColorChar();
    char char49 = i18n47.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache50 = i18n47.getBundleCache$spigot_1_8();
    char char51 = i18n47.getColorChar();
    char char52 = i18n47.getColorChar();
    char char53 = i18n47.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n54 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char55 = i18n54.getColorChar();
    char char56 = i18n54.getColorChar();
    char char57 = i18n54.getColorChar();
    char char58 = i18n54.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n59 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache60 = i18n59.getBundleCache$spigot_1_8();
    java.lang.String[] str_array61 = new java.lang.String[] {  };
    java.lang.String[] str_array63 = i18n59.getStrings(str_array61, "hi!");
    java.lang.String[] str_array65 = i18n54.getStrings(str_array63, "GMCrx");
    java.lang.String[] str_array67 = i18n47.getStrings(str_array63, "friends");
    java.lang.String[] str_array69 = i18n39.getStrings(str_array67, "GMCt");
    java.lang.String[] str_array71 = i18n32.getStrings(str_array67, "friend");
    java.lang.String[] str_array73 = i18n26.getStrings(str_array67, "GMCt");
    java.lang.String[] str_array75 = i18n22.getStrings(str_array67, "groundmc.lobby.admin");
    java.lang.String[] str_array77 = i18n14.getStrings(str_array75, "lang.lobby");
    java.lang.String[] str_array79 = i18n7.getStrings(str_array75, "GMCry");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str80 = commandFriends0.getTabCompletion(commandSender4, command5, "GMCx", str_array75);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char56 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);

  }

  @Test
  public void test449() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test449"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    java.lang.String str7 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender8 = null;
    org.bukkit.command.Command command9 = null;
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    char char13 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n11.getBundleCache$spigot_1_8();
    char char15 = i18n11.getColorChar();
    char char16 = i18n11.getColorChar();
    char char17 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    char char21 = i18n18.getColorChar();
    char char22 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n23.getBundleCache$spigot_1_8();
    java.lang.String[] str_array25 = new java.lang.String[] {  };
    java.lang.String[] str_array27 = i18n23.getStrings(str_array25, "hi!");
    java.lang.String[] str_array29 = i18n18.getStrings(str_array27, "GMCrx");
    java.lang.String[] str_array31 = i18n11.getStrings(str_array27, "friends");
    // The following exception was thrown during execution in test generation
    try {
    boolean b32 = commandLobby0.execute(commandSender8, command9, "friend", str_array31);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "lobby"+ "'", str7.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);

  }

  @Test
  public void test450() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test450"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char7 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n6.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n6.getBundleCache$spigot_1_8();
    char char10 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    char char13 = i18n11.getColorChar();
    char char14 = i18n11.getColorChar();
    char char15 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n16.getBundleCache$spigot_1_8();
    java.lang.String[] str_array18 = new java.lang.String[] {  };
    java.lang.String[] str_array20 = i18n16.getStrings(str_array18, "hi!");
    java.lang.String[] str_array22 = i18n11.getStrings(str_array20, "GMCrx");
    java.lang.String[] str_array24 = i18n6.getStrings(str_array20, "GMC");
    java.lang.String[] str_array26 = i18n0.getStrings(str_array20, "GMCw");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n0.getBundleCache$spigot_1_8();
    java.lang.String str28 = resourceBundleCache27.getName();
    java.lang.String str29 = resourceBundleCache27.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "lang.lobby"+ "'", str28.equals("lang.lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "lang.lobby"+ "'", str29.equals("lang.lobby"));

  }

  @Test
  public void test451() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test451"); }

    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = new gtlp.groundmc.lobby.util.I18n.ResourceBundleCache("lobby");
    java.lang.String str2 = resourceBundleCache1.getName();
    java.util.Locale locale4 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str5 = resourceBundleCache1.get("GMCt", locale4);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));

  }

  @Test
  public void test452() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test452"); }

    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = new gtlp.groundmc.lobby.util.I18n.ResourceBundleCache("GMCt");
    java.lang.String str2 = resourceBundleCache1.getName();
    java.util.concurrent.ConcurrentHashMap<java.util.Locale,java.util.ResourceBundle> concurrenthashmap_locale_resourceBundle3 = resourceBundleCache1.getBackingMap$spigot_1_8();
    java.lang.String str4 = resourceBundleCache1.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "GMCt"+ "'", str2.equals("GMCt"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(concurrenthashmap_locale_resourceBundle3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "GMCt"+ "'", str4.equals("GMCt"));

  }

  @Test
  public void test453() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test453"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    char char5 = i18n0.getColorChar();
    java.util.Locale locale7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = i18n0.getString("groundmc.lobby.admin", locale7);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');

  }

  @Test
  public void test454() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test454"); }

    org.joda.time.DateTime dateTime2 = null;
    // The following exception was thrown during execution in test generation
    try {
    gtlp.groundmc.lobby.Relationship relationship3 = new gtlp.groundmc.lobby.Relationship("GMCsilent", "GMC", dateTime2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test455() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test455"); }

    org.joda.time.DateTime dateTime2 = null;
    // The following exception was thrown during execution in test generation
    try {
    gtlp.groundmc.lobby.Relationship relationship3 = new gtlp.groundmc.lobby.Relationship("", "GMCry", dateTime2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test456() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test456"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    char char3 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n5.getBundleCache$spigot_1_8();
    char char8 = i18n5.getColorChar();
    char char9 = i18n5.getColorChar();
    char char10 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n5.getBundleCache$spigot_1_8();
    char char12 = i18n5.getColorChar();
    char char13 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n14.getBundleCache$spigot_1_8();
    char char17 = i18n14.getColorChar();
    char char18 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n14.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n26.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n26.getBundleCache$spigot_1_8();
    char char30 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    char char33 = i18n31.getColorChar();
    char char34 = i18n31.getColorChar();
    char char35 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n36.getBundleCache$spigot_1_8();
    java.lang.String[] str_array38 = new java.lang.String[] {  };
    java.lang.String[] str_array40 = i18n36.getStrings(str_array38, "hi!");
    java.lang.String[] str_array42 = i18n31.getStrings(str_array40, "GMCrx");
    java.lang.String[] str_array44 = i18n26.getStrings(str_array40, "GMC");
    java.lang.String[] str_array46 = i18n20.getStrings(str_array40, "GMCw");
    java.lang.String[] str_array48 = i18n14.getStrings(str_array46, "GMCy");
    gtlp.groundmc.lobby.util.I18n i18n49 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char50 = i18n49.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n49.getBundleCache$spigot_1_8();
    char char52 = i18n49.getColorChar();
    char char53 = i18n49.getColorChar();
    char char54 = i18n49.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache55 = i18n49.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache56 = i18n49.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n57 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char58 = i18n57.getColorChar();
    char char59 = i18n57.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache60 = i18n57.getBundleCache$spigot_1_8();
    char char61 = i18n57.getColorChar();
    char char62 = i18n57.getColorChar();
    char char63 = i18n57.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n64 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char65 = i18n64.getColorChar();
    char char66 = i18n64.getColorChar();
    char char67 = i18n64.getColorChar();
    char char68 = i18n64.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n69 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache70 = i18n69.getBundleCache$spigot_1_8();
    java.lang.String[] str_array71 = new java.lang.String[] {  };
    java.lang.String[] str_array73 = i18n69.getStrings(str_array71, "hi!");
    java.lang.String[] str_array75 = i18n64.getStrings(str_array73, "GMCrx");
    java.lang.String[] str_array77 = i18n57.getStrings(str_array73, "friends");
    java.lang.String[] str_array79 = i18n49.getStrings(str_array77, "GMCt");
    java.lang.String[] str_array81 = i18n14.getStrings(str_array79, "coins");
    java.lang.String[] str_array83 = i18n5.getStrings(str_array79, "GMCw");
    java.lang.String[] str_array85 = i18n0.getStrings(str_array83, "groundmc.lobby.admin");
    java.util.Locale locale87 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str88 = i18n0.getString("friends", locale87);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char62 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char67 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);

  }

  @Test
  public void test457() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test457"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    java.lang.String str9 = commandCoins0.getName();
    java.lang.String str10 = commandCoins0.getName();
    java.lang.String str11 = commandCoins0.getName();
    java.lang.String str12 = commandCoins0.getName();
    java.lang.String str13 = commandCoins0.getName();
    java.lang.String str14 = commandCoins0.getName();
    java.lang.String str15 = commandCoins0.getName();
    java.lang.String str16 = commandCoins0.getName();
    java.lang.String str17 = commandCoins0.getName();
    java.lang.String str18 = commandCoins0.getName();
    java.util.Locale locale19 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array20 = commandCoins0.getCommandHelp(locale19);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "coins"+ "'", str10.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "coins"+ "'", str11.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "coins"+ "'", str12.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "coins"+ "'", str13.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "coins"+ "'", str14.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "coins"+ "'", str15.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "coins"+ "'", str16.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "coins"+ "'", str17.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "coins"+ "'", str18.equals("coins"));

  }

  @Test
  public void test458() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test458"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    java.lang.String str8 = commandFriend0.getName();
    java.lang.String str9 = commandFriend0.getName();
    java.lang.String str10 = commandFriend0.getName();
    java.lang.String str11 = commandFriend0.getName();
    java.lang.String str12 = commandFriend0.getName();
    java.lang.String str13 = commandFriend0.getName();
    java.lang.String str14 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender15 = null;
    org.bukkit.command.Command command16 = null;
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n18.getBundleCache$spigot_1_8();
    char char21 = i18n18.getColorChar();
    char char22 = i18n18.getColorChar();
    char char23 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n24.getBundleCache$spigot_1_8();
    java.lang.String[] str_array26 = new java.lang.String[] {  };
    java.lang.String[] str_array28 = i18n24.getStrings(str_array26, "hi!");
    java.lang.String[] str_array30 = i18n18.getStrings(str_array28, "GMCy");
    char char31 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char33 = i18n32.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n32.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n32.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n36.getBundleCache$spigot_1_8();
    java.lang.String[] str_array38 = new java.lang.String[] {  };
    java.lang.String[] str_array40 = i18n36.getStrings(str_array38, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache41 = i18n36.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n42 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char43 = i18n42.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache44 = i18n42.getBundleCache$spigot_1_8();
    char char45 = i18n42.getColorChar();
    char char46 = i18n42.getColorChar();
    char char47 = i18n42.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache48 = i18n42.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n49 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char50 = i18n49.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n49.getBundleCache$spigot_1_8();
    char char52 = i18n49.getColorChar();
    char char53 = i18n49.getColorChar();
    char char54 = i18n49.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache55 = i18n49.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache56 = i18n49.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n57 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char58 = i18n57.getColorChar();
    char char59 = i18n57.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache60 = i18n57.getBundleCache$spigot_1_8();
    char char61 = i18n57.getColorChar();
    char char62 = i18n57.getColorChar();
    char char63 = i18n57.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n64 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char65 = i18n64.getColorChar();
    char char66 = i18n64.getColorChar();
    char char67 = i18n64.getColorChar();
    char char68 = i18n64.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n69 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache70 = i18n69.getBundleCache$spigot_1_8();
    java.lang.String[] str_array71 = new java.lang.String[] {  };
    java.lang.String[] str_array73 = i18n69.getStrings(str_array71, "hi!");
    java.lang.String[] str_array75 = i18n64.getStrings(str_array73, "GMCrx");
    java.lang.String[] str_array77 = i18n57.getStrings(str_array73, "friends");
    java.lang.String[] str_array79 = i18n49.getStrings(str_array77, "GMCt");
    java.lang.String[] str_array81 = i18n42.getStrings(str_array77, "friend");
    java.lang.String[] str_array83 = i18n36.getStrings(str_array77, "GMCt");
    java.lang.String[] str_array85 = i18n32.getStrings(str_array77, "groundmc.lobby.admin");
    java.lang.String[] str_array87 = i18n18.getStrings(str_array77, "GMCz");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str88 = commandFriend0.getTabCompletion(commandSender15, command16, "groundmc.lobby.silent", str_array87);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friend"+ "'", str8.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "friend"+ "'", str9.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "friend"+ "'", str10.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "friend"+ "'", str11.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "friend"+ "'", str12.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "friend"+ "'", str13.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "friend"+ "'", str14.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char62 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char67 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);

  }

  @Test
  public void test459() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test459"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char8 = i18n7.getColorChar();
    char char9 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n7.getBundleCache$spigot_1_8();
    char char11 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n7.getBundleCache$spigot_1_8();
    char char13 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n14.getBundleCache$spigot_1_8();
    char char17 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n14.getBundleCache$spigot_1_8();
    char char19 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    char char22 = i18n20.getColorChar();
    char char23 = i18n20.getColorChar();
    char char24 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n25.getBundleCache$spigot_1_8();
    java.lang.String[] str_array27 = new java.lang.String[] {  };
    java.lang.String[] str_array29 = i18n25.getStrings(str_array27, "hi!");
    java.lang.String[] str_array31 = i18n20.getStrings(str_array29, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n32 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char33 = i18n32.getColorChar();
    char char34 = i18n32.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n32.getBundleCache$spigot_1_8();
    char char36 = i18n32.getColorChar();
    char char37 = i18n32.getColorChar();
    char char38 = i18n32.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n39 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char40 = i18n39.getColorChar();
    char char41 = i18n39.getColorChar();
    char char42 = i18n39.getColorChar();
    char char43 = i18n39.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n44 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache45 = i18n44.getBundleCache$spigot_1_8();
    java.lang.String[] str_array46 = new java.lang.String[] {  };
    java.lang.String[] str_array48 = i18n44.getStrings(str_array46, "hi!");
    java.lang.String[] str_array50 = i18n39.getStrings(str_array48, "GMCrx");
    java.lang.String[] str_array52 = i18n32.getStrings(str_array48, "friends");
    java.lang.String[] str_array54 = i18n20.getStrings(str_array52, "");
    java.lang.String[] str_array56 = i18n14.getStrings(str_array52, "GMCw");
    java.lang.String[] str_array58 = i18n7.getStrings(str_array56, "GMC");
    java.util.Locale locale59 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array60 = i18n0.getStrings(str_array58, locale59);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);

  }

  @Test
  public void test460() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test460"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    char char4 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = i18n0.getString("groundmc.lobby.admin", "GMChide");
      org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);

  }

  @Test
  public void test461() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test461"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    java.lang.String str9 = commandCoins0.getName();
    java.lang.String str10 = commandCoins0.getName();
    java.lang.String str11 = commandCoins0.getName();
    java.lang.String str12 = commandCoins0.getName();
    java.lang.String str13 = commandCoins0.getName();
    java.lang.String str14 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender15 = null;
    org.bukkit.command.Command command16 = null;
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    char char24 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n22.getBundleCache$spigot_1_8();
    char char26 = i18n22.getColorChar();
    char char27 = i18n22.getColorChar();
    char char28 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char30 = i18n29.getColorChar();
    char char31 = i18n29.getColorChar();
    char char32 = i18n29.getColorChar();
    char char33 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n34 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n34.getBundleCache$spigot_1_8();
    java.lang.String[] str_array36 = new java.lang.String[] {  };
    java.lang.String[] str_array38 = i18n34.getStrings(str_array36, "hi!");
    java.lang.String[] str_array40 = i18n29.getStrings(str_array38, "GMCrx");
    java.lang.String[] str_array42 = i18n22.getStrings(str_array38, "friends");
    java.lang.String[] str_array44 = i18n20.getStrings(str_array42, "vanish");
    java.lang.String[] str_array46 = i18n18.getStrings(str_array42, "GMCx");
    // The following exception was thrown during execution in test generation
    try {
    boolean b47 = commandCoins0.execute(commandSender15, command16, "GMCw", str_array42);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "coins"+ "'", str10.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "coins"+ "'", str11.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "coins"+ "'", str12.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "coins"+ "'", str13.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "coins"+ "'", str14.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);

  }

  @Test
  public void test462() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test462"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender6 = null;
    org.bukkit.command.Command command7 = null;
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n9.getBundleCache$spigot_1_8();
    char char12 = i18n9.getColorChar();
    char char13 = i18n9.getColorChar();
    char char14 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n9.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n9.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    char char19 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n17.getBundleCache$spigot_1_8();
    char char21 = i18n17.getColorChar();
    char char22 = i18n17.getColorChar();
    char char23 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    char char26 = i18n24.getColorChar();
    char char27 = i18n24.getColorChar();
    char char28 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n29.getBundleCache$spigot_1_8();
    java.lang.String[] str_array31 = new java.lang.String[] {  };
    java.lang.String[] str_array33 = i18n29.getStrings(str_array31, "hi!");
    java.lang.String[] str_array35 = i18n24.getStrings(str_array33, "GMCrx");
    java.lang.String[] str_array37 = i18n17.getStrings(str_array33, "friends");
    java.lang.String[] str_array39 = i18n9.getStrings(str_array37, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char41 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n40.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache43 = i18n40.getBundleCache$spigot_1_8();
    char char44 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char46 = i18n45.getColorChar();
    char char47 = i18n45.getColorChar();
    char char48 = i18n45.getColorChar();
    char char49 = i18n45.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n50 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n50.getBundleCache$spigot_1_8();
    java.lang.String[] str_array52 = new java.lang.String[] {  };
    java.lang.String[] str_array54 = i18n50.getStrings(str_array52, "hi!");
    java.lang.String[] str_array56 = i18n45.getStrings(str_array54, "GMCrx");
    java.lang.String[] str_array58 = i18n40.getStrings(str_array54, "GMC");
    java.lang.String[] str_array60 = i18n9.getStrings(str_array58, "groundmc.lobby.vanish");
    // The following exception was thrown during execution in test generation
    try {
    boolean b61 = commandFriends0.execute(commandSender6, command7, "GMChide", str_array60);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);

  }

  @Test
  public void test463() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test463"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    java.lang.String str9 = commandCoins0.getName();
    java.lang.String str10 = commandCoins0.getName();
    java.lang.String str11 = commandCoins0.getName();
    java.lang.String str12 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender13 = null;
    org.bukkit.command.Command command14 = null;
    java.lang.String[] str_array16 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str17 = commandCoins0.getTabCompletion(commandSender13, command14, "lang.lobby", str_array16);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "coins"+ "'", str10.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "coins"+ "'", str11.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "coins"+ "'", str12.equals("coins"));

  }

  @Test
  public void test464() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test464"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender6 = null;
    org.bukkit.command.Command command7 = null;
    java.lang.String[] str_array9 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str10 = commandFriends0.getTabCompletion(commandSender6, command7, "groundmc.lobby.vanish", str_array9);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));

  }

  @Test
  public void test465() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test465"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    java.lang.String str9 = commandCoins0.getName();
    java.lang.String str10 = commandCoins0.getName();
    java.lang.String str11 = commandCoins0.getName();
    java.lang.String str12 = commandCoins0.getName();
    java.lang.String str13 = commandCoins0.getName();
    java.lang.String str14 = commandCoins0.getName();
    java.lang.String str15 = commandCoins0.getName();
    java.lang.String str16 = commandCoins0.getName();
    java.lang.String str17 = commandCoins0.getName();
    java.util.Locale locale18 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array19 = commandCoins0.getCommandHelp(locale18);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "coins"+ "'", str10.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "coins"+ "'", str11.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "coins"+ "'", str12.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "coins"+ "'", str13.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "coins"+ "'", str14.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "coins"+ "'", str15.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "coins"+ "'", str16.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "coins"+ "'", str17.equals("coins"));

  }

  @Test
  public void test466() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test466"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    java.util.Locale locale7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = resourceBundleCache5.get("GMCy", locale7);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);

  }

  @Test
  public void test467() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test467"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender7 = null;
    org.bukkit.command.Command command8 = null;
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n10.getBundleCache$spigot_1_8();
    char char13 = i18n10.getColorChar();
    char char14 = i18n10.getColorChar();
    char char15 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n16.getBundleCache$spigot_1_8();
    java.lang.String[] str_array18 = new java.lang.String[] {  };
    java.lang.String[] str_array20 = i18n16.getStrings(str_array18, "hi!");
    java.lang.String[] str_array22 = i18n10.getStrings(str_array20, "GMCy");
    char char23 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n24.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n24.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n28.getBundleCache$spigot_1_8();
    java.lang.String[] str_array30 = new java.lang.String[] {  };
    java.lang.String[] str_array32 = i18n28.getStrings(str_array30, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache33 = i18n28.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n34 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char35 = i18n34.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n34.getBundleCache$spigot_1_8();
    char char37 = i18n34.getColorChar();
    char char38 = i18n34.getColorChar();
    char char39 = i18n34.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache40 = i18n34.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n41 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char42 = i18n41.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache43 = i18n41.getBundleCache$spigot_1_8();
    char char44 = i18n41.getColorChar();
    char char45 = i18n41.getColorChar();
    char char46 = i18n41.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache47 = i18n41.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache48 = i18n41.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n49 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char50 = i18n49.getColorChar();
    char char51 = i18n49.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache52 = i18n49.getBundleCache$spigot_1_8();
    char char53 = i18n49.getColorChar();
    char char54 = i18n49.getColorChar();
    char char55 = i18n49.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n56 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char57 = i18n56.getColorChar();
    char char58 = i18n56.getColorChar();
    char char59 = i18n56.getColorChar();
    char char60 = i18n56.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n61 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache62 = i18n61.getBundleCache$spigot_1_8();
    java.lang.String[] str_array63 = new java.lang.String[] {  };
    java.lang.String[] str_array65 = i18n61.getStrings(str_array63, "hi!");
    java.lang.String[] str_array67 = i18n56.getStrings(str_array65, "GMCrx");
    java.lang.String[] str_array69 = i18n49.getStrings(str_array65, "friends");
    java.lang.String[] str_array71 = i18n41.getStrings(str_array69, "GMCt");
    java.lang.String[] str_array73 = i18n34.getStrings(str_array69, "friend");
    java.lang.String[] str_array75 = i18n28.getStrings(str_array69, "GMCt");
    java.lang.String[] str_array77 = i18n24.getStrings(str_array69, "groundmc.lobby.admin");
    java.lang.String[] str_array79 = i18n10.getStrings(str_array69, "GMCz");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str80 = commandFriend0.getTabCompletion(commandSender7, command8, "groundmc.lobby.vanish", str_array69);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);

  }

  @Test
  public void test468() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test468"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache5 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n0.getBundleCache$spigot_1_8();
    char char7 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n8 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char9 = i18n8.getColorChar();
    char char10 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n8.getBundleCache$spigot_1_8();
    char char12 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n8.getBundleCache$spigot_1_8();
    char char14 = i18n8.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n15.getBundleCache$spigot_1_8();
    char char18 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n15.getBundleCache$spigot_1_8();
    char char20 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char22 = i18n21.getColorChar();
    char char23 = i18n21.getColorChar();
    char char24 = i18n21.getColorChar();
    char char25 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n26.getBundleCache$spigot_1_8();
    java.lang.String[] str_array28 = new java.lang.String[] {  };
    java.lang.String[] str_array30 = i18n26.getStrings(str_array28, "hi!");
    java.lang.String[] str_array32 = i18n21.getStrings(str_array30, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char34 = i18n33.getColorChar();
    char char35 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n33.getBundleCache$spigot_1_8();
    char char37 = i18n33.getColorChar();
    char char38 = i18n33.getColorChar();
    char char39 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char41 = i18n40.getColorChar();
    char char42 = i18n40.getColorChar();
    char char43 = i18n40.getColorChar();
    char char44 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache46 = i18n45.getBundleCache$spigot_1_8();
    java.lang.String[] str_array47 = new java.lang.String[] {  };
    java.lang.String[] str_array49 = i18n45.getStrings(str_array47, "hi!");
    java.lang.String[] str_array51 = i18n40.getStrings(str_array49, "GMCrx");
    java.lang.String[] str_array53 = i18n33.getStrings(str_array49, "friends");
    java.lang.String[] str_array55 = i18n21.getStrings(str_array53, "");
    java.lang.String[] str_array57 = i18n15.getStrings(str_array53, "GMCw");
    java.lang.String[] str_array59 = i18n8.getStrings(str_array57, "GMC");
    java.util.Locale locale60 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array61 = i18n0.getStrings(str_array57, locale60);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);

  }

  @Test
  public void test469() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test469"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender2 = null;
    org.bukkit.command.Command command3 = null;
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    char char7 = i18n5.getColorChar();
    char char8 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n5.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    char char12 = i18n10.getColorChar();
    char char13 = i18n10.getColorChar();
    char char14 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n15.getBundleCache$spigot_1_8();
    java.lang.String[] str_array17 = new java.lang.String[] {  };
    java.lang.String[] str_array19 = i18n15.getStrings(str_array17, "hi!");
    java.lang.String[] str_array21 = i18n10.getStrings(str_array19, "GMCrx");
    java.lang.String[] str_array23 = i18n5.getStrings(str_array21, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n24.getBundleCache$spigot_1_8();
    java.lang.String[] str_array26 = new java.lang.String[] {  };
    java.lang.String[] str_array28 = i18n24.getStrings(str_array26, "hi!");
    java.lang.String[] str_array30 = i18n5.getStrings(str_array28, "groundmc.lobby.hide_players");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str31 = commandVanish0.getTabCompletion(commandSender2, command3, "GMCx", str_array28);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);

  }

  @Test
  public void test470() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test470"); }

    org.joda.time.DateTime dateTime2 = null;
    // The following exception was thrown during execution in test generation
    try {
    gtlp.groundmc.lobby.Relationship relationship3 = new gtlp.groundmc.lobby.Relationship("GMC", "friends", dateTime2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test471() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test471"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    org.bukkit.command.CommandSender commandSender1 = null;
    org.bukkit.command.Command command2 = null;
    gtlp.groundmc.lobby.util.I18n i18n4 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char5 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n10.getBundleCache$spigot_1_8();
    char char14 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    char char17 = i18n15.getColorChar();
    char char18 = i18n15.getColorChar();
    char char19 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n20.getBundleCache$spigot_1_8();
    java.lang.String[] str_array22 = new java.lang.String[] {  };
    java.lang.String[] str_array24 = i18n20.getStrings(str_array22, "hi!");
    java.lang.String[] str_array26 = i18n15.getStrings(str_array24, "GMCrx");
    java.lang.String[] str_array28 = i18n10.getStrings(str_array24, "GMC");
    java.lang.String[] str_array30 = i18n4.getStrings(str_array24, "GMCw");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char34 = i18n33.getColorChar();
    char char35 = i18n33.getColorChar();
    char char36 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n33.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n38 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char39 = i18n38.getColorChar();
    char char40 = i18n38.getColorChar();
    char char41 = i18n38.getColorChar();
    char char42 = i18n38.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n43 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache44 = i18n43.getBundleCache$spigot_1_8();
    java.lang.String[] str_array45 = new java.lang.String[] {  };
    java.lang.String[] str_array47 = i18n43.getStrings(str_array45, "hi!");
    java.lang.String[] str_array49 = i18n38.getStrings(str_array47, "GMCrx");
    java.lang.String[] str_array51 = i18n33.getStrings(str_array49, "GMCt");
    java.lang.String[] str_array53 = i18n4.getStrings(str_array51, "hi!");
    // The following exception was thrown during execution in test generation
    try {
    boolean b54 = commandFriends0.execute(commandSender1, command2, "GMCw", str_array53);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);

  }

  @Test
  public void test472() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test472"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    char char3 = i18n0.getColorChar();
    char char4 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n5.getBundleCache$spigot_1_8();
    java.lang.String[] str_array7 = new java.lang.String[] {  };
    java.lang.String[] str_array9 = i18n5.getStrings(str_array7, "hi!");
    java.lang.String[] str_array11 = i18n0.getStrings(str_array9, "GMCrx");
    char char12 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n14.getBundleCache$spigot_1_8();
    java.lang.String[] str_array16 = new java.lang.String[] {  };
    java.lang.String[] str_array18 = i18n14.getStrings(str_array16, "hi!");
    java.lang.String[] str_array20 = i18n0.getStrings(str_array18, "GMCz");
    java.util.Locale locale22 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str23 = i18n0.getString("GMCrx", locale22);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);

  }

  @Test
  public void test473() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test473"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    org.bukkit.command.CommandSender commandSender1 = null;
    org.bukkit.command.Command command2 = null;
    gtlp.groundmc.lobby.util.I18n i18n4 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char5 = i18n4.getColorChar();
    char char6 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache7 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n9.getBundleCache$spigot_1_8();
    char char12 = i18n9.getColorChar();
    char char13 = i18n9.getColorChar();
    char char14 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n9.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n16.getBundleCache$spigot_1_8();
    char char19 = i18n16.getColorChar();
    char char20 = i18n16.getColorChar();
    char char21 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    char char26 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n24.getBundleCache$spigot_1_8();
    char char28 = i18n24.getColorChar();
    char char29 = i18n24.getColorChar();
    char char30 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    char char33 = i18n31.getColorChar();
    char char34 = i18n31.getColorChar();
    char char35 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n36.getBundleCache$spigot_1_8();
    java.lang.String[] str_array38 = new java.lang.String[] {  };
    java.lang.String[] str_array40 = i18n36.getStrings(str_array38, "hi!");
    java.lang.String[] str_array42 = i18n31.getStrings(str_array40, "GMCrx");
    java.lang.String[] str_array44 = i18n24.getStrings(str_array40, "friends");
    java.lang.String[] str_array46 = i18n16.getStrings(str_array44, "GMCt");
    java.lang.String[] str_array48 = i18n9.getStrings(str_array44, "friend");
    gtlp.groundmc.lobby.util.I18n i18n49 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char50 = i18n49.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache51 = i18n49.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache52 = i18n49.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache53 = i18n49.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache54 = i18n49.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n55 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char56 = i18n55.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache57 = i18n55.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache58 = i18n55.getBundleCache$spigot_1_8();
    char char59 = i18n55.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n60 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char61 = i18n60.getColorChar();
    char char62 = i18n60.getColorChar();
    char char63 = i18n60.getColorChar();
    char char64 = i18n60.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n65 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache66 = i18n65.getBundleCache$spigot_1_8();
    java.lang.String[] str_array67 = new java.lang.String[] {  };
    java.lang.String[] str_array69 = i18n65.getStrings(str_array67, "hi!");
    java.lang.String[] str_array71 = i18n60.getStrings(str_array69, "GMCrx");
    java.lang.String[] str_array73 = i18n55.getStrings(str_array69, "GMC");
    java.lang.String[] str_array75 = i18n49.getStrings(str_array69, "GMCw");
    java.lang.String[] str_array77 = i18n9.getStrings(str_array75, "groundmc.lobby.admin");
    java.lang.String[] str_array79 = i18n4.getStrings(str_array75, "GMCry");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str80 = commandLobby0.getTabCompletion(commandSender1, command2, "coins", str_array75);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char56 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char62 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char64 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);

  }

  @Test
  public void test474() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test474"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    java.lang.String str8 = commandVanish0.getName();
    java.lang.String str9 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender10 = null;
    org.bukkit.command.Command command11 = null;
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    char char15 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n13.getBundleCache$spigot_1_8();
    char char17 = i18n13.getColorChar();
    char char18 = i18n13.getColorChar();
    char char19 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char21 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n20.getBundleCache$spigot_1_8();
    char char23 = i18n20.getColorChar();
    char char24 = i18n20.getColorChar();
    char char25 = i18n20.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache26 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n28 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char29 = i18n28.getColorChar();
    char char30 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n28.getBundleCache$spigot_1_8();
    char char32 = i18n28.getColorChar();
    char char33 = i18n28.getColorChar();
    char char34 = i18n28.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n35 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char36 = i18n35.getColorChar();
    char char37 = i18n35.getColorChar();
    char char38 = i18n35.getColorChar();
    char char39 = i18n35.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache41 = i18n40.getBundleCache$spigot_1_8();
    java.lang.String[] str_array42 = new java.lang.String[] {  };
    java.lang.String[] str_array44 = i18n40.getStrings(str_array42, "hi!");
    java.lang.String[] str_array46 = i18n35.getStrings(str_array44, "GMCrx");
    java.lang.String[] str_array48 = i18n28.getStrings(str_array44, "friends");
    java.lang.String[] str_array50 = i18n20.getStrings(str_array48, "GMCt");
    java.lang.String[] str_array52 = i18n13.getStrings(str_array48, "groundmc.lobby.admin");
    // The following exception was thrown during execution in test generation
    try {
    boolean b53 = commandVanish0.execute(commandSender10, command11, "lang.lobby", str_array48);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "vanish"+ "'", str9.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array52);

  }

  @Test
  public void test475() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test475"); }

    org.joda.time.DateTime dateTime2 = null;
    // The following exception was thrown during execution in test generation
    try {
    gtlp.groundmc.lobby.Relationship relationship3 = new gtlp.groundmc.lobby.Relationship("GMCz", "lang.lobby", dateTime2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test476() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test476"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    java.lang.String str8 = commandVanish0.getName();
    java.lang.String str9 = commandVanish0.getName();
    java.lang.String str10 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender11 = null;
    org.bukkit.command.Command command12 = null;
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char15 = i18n14.getColorChar();
    char char16 = i18n14.getColorChar();
    char char17 = i18n14.getColorChar();
    char char18 = i18n14.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n19.getBundleCache$spigot_1_8();
    java.lang.String[] str_array21 = new java.lang.String[] {  };
    java.lang.String[] str_array23 = i18n19.getStrings(str_array21, "hi!");
    java.lang.String[] str_array25 = i18n14.getStrings(str_array23, "GMCrx");
    // The following exception was thrown during execution in test generation
    try {
    boolean b26 = commandVanish0.execute(commandSender11, command12, "GMC", str_array25);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "vanish"+ "'", str9.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "vanish"+ "'", str10.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);

  }

  @Test
  public void test477() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test477"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    org.bukkit.command.CommandSender commandSender4 = null;
    org.bukkit.command.Command command5 = null;
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char8 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char14 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache16 = i18n13.getBundleCache$spigot_1_8();
    char char17 = i18n13.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    char char21 = i18n18.getColorChar();
    char char22 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n23.getBundleCache$spigot_1_8();
    java.lang.String[] str_array25 = new java.lang.String[] {  };
    java.lang.String[] str_array27 = i18n23.getStrings(str_array25, "hi!");
    java.lang.String[] str_array29 = i18n18.getStrings(str_array27, "GMCrx");
    java.lang.String[] str_array31 = i18n13.getStrings(str_array27, "GMC");
    java.lang.String[] str_array33 = i18n7.getStrings(str_array27, "GMCw");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str34 = commandFriends0.getTabCompletion(commandSender4, command5, "vanish", str_array27);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);

  }

  @Test
  public void test478() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test478"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    java.lang.String str7 = commandCoins0.getName();
    java.lang.String str8 = commandCoins0.getName();
    java.lang.String str9 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender10 = null;
    org.bukkit.command.Command command11 = null;
    gtlp.groundmc.lobby.util.I18n i18n13 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n13.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n15 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char16 = i18n15.getColorChar();
    char char17 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n15.getBundleCache$spigot_1_8();
    char char19 = i18n15.getColorChar();
    char char20 = i18n15.getColorChar();
    char char21 = i18n15.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    char char24 = i18n22.getColorChar();
    char char25 = i18n22.getColorChar();
    char char26 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n27.getBundleCache$spigot_1_8();
    java.lang.String[] str_array29 = new java.lang.String[] {  };
    java.lang.String[] str_array31 = i18n27.getStrings(str_array29, "hi!");
    java.lang.String[] str_array33 = i18n22.getStrings(str_array31, "GMCrx");
    java.lang.String[] str_array35 = i18n15.getStrings(str_array31, "friends");
    java.lang.String[] str_array37 = i18n13.getStrings(str_array35, "vanish");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str38 = commandCoins0.getTabCompletion(commandSender10, command11, "lang.lobby", str_array37);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "coins"+ "'", str7.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "coins"+ "'", str8.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "coins"+ "'", str9.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);

  }

  @Test
  public void test479() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test479"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    java.lang.String str8 = commandFriend0.getName();
    java.lang.String str9 = commandFriend0.getName();
    java.lang.String str10 = commandFriend0.getName();
    java.lang.String str11 = commandFriend0.getName();
    java.lang.String str12 = commandFriend0.getName();
    java.lang.String str13 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender14 = null;
    org.bukkit.command.Command command15 = null;
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    char char19 = i18n17.getColorChar();
    char char20 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    char char24 = i18n22.getColorChar();
    char char25 = i18n22.getColorChar();
    char char26 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n27.getBundleCache$spigot_1_8();
    java.lang.String[] str_array29 = new java.lang.String[] {  };
    java.lang.String[] str_array31 = i18n27.getStrings(str_array29, "hi!");
    java.lang.String[] str_array33 = i18n22.getStrings(str_array31, "GMCrx");
    java.lang.String[] str_array35 = i18n17.getStrings(str_array33, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n36 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n36.getBundleCache$spigot_1_8();
    java.lang.String[] str_array38 = new java.lang.String[] {  };
    java.lang.String[] str_array40 = i18n36.getStrings(str_array38, "hi!");
    java.lang.String[] str_array42 = i18n17.getStrings(str_array40, "groundmc.lobby.hide_players");
    // The following exception was thrown during execution in test generation
    try {
    boolean b43 = commandFriend0.execute(commandSender14, command15, "lobby", str_array40);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friend"+ "'", str8.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "friend"+ "'", str9.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "friend"+ "'", str10.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "friend"+ "'", str11.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "friend"+ "'", str12.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "friend"+ "'", str13.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);

  }

  @Test
  public void test480() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test480"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = i18n0.getBundleCache$spigot_1_8();
    char char2 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache3 = i18n0.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n4 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char5 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n4.getBundleCache$spigot_1_8();
    char char7 = i18n4.getColorChar();
    char char8 = i18n4.getColorChar();
    char char9 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char12 = i18n11.getColorChar();
    char char13 = i18n11.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n11.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char17 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n16.getBundleCache$spigot_1_8();
    char char19 = i18n16.getColorChar();
    char char20 = i18n16.getColorChar();
    char char21 = i18n16.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n16.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char24 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n23.getBundleCache$spigot_1_8();
    char char26 = i18n23.getColorChar();
    char char27 = i18n23.getColorChar();
    char char28 = i18n23.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache29 = i18n23.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n23.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char32 = i18n31.getColorChar();
    char char33 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n31.getBundleCache$spigot_1_8();
    char char35 = i18n31.getColorChar();
    char char36 = i18n31.getColorChar();
    char char37 = i18n31.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n38 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char39 = i18n38.getColorChar();
    char char40 = i18n38.getColorChar();
    char char41 = i18n38.getColorChar();
    char char42 = i18n38.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n43 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache44 = i18n43.getBundleCache$spigot_1_8();
    java.lang.String[] str_array45 = new java.lang.String[] {  };
    java.lang.String[] str_array47 = i18n43.getStrings(str_array45, "hi!");
    java.lang.String[] str_array49 = i18n38.getStrings(str_array47, "GMCrx");
    java.lang.String[] str_array51 = i18n31.getStrings(str_array47, "friends");
    java.lang.String[] str_array53 = i18n23.getStrings(str_array51, "GMCt");
    java.lang.String[] str_array55 = i18n16.getStrings(str_array51, "friend");
    gtlp.groundmc.lobby.util.I18n i18n56 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char57 = i18n56.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache58 = i18n56.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache59 = i18n56.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache60 = i18n56.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache61 = i18n56.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n62 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char63 = i18n62.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache64 = i18n62.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache65 = i18n62.getBundleCache$spigot_1_8();
    char char66 = i18n62.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n67 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char68 = i18n67.getColorChar();
    char char69 = i18n67.getColorChar();
    char char70 = i18n67.getColorChar();
    char char71 = i18n67.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n72 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache73 = i18n72.getBundleCache$spigot_1_8();
    java.lang.String[] str_array74 = new java.lang.String[] {  };
    java.lang.String[] str_array76 = i18n72.getStrings(str_array74, "hi!");
    java.lang.String[] str_array78 = i18n67.getStrings(str_array76, "GMCrx");
    java.lang.String[] str_array80 = i18n62.getStrings(str_array76, "GMC");
    java.lang.String[] str_array82 = i18n56.getStrings(str_array76, "GMCw");
    java.lang.String[] str_array84 = i18n16.getStrings(str_array82, "groundmc.lobby.admin");
    java.lang.String[] str_array86 = i18n11.getStrings(str_array82, "GMCry");
    java.lang.String[] str_array88 = i18n4.getStrings(str_array86, "groundmc.lobby.silent");
    java.lang.String[] str_array90 = i18n0.getStrings(str_array88, "GMChide");
    char char91 = i18n0.getColorChar();
    java.util.Locale locale93 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str94 = i18n0.getString("groundmc.lobby.silent", locale93);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char69 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char70 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char71 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char91 == '&');

  }

  @Test
  public void test481() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test481"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    java.lang.String str8 = commandFriend0.getName();
    java.lang.String str9 = commandFriend0.getName();
    java.lang.String str10 = commandFriend0.getName();
    java.lang.String str11 = commandFriend0.getName();
    java.lang.String str12 = commandFriend0.getName();
    java.lang.String str13 = commandFriend0.getName();
    java.lang.String str14 = commandFriend0.getName();
    java.lang.String str15 = commandFriend0.getName();
    java.util.Locale locale16 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array17 = commandFriend0.getCommandHelp(locale16);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friend"+ "'", str8.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "friend"+ "'", str9.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "friend"+ "'", str10.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "friend"+ "'", str11.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "friend"+ "'", str12.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "friend"+ "'", str13.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "friend"+ "'", str14.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "friend"+ "'", str15.equals("friend"));

  }

  @Test
  public void test482() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test482"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    org.bukkit.command.CommandSender commandSender1 = null;
    org.bukkit.command.Command command2 = null;
    gtlp.groundmc.lobby.util.I18n i18n4 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char5 = i18n4.getColorChar();
    char char6 = i18n4.getColorChar();
    char char7 = i18n4.getColorChar();
    char char8 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n9.getBundleCache$spigot_1_8();
    java.lang.String[] str_array11 = new java.lang.String[] {  };
    java.lang.String[] str_array13 = i18n9.getStrings(str_array11, "hi!");
    java.lang.String[] str_array15 = i18n4.getStrings(str_array13, "GMCrx");
    char char16 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache19 = i18n18.getBundleCache$spigot_1_8();
    java.lang.String[] str_array20 = new java.lang.String[] {  };
    java.lang.String[] str_array22 = i18n18.getStrings(str_array20, "hi!");
    java.lang.String[] str_array24 = i18n4.getStrings(str_array22, "GMCz");
    // The following exception was thrown during execution in test generation
    try {
    boolean b25 = commandFriends0.execute(commandSender1, command2, "coins", str_array24);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);

  }

  @Test
  public void test483() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test483"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender7 = null;
    org.bukkit.command.Command command8 = null;
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n10.getBundleCache$spigot_1_8();
    char char13 = i18n10.getColorChar();
    char char14 = i18n10.getColorChar();
    char char15 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n16 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n16.getBundleCache$spigot_1_8();
    java.lang.String[] str_array18 = new java.lang.String[] {  };
    java.lang.String[] str_array20 = i18n16.getStrings(str_array18, "hi!");
    java.lang.String[] str_array22 = i18n10.getStrings(str_array20, "GMCy");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str23 = commandFriend0.getTabCompletion(commandSender7, command8, "GMCy", str_array20);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);

  }

  @Test
  public void test484() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test484"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    java.lang.String str6 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender7 = null;
    org.bukkit.command.Command command8 = null;
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n10.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    char char14 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n12.getBundleCache$spigot_1_8();
    char char16 = i18n12.getColorChar();
    char char17 = i18n12.getColorChar();
    char char18 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    char char21 = i18n19.getColorChar();
    char char22 = i18n19.getColorChar();
    char char23 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n24.getBundleCache$spigot_1_8();
    java.lang.String[] str_array26 = new java.lang.String[] {  };
    java.lang.String[] str_array28 = i18n24.getStrings(str_array26, "hi!");
    java.lang.String[] str_array30 = i18n19.getStrings(str_array28, "GMCrx");
    java.lang.String[] str_array32 = i18n12.getStrings(str_array28, "friends");
    java.lang.String[] str_array34 = i18n10.getStrings(str_array32, "vanish");
    gtlp.groundmc.lobby.util.I18n i18n35 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char36 = i18n35.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n35.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache38 = i18n35.getBundleCache$spigot_1_8();
    char char39 = i18n35.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char41 = i18n40.getColorChar();
    char char42 = i18n40.getColorChar();
    char char43 = i18n40.getColorChar();
    char char44 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache46 = i18n45.getBundleCache$spigot_1_8();
    java.lang.String[] str_array47 = new java.lang.String[] {  };
    java.lang.String[] str_array49 = i18n45.getStrings(str_array47, "hi!");
    java.lang.String[] str_array51 = i18n40.getStrings(str_array49, "GMCrx");
    java.lang.String[] str_array53 = i18n35.getStrings(str_array49, "GMC");
    java.lang.String[] str_array55 = i18n10.getStrings(str_array49, "friend");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str56 = commandCoins0.getTabCompletion(commandSender7, command8, "GMCry", str_array49);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "coins"+ "'", str6.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);

  }

  @Test
  public void test485() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test485"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender4 = null;
    org.bukkit.command.Command command5 = null;
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char8 = i18n7.getColorChar();
    char char9 = i18n7.getColorChar();
    char char10 = i18n7.getColorChar();
    char char11 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n12.getBundleCache$spigot_1_8();
    java.lang.String[] str_array14 = new java.lang.String[] {  };
    java.lang.String[] str_array16 = i18n12.getStrings(str_array14, "hi!");
    java.lang.String[] str_array18 = i18n7.getStrings(str_array16, "GMCrx");
    char char19 = i18n7.getColorChar();
    char char20 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n21 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char22 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n21.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n21.getBundleCache$spigot_1_8();
    char char25 = i18n21.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    char char28 = i18n26.getColorChar();
    char char29 = i18n26.getColorChar();
    char char30 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n31.getBundleCache$spigot_1_8();
    java.lang.String[] str_array33 = new java.lang.String[] {  };
    java.lang.String[] str_array35 = i18n31.getStrings(str_array33, "hi!");
    java.lang.String[] str_array37 = i18n26.getStrings(str_array35, "GMCrx");
    java.lang.String[] str_array39 = i18n21.getStrings(str_array35, "GMC");
    java.lang.String[] str_array41 = i18n7.getStrings(str_array39, "GMCz");
    // The following exception was thrown during execution in test generation
    try {
    boolean b42 = commandVanish0.execute(commandSender4, command5, "friends", str_array39);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array41);

  }

  @Test
  public void test486() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test486"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    java.lang.String str1 = commandCoins0.getName();
    java.lang.String str2 = commandCoins0.getName();
    java.lang.String str3 = commandCoins0.getName();
    java.lang.String str4 = commandCoins0.getName();
    java.lang.String str5 = commandCoins0.getName();
    org.bukkit.command.CommandSender commandSender6 = null;
    org.bukkit.command.Command command7 = null;
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n9.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n9.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n9.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache14 = i18n9.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n9.getBundleCache$spigot_1_8();
    char char16 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n17.getBundleCache$spigot_1_8();
    char char19 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n20 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n20.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    char char24 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n22.getBundleCache$spigot_1_8();
    char char26 = i18n22.getColorChar();
    char char27 = i18n22.getColorChar();
    char char28 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char30 = i18n29.getColorChar();
    char char31 = i18n29.getColorChar();
    char char32 = i18n29.getColorChar();
    char char33 = i18n29.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n34 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache35 = i18n34.getBundleCache$spigot_1_8();
    java.lang.String[] str_array36 = new java.lang.String[] {  };
    java.lang.String[] str_array38 = i18n34.getStrings(str_array36, "hi!");
    java.lang.String[] str_array40 = i18n29.getStrings(str_array38, "GMCrx");
    java.lang.String[] str_array42 = i18n22.getStrings(str_array38, "friends");
    java.lang.String[] str_array44 = i18n20.getStrings(str_array42, "vanish");
    java.lang.String[] str_array46 = i18n17.getStrings(str_array44, "GMCt");
    java.lang.String[] str_array48 = i18n9.getStrings(str_array44, "GMCz");
    gtlp.groundmc.lobby.util.I18n i18n49 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char50 = i18n49.getColorChar();
    char char51 = i18n49.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache52 = i18n49.getBundleCache$spigot_1_8();
    char char53 = i18n49.getColorChar();
    char char54 = i18n49.getColorChar();
    char char55 = i18n49.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n56 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char57 = i18n56.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache58 = i18n56.getBundleCache$spigot_1_8();
    char char59 = i18n56.getColorChar();
    char char60 = i18n56.getColorChar();
    char char61 = i18n56.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache62 = i18n56.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache63 = i18n56.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n64 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char65 = i18n64.getColorChar();
    char char66 = i18n64.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache67 = i18n64.getBundleCache$spigot_1_8();
    char char68 = i18n64.getColorChar();
    char char69 = i18n64.getColorChar();
    char char70 = i18n64.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n71 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char72 = i18n71.getColorChar();
    char char73 = i18n71.getColorChar();
    char char74 = i18n71.getColorChar();
    char char75 = i18n71.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n76 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache77 = i18n76.getBundleCache$spigot_1_8();
    java.lang.String[] str_array78 = new java.lang.String[] {  };
    java.lang.String[] str_array80 = i18n76.getStrings(str_array78, "hi!");
    java.lang.String[] str_array82 = i18n71.getStrings(str_array80, "GMCrx");
    java.lang.String[] str_array84 = i18n64.getStrings(str_array80, "friends");
    java.lang.String[] str_array86 = i18n56.getStrings(str_array84, "GMCt");
    java.lang.String[] str_array88 = i18n49.getStrings(str_array84, "groundmc.lobby.admin");
    java.lang.String[] str_array90 = i18n9.getStrings(str_array84, "GMCrx");
    // The following exception was thrown during execution in test generation
    try {
    boolean b91 = commandCoins0.execute(commandSender6, command7, "GMCz", str_array90);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "coins"+ "'", str1.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "coins"+ "'", str2.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "coins"+ "'", str3.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "coins"+ "'", str4.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "coins"+ "'", str5.equals("coins"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char32 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char69 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char70 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char72 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char73 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char74 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char75 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array90);

  }

  @Test
  public void test487() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test487"); }

    int i1 = gtlp.groundmc.lobby.util.ExtensionsKt.getMegabytes(1073741824);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);

  }

  @Test
  public void test488() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test488"); }

    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache1 = new gtlp.groundmc.lobby.util.I18n.ResourceBundleCache("hi!");
    java.util.concurrent.ConcurrentHashMap<java.util.Locale,java.util.ResourceBundle> concurrenthashmap_locale_resourceBundle2 = resourceBundleCache1.getBackingMap$spigot_1_8();
    java.util.concurrent.ConcurrentHashMap<java.util.Locale,java.util.ResourceBundle> concurrenthashmap_locale_resourceBundle3 = resourceBundleCache1.getBackingMap$spigot_1_8();
    java.util.concurrent.ConcurrentHashMap<java.util.Locale,java.util.ResourceBundle> concurrenthashmap_locale_resourceBundle4 = resourceBundleCache1.getBackingMap$spigot_1_8();
    java.lang.String str5 = resourceBundleCache1.getName();
    java.util.Locale locale7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = resourceBundleCache1.get("GMCx", locale7);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(concurrenthashmap_locale_resourceBundle2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(concurrenthashmap_locale_resourceBundle3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(concurrenthashmap_locale_resourceBundle4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!"+ "'", str5.equals("hi!"));

  }

  @Test
  public void test489() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test489"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender2 = null;
    org.bukkit.command.Command command3 = null;
    gtlp.groundmc.lobby.util.I18n i18n5 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char6 = i18n5.getColorChar();
    char char7 = i18n5.getColorChar();
    char char8 = i18n5.getColorChar();
    char char9 = i18n5.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n10.getBundleCache$spigot_1_8();
    java.lang.String[] str_array12 = new java.lang.String[] {  };
    java.lang.String[] str_array14 = i18n10.getStrings(str_array12, "hi!");
    java.lang.String[] str_array16 = i18n5.getStrings(str_array14, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char18 = i18n17.getColorChar();
    char char19 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n17.getBundleCache$spigot_1_8();
    char char21 = i18n17.getColorChar();
    char char22 = i18n17.getColorChar();
    char char23 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char25 = i18n24.getColorChar();
    char char26 = i18n24.getColorChar();
    char char27 = i18n24.getColorChar();
    char char28 = i18n24.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n29.getBundleCache$spigot_1_8();
    java.lang.String[] str_array31 = new java.lang.String[] {  };
    java.lang.String[] str_array33 = i18n29.getStrings(str_array31, "hi!");
    java.lang.String[] str_array35 = i18n24.getStrings(str_array33, "GMCrx");
    java.lang.String[] str_array37 = i18n17.getStrings(str_array33, "friends");
    java.lang.String[] str_array39 = i18n5.getStrings(str_array37, "");
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char41 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n40.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache43 = i18n40.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache44 = i18n40.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache45 = i18n40.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n46 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char47 = i18n46.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache48 = i18n46.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache49 = i18n46.getBundleCache$spigot_1_8();
    char char50 = i18n46.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n51 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char52 = i18n51.getColorChar();
    char char53 = i18n51.getColorChar();
    char char54 = i18n51.getColorChar();
    char char55 = i18n51.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n56 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache57 = i18n56.getBundleCache$spigot_1_8();
    java.lang.String[] str_array58 = new java.lang.String[] {  };
    java.lang.String[] str_array60 = i18n56.getStrings(str_array58, "hi!");
    java.lang.String[] str_array62 = i18n51.getStrings(str_array60, "GMCrx");
    java.lang.String[] str_array64 = i18n46.getStrings(str_array60, "GMC");
    java.lang.String[] str_array66 = i18n40.getStrings(str_array60, "GMCw");
    java.lang.String[] str_array68 = i18n5.getStrings(str_array66, "GMCz");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str69 = commandVanish0.getTabCompletion(commandSender2, command3, "groundmc.lobby.vanish", str_array66);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char50 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);

  }

  @Test
  public void test490() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test490"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    org.bukkit.command.CommandSender commandSender1 = null;
    org.bukkit.command.Command command2 = null;
    gtlp.groundmc.lobby.util.I18n i18n4 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char5 = i18n4.getColorChar();
    char char6 = i18n4.getColorChar();
    char char7 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache8 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n9 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char10 = i18n9.getColorChar();
    char char11 = i18n9.getColorChar();
    char char12 = i18n9.getColorChar();
    char char13 = i18n9.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n14 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n14.getBundleCache$spigot_1_8();
    java.lang.String[] str_array16 = new java.lang.String[] {  };
    java.lang.String[] str_array18 = i18n14.getStrings(str_array16, "hi!");
    java.lang.String[] str_array20 = i18n9.getStrings(str_array18, "GMCrx");
    java.lang.String[] str_array22 = i18n4.getStrings(str_array20, "GMCt");
    gtlp.groundmc.lobby.util.I18n i18n23 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n23.getBundleCache$spigot_1_8();
    java.lang.String[] str_array25 = new java.lang.String[] {  };
    java.lang.String[] str_array27 = i18n23.getStrings(str_array25, "hi!");
    java.lang.String[] str_array29 = i18n4.getStrings(str_array27, "groundmc.lobby.hide_players");
    // The following exception was thrown during execution in test generation
    try {
    boolean b30 = commandLobby0.execute(commandSender1, command2, "lang.lobby", str_array29);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char12 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);

  }

  @Test
  public void test491() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test491"); }

    gtlp.groundmc.lobby.commands.CommandCoins commandCoins0 = new gtlp.groundmc.lobby.commands.CommandCoins();
    org.bukkit.command.CommandSender commandSender1 = null;
    org.bukkit.command.Command command2 = null;
    gtlp.groundmc.lobby.util.I18n i18n4 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char5 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache6 = i18n4.getBundleCache$spigot_1_8();
    char char7 = i18n4.getColorChar();
    char char8 = i18n4.getColorChar();
    char char9 = i18n4.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache11 = i18n4.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    char char14 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache15 = i18n12.getBundleCache$spigot_1_8();
    char char16 = i18n12.getColorChar();
    char char17 = i18n12.getColorChar();
    char char18 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n19 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char20 = i18n19.getColorChar();
    char char21 = i18n19.getColorChar();
    char char22 = i18n19.getColorChar();
    char char23 = i18n19.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n24 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache25 = i18n24.getBundleCache$spigot_1_8();
    java.lang.String[] str_array26 = new java.lang.String[] {  };
    java.lang.String[] str_array28 = i18n24.getStrings(str_array26, "hi!");
    java.lang.String[] str_array30 = i18n19.getStrings(str_array28, "GMCrx");
    java.lang.String[] str_array32 = i18n12.getStrings(str_array28, "friends");
    java.lang.String[] str_array34 = i18n4.getStrings(str_array32, "GMCt");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str35 = commandCoins0.getTabCompletion(commandSender1, command2, "lang.lobby", str_array34);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char18 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);

  }

  @Test
  public void test492() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test492"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender4 = null;
    org.bukkit.command.Command command5 = null;
    gtlp.groundmc.lobby.util.I18n i18n7 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char8 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache9 = i18n7.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache10 = i18n7.getBundleCache$spigot_1_8();
    char char11 = i18n7.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char13 = i18n12.getColorChar();
    char char14 = i18n12.getColorChar();
    char char15 = i18n12.getColorChar();
    char char16 = i18n12.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n17.getBundleCache$spigot_1_8();
    java.lang.String[] str_array19 = new java.lang.String[] {  };
    java.lang.String[] str_array21 = i18n17.getStrings(str_array19, "hi!");
    java.lang.String[] str_array23 = i18n12.getStrings(str_array21, "GMCrx");
    java.lang.String[] str_array25 = i18n7.getStrings(str_array21, "GMC");
    gtlp.groundmc.lobby.util.I18n i18n26 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char27 = i18n26.getColorChar();
    char char28 = i18n26.getColorChar();
    char char29 = i18n26.getColorChar();
    char char30 = i18n26.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n31 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n31.getBundleCache$spigot_1_8();
    java.lang.String[] str_array33 = new java.lang.String[] {  };
    java.lang.String[] str_array35 = i18n31.getStrings(str_array33, "hi!");
    java.lang.String[] str_array37 = i18n26.getStrings(str_array35, "GMCrx");
    java.lang.String[] str_array39 = i18n7.getStrings(str_array35, "GMCz");
    // The following exception was thrown during execution in test generation
    try {
    boolean b40 = commandVanish0.execute(commandSender4, command5, "GMCt", str_array35);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);

  }

  @Test
  public void test493() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test493"); }

    org.joda.time.DateTime dateTime2 = null;
    // The following exception was thrown during execution in test generation
    try {
    gtlp.groundmc.lobby.Relationship relationship3 = new gtlp.groundmc.lobby.Relationship("GMCrx", "groundmc.lobby.hide_players", dateTime2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test494() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test494"); }

    gtlp.groundmc.lobby.commands.CommandFriends commandFriends0 = new gtlp.groundmc.lobby.commands.CommandFriends();
    java.lang.String str1 = commandFriends0.getName();
    java.lang.String str2 = commandFriends0.getName();
    java.lang.String str3 = commandFriends0.getName();
    java.lang.String str4 = commandFriends0.getName();
    java.lang.String str5 = commandFriends0.getName();
    java.lang.String str6 = commandFriends0.getName();
    java.lang.String str7 = commandFriends0.getName();
    java.lang.String str8 = commandFriends0.getName();
    java.lang.String str9 = commandFriends0.getName();
    java.lang.String str10 = commandFriends0.getName();
    java.lang.String str11 = commandFriends0.getName();
    java.util.Locale locale12 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array13 = commandFriends0.getCommandHelp(locale12);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friends"+ "'", str1.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friends"+ "'", str2.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friends"+ "'", str3.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friends"+ "'", str4.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friends"+ "'", str5.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friends"+ "'", str6.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friends"+ "'", str7.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friends"+ "'", str8.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "friends"+ "'", str9.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "friends"+ "'", str10.equals("friends"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "friends"+ "'", str11.equals("friends"));

  }

  @Test
  public void test495() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test495"); }

    gtlp.groundmc.lobby.commands.CommandLobby commandLobby0 = new gtlp.groundmc.lobby.commands.CommandLobby();
    java.lang.String str1 = commandLobby0.getName();
    java.lang.String str2 = commandLobby0.getName();
    java.lang.String str3 = commandLobby0.getName();
    java.lang.String str4 = commandLobby0.getName();
    java.lang.String str5 = commandLobby0.getName();
    java.lang.String str6 = commandLobby0.getName();
    org.bukkit.command.CommandSender commandSender7 = null;
    org.bukkit.command.Command command8 = null;
    gtlp.groundmc.lobby.util.I18n i18n10 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char11 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n10.getBundleCache$spigot_1_8();
    char char13 = i18n10.getColorChar();
    char char14 = i18n10.getColorChar();
    char char15 = i18n10.getColorChar();
    char char16 = i18n10.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n17 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache18 = i18n17.getBundleCache$spigot_1_8();
    java.lang.String[] str_array19 = new java.lang.String[] {  };
    java.lang.String[] str_array21 = i18n17.getStrings(str_array19, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache22 = i18n17.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache23 = i18n17.getBundleCache$spigot_1_8();
    char char24 = i18n17.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n25.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n25.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n29 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache30 = i18n29.getBundleCache$spigot_1_8();
    java.lang.String[] str_array31 = new java.lang.String[] {  };
    java.lang.String[] str_array33 = i18n29.getStrings(str_array31, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache34 = i18n29.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n35 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char36 = i18n35.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache37 = i18n35.getBundleCache$spigot_1_8();
    char char38 = i18n35.getColorChar();
    char char39 = i18n35.getColorChar();
    char char40 = i18n35.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache41 = i18n35.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n42 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char43 = i18n42.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache44 = i18n42.getBundleCache$spigot_1_8();
    char char45 = i18n42.getColorChar();
    char char46 = i18n42.getColorChar();
    char char47 = i18n42.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache48 = i18n42.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache49 = i18n42.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n50 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char51 = i18n50.getColorChar();
    char char52 = i18n50.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache53 = i18n50.getBundleCache$spigot_1_8();
    char char54 = i18n50.getColorChar();
    char char55 = i18n50.getColorChar();
    char char56 = i18n50.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n57 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char58 = i18n57.getColorChar();
    char char59 = i18n57.getColorChar();
    char char60 = i18n57.getColorChar();
    char char61 = i18n57.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n62 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache63 = i18n62.getBundleCache$spigot_1_8();
    java.lang.String[] str_array64 = new java.lang.String[] {  };
    java.lang.String[] str_array66 = i18n62.getStrings(str_array64, "hi!");
    java.lang.String[] str_array68 = i18n57.getStrings(str_array66, "GMCrx");
    java.lang.String[] str_array70 = i18n50.getStrings(str_array66, "friends");
    java.lang.String[] str_array72 = i18n42.getStrings(str_array70, "GMCt");
    java.lang.String[] str_array74 = i18n35.getStrings(str_array70, "friend");
    java.lang.String[] str_array76 = i18n29.getStrings(str_array70, "GMCt");
    java.lang.String[] str_array78 = i18n25.getStrings(str_array70, "groundmc.lobby.admin");
    java.lang.String[] str_array80 = i18n17.getStrings(str_array78, "lang.lobby");
    java.lang.String[] str_array82 = i18n10.getStrings(str_array78, "GMCry");
    // The following exception was thrown during execution in test generation
    try {
    boolean b83 = commandLobby0.execute(commandSender7, command8, "coins", str_array82);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lobby"+ "'", str1.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lobby"+ "'", str2.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lobby"+ "'", str3.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "lobby"+ "'", str4.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "lobby"+ "'", str5.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "lobby"+ "'", str6.equals("lobby"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char11 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char13 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char14 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char56 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char60 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);

  }

  @Test
  public void test496() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test496"); }

    gtlp.groundmc.lobby.commands.CommandFriend commandFriend0 = new gtlp.groundmc.lobby.commands.CommandFriend();
    java.lang.String str1 = commandFriend0.getName();
    java.lang.String str2 = commandFriend0.getName();
    java.lang.String str3 = commandFriend0.getName();
    java.lang.String str4 = commandFriend0.getName();
    java.lang.String str5 = commandFriend0.getName();
    java.lang.String str6 = commandFriend0.getName();
    java.lang.String str7 = commandFriend0.getName();
    java.lang.String str8 = commandFriend0.getName();
    org.bukkit.command.CommandSender commandSender9 = null;
    org.bukkit.command.Command command10 = null;
    gtlp.groundmc.lobby.util.I18n i18n12 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache13 = i18n12.getBundleCache$spigot_1_8();
    java.lang.String[] str_array14 = new java.lang.String[] {  };
    java.lang.String[] str_array16 = i18n12.getStrings(str_array14, "hi!");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache17 = i18n12.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache20 = i18n18.getBundleCache$spigot_1_8();
    char char21 = i18n18.getColorChar();
    char char22 = i18n18.getColorChar();
    char char23 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache24 = i18n18.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache27 = i18n25.getBundleCache$spigot_1_8();
    char char28 = i18n25.getColorChar();
    char char29 = i18n25.getColorChar();
    char char30 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n25.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache32 = i18n25.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n33 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char34 = i18n33.getColorChar();
    char char35 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache36 = i18n33.getBundleCache$spigot_1_8();
    char char37 = i18n33.getColorChar();
    char char38 = i18n33.getColorChar();
    char char39 = i18n33.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n40 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char41 = i18n40.getColorChar();
    char char42 = i18n40.getColorChar();
    char char43 = i18n40.getColorChar();
    char char44 = i18n40.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n45 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache46 = i18n45.getBundleCache$spigot_1_8();
    java.lang.String[] str_array47 = new java.lang.String[] {  };
    java.lang.String[] str_array49 = i18n45.getStrings(str_array47, "hi!");
    java.lang.String[] str_array51 = i18n40.getStrings(str_array49, "GMCrx");
    java.lang.String[] str_array53 = i18n33.getStrings(str_array49, "friends");
    java.lang.String[] str_array55 = i18n25.getStrings(str_array53, "GMCt");
    java.lang.String[] str_array57 = i18n18.getStrings(str_array53, "friend");
    java.lang.String[] str_array59 = i18n12.getStrings(str_array53, "GMCt");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str60 = commandFriend0.getTabCompletion(commandSender9, command10, "GMCz", str_array53);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "friend"+ "'", str1.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "friend"+ "'", str2.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "friend"+ "'", str3.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "friend"+ "'", str4.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "friend"+ "'", str5.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "friend"+ "'", str6.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "friend"+ "'", str7.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "friend"+ "'", str8.equals("friend"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char35 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);

  }

  @Test
  public void test497() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test497"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    char char2 = i18n0.getColorChar();
    char char3 = i18n0.getColorChar();
    java.util.Locale locale5 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str6 = i18n0.getString("GMCry", locale5);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');

  }

  @Test
  public void test498() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test498"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    java.lang.String str8 = commandVanish0.getName();
    java.lang.String str9 = commandVanish0.getName();
    java.lang.String str10 = commandVanish0.getName();
    java.lang.String str11 = commandVanish0.getName();
    java.lang.String str12 = commandVanish0.getName();
    java.lang.String str13 = commandVanish0.getName();
    java.lang.String str14 = commandVanish0.getName();
    java.lang.String str15 = commandVanish0.getName();
    java.lang.String str16 = commandVanish0.getName();
    java.lang.String str17 = commandVanish0.getName();
    java.lang.String str18 = commandVanish0.getName();
    org.bukkit.command.CommandSender commandSender19 = null;
    org.bukkit.command.Command command20 = null;
    gtlp.groundmc.lobby.util.I18n i18n22 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char23 = i18n22.getColorChar();
    char char24 = i18n22.getColorChar();
    char char25 = i18n22.getColorChar();
    char char26 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n27 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache28 = i18n27.getBundleCache$spigot_1_8();
    java.lang.String[] str_array29 = new java.lang.String[] {  };
    java.lang.String[] str_array31 = i18n27.getStrings(str_array29, "hi!");
    java.lang.String[] str_array33 = i18n22.getStrings(str_array31, "GMCrx");
    char char34 = i18n22.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n35 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char36 = i18n35.getColorChar();
    char char37 = i18n35.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache38 = i18n35.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n39 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char40 = i18n39.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache41 = i18n39.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache42 = i18n39.getBundleCache$spigot_1_8();
    char char43 = i18n39.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n44 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char45 = i18n44.getColorChar();
    char char46 = i18n44.getColorChar();
    char char47 = i18n44.getColorChar();
    char char48 = i18n44.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n49 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache50 = i18n49.getBundleCache$spigot_1_8();
    java.lang.String[] str_array51 = new java.lang.String[] {  };
    java.lang.String[] str_array53 = i18n49.getStrings(str_array51, "hi!");
    java.lang.String[] str_array55 = i18n44.getStrings(str_array53, "GMCrx");
    java.lang.String[] str_array57 = i18n39.getStrings(str_array53, "GMC");
    java.lang.String[] str_array59 = i18n35.getStrings(str_array53, "GMCx");
    java.lang.String[] str_array61 = i18n22.getStrings(str_array59, "hi!");
    gtlp.groundmc.lobby.util.I18n i18n62 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char63 = i18n62.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache64 = i18n62.getBundleCache$spigot_1_8();
    char char65 = i18n62.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n66 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char67 = i18n66.getColorChar();
    char char68 = i18n66.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache69 = i18n66.getBundleCache$spigot_1_8();
    char char70 = i18n66.getColorChar();
    char char71 = i18n66.getColorChar();
    char char72 = i18n66.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n73 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char74 = i18n73.getColorChar();
    char char75 = i18n73.getColorChar();
    char char76 = i18n73.getColorChar();
    char char77 = i18n73.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n78 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache79 = i18n78.getBundleCache$spigot_1_8();
    java.lang.String[] str_array80 = new java.lang.String[] {  };
    java.lang.String[] str_array82 = i18n78.getStrings(str_array80, "hi!");
    java.lang.String[] str_array84 = i18n73.getStrings(str_array82, "GMCrx");
    java.lang.String[] str_array86 = i18n66.getStrings(str_array82, "friends");
    java.lang.String[] str_array88 = i18n62.getStrings(str_array86, "GMCsilent");
    java.lang.String[] str_array90 = i18n22.getStrings(str_array86, "");
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str91 = commandVanish0.getTabCompletion(commandSender19, command20, "groundmc.lobby.hide_players", str_array90);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "vanish"+ "'", str9.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "vanish"+ "'", str10.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "vanish"+ "'", str11.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "vanish"+ "'", str12.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "vanish"+ "'", str13.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "vanish"+ "'", str14.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "vanish"+ "'", str15.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "vanish"+ "'", str16.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "vanish"+ "'", str17.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "vanish"+ "'", str18.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char34 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char37 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char63 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char67 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char70 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char71 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char72 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char74 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char75 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char76 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char77 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array90);

  }

  @Test
  public void test499() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test499"); }

    gtlp.groundmc.lobby.util.I18n i18n0 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char1 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache2 = i18n0.getBundleCache$spigot_1_8();
    char char3 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache4 = i18n0.getBundleCache$spigot_1_8();
    char char5 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n6 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char7 = i18n6.getColorChar();
    char char8 = i18n6.getColorChar();
    char char9 = i18n6.getColorChar();
    char char10 = i18n6.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n11 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache12 = i18n11.getBundleCache$spigot_1_8();
    java.lang.String[] str_array13 = new java.lang.String[] {  };
    java.lang.String[] str_array15 = i18n11.getStrings(str_array13, "hi!");
    java.lang.String[] str_array17 = i18n6.getStrings(str_array15, "GMCrx");
    gtlp.groundmc.lobby.util.I18n i18n18 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char19 = i18n18.getColorChar();
    char char20 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache21 = i18n18.getBundleCache$spigot_1_8();
    char char22 = i18n18.getColorChar();
    char char23 = i18n18.getColorChar();
    char char24 = i18n18.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n25 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char26 = i18n25.getColorChar();
    char char27 = i18n25.getColorChar();
    char char28 = i18n25.getColorChar();
    char char29 = i18n25.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n30 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache31 = i18n30.getBundleCache$spigot_1_8();
    java.lang.String[] str_array32 = new java.lang.String[] {  };
    java.lang.String[] str_array34 = i18n30.getStrings(str_array32, "hi!");
    java.lang.String[] str_array36 = i18n25.getStrings(str_array34, "GMCrx");
    java.lang.String[] str_array38 = i18n18.getStrings(str_array34, "friends");
    java.lang.String[] str_array40 = i18n6.getStrings(str_array38, "");
    java.lang.String[] str_array42 = i18n0.getStrings(str_array38, "GMCw");
    char char43 = i18n0.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n44 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char45 = i18n44.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache46 = i18n44.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache47 = i18n44.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache48 = i18n44.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache49 = i18n44.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n50 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char51 = i18n50.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache52 = i18n50.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache53 = i18n50.getBundleCache$spigot_1_8();
    char char54 = i18n50.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n55 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char56 = i18n55.getColorChar();
    char char57 = i18n55.getColorChar();
    char char58 = i18n55.getColorChar();
    char char59 = i18n55.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n60 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache61 = i18n60.getBundleCache$spigot_1_8();
    java.lang.String[] str_array62 = new java.lang.String[] {  };
    java.lang.String[] str_array64 = i18n60.getStrings(str_array62, "hi!");
    java.lang.String[] str_array66 = i18n55.getStrings(str_array64, "GMCrx");
    java.lang.String[] str_array68 = i18n50.getStrings(str_array64, "GMC");
    java.lang.String[] str_array70 = i18n44.getStrings(str_array64, "GMCw");
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache71 = i18n44.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache72 = i18n44.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n73 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char74 = i18n73.getColorChar();
    char char75 = i18n73.getColorChar();
    char char76 = i18n73.getColorChar();
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache77 = i18n73.getBundleCache$spigot_1_8();
    gtlp.groundmc.lobby.util.I18n i18n78 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    char char79 = i18n78.getColorChar();
    char char80 = i18n78.getColorChar();
    char char81 = i18n78.getColorChar();
    char char82 = i18n78.getColorChar();
    gtlp.groundmc.lobby.util.I18n i18n83 = gtlp.groundmc.lobby.util.I18n.INSTANCE;
    gtlp.groundmc.lobby.util.I18n.ResourceBundleCache resourceBundleCache84 = i18n83.getBundleCache$spigot_1_8();
    java.lang.String[] str_array85 = new java.lang.String[] {  };
    java.lang.String[] str_array87 = i18n83.getStrings(str_array85, "hi!");
    java.lang.String[] str_array89 = i18n78.getStrings(str_array87, "GMCrx");
    java.lang.String[] str_array91 = i18n73.getStrings(str_array89, "GMCt");
    java.lang.String[] str_array93 = i18n44.getStrings(str_array91, "hi!");
    java.util.Locale locale94 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array95 = i18n0.getStrings(str_array93, locale94);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char1 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char10 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char20 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char29 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char51 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char54 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char56 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char57 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char59 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char74 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char75 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char76 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char79 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char80 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char81 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char82 == '&');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i18n83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(resourceBundleCache84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array93);

  }

  @Test
  public void test500() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest3.test500"); }

    gtlp.groundmc.lobby.commands.CommandVanish commandVanish0 = new gtlp.groundmc.lobby.commands.CommandVanish();
    java.lang.String str1 = commandVanish0.getName();
    java.lang.String str2 = commandVanish0.getName();
    java.lang.String str3 = commandVanish0.getName();
    java.lang.String str4 = commandVanish0.getName();
    java.lang.String str5 = commandVanish0.getName();
    java.lang.String str6 = commandVanish0.getName();
    java.lang.String str7 = commandVanish0.getName();
    java.lang.String str8 = commandVanish0.getName();
    java.lang.String str9 = commandVanish0.getName();
    java.lang.String str10 = commandVanish0.getName();
    java.lang.String str11 = commandVanish0.getName();
    java.lang.String str12 = commandVanish0.getName();
    java.lang.String str13 = commandVanish0.getName();
    java.lang.String str14 = commandVanish0.getName();
    java.lang.String str15 = commandVanish0.getName();
    java.lang.String str16 = commandVanish0.getName();
    java.lang.String str17 = commandVanish0.getName();
    java.lang.String str18 = commandVanish0.getName();
    java.lang.String str19 = commandVanish0.getName();
    java.util.Locale locale20 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String[] str_array21 = commandVanish0.getCommandHelp(locale20);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "vanish"+ "'", str1.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "vanish"+ "'", str2.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "vanish"+ "'", str3.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "vanish"+ "'", str4.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "vanish"+ "'", str5.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "vanish"+ "'", str6.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "vanish"+ "'", str7.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "vanish"+ "'", str8.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "vanish"+ "'", str9.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "vanish"+ "'", str10.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "vanish"+ "'", str11.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "vanish"+ "'", str12.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "vanish"+ "'", str13.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "vanish"+ "'", str14.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "vanish"+ "'", str15.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "vanish"+ "'", str16.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "vanish"+ "'", str17.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "vanish"+ "'", str18.equals("vanish"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "vanish"+ "'", str19.equals("vanish"));

  }

}
